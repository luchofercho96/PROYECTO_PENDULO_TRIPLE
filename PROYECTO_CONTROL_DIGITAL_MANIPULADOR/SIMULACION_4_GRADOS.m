%% SIMULACION DE LA PLANTA EN ESPACIOS DE ESTADOS 1
clc,clear all,close all;
%% DECLARACION DEL TIEMPO DE SIMUALCION
to=0;
ts=0.01;
tfinal=40;
pi=3.1416
t=to:ts:tfinal;
%% VARIABLES DEL SISTEMA LONGITUDES Y MASAS
m1=1;
m2=0.2;
m3=0.2;
m4=0.2;
l1=0.1;
l2=0.5;
l3=0.5;
l4=0.5;
g=9.81;
b1=0.3;
b2=0.3;
b3=0.3;
b4=0.3;
%% DECLARACION DE LOS ESTADOS INICIALES DEL ROBOT
q1(1)=pi/2;
q2(1)=pi/4;
q3(1)=pi;
q4(1)=pi/6;
q1p(1)=0;
q2p(1)=0;
q3p(1)=0;
q4p(1)=0;
%% VECTORES DE ENTRADAS DEL SISTEMA
T1=0*ones(1,length(t));
T2=0*ones(1,length(t));
T3=0*ones(1,length(t));
T4=0*ones(1,length(t));
%% SENALES DE REFRENCIA DEL CONTROLADOR
q1d=pi/2*ones(1,length(t))*0;
q2d=pi/2*ones(1,length(t));
q3d=pi/2*ones(1,length(t))*0;
q4d=pi/2*ones(1,length(t));

q1dp=0*ones(1,length(t));
q2dp=0*ones(1,length(t));
q3dp=0*ones(1,length(t));
q4dp=0*ones(1,length(t));

q1dpp=0*ones(1,length(t));
q2dpp=0*ones(1,length(t));
q3dpp=0*ones(1,length(t));
q4dpp=0*ones(1,length(t));

KP=diag([1 1 1 1]);
KD=diag([5 5 5 5]);
for k=1:length(t)
  h=[q1(k);q2(k);q3(k);q4(k)];
  hd=[q1d(k);q2d(k);q3d(k);q4d(k)];
  hdp=[q1dp(k);q2dp(k);q3dp(k);q4dp(k)];
  hdpp=[q1dpp(k);q2dpp(k);q3dpp(k);q4dpp(k)];
  hp=[q1p(k);q2p(k);q3p(k);q4p(k)];
 %Error
  he=hd-h;
  hep=hdp-hp;
  
  torque1(k)=0;
  torque2(k)=0;
  torque3(k)=0;
  torque4(k)=0;
  T=[torque1(k);torque2(k);torque3(k);torque4(k)];
  qp=[q1p(k);q2p(k);q3p(k);q4p(k)]
A =[(2*(l2^2*m2*q2p(k)*sin(2*q2(k)) - b1 + l2^2*m3*q2p(k)*sin(2*q2(k)) + l2^2*m4*q2p(k)*sin(2*q2(k)) + l4^2*m4*q2p(k)*sin(2*q2(k) + 2*q3(k) + 2*q4(k)) + l4^2*m4*q3p(k)*sin(2*q2(k) + 2*q3(k) + 2*q4(k)) + l4^2*m4*q4p(k)*sin(2*q2(k) + 2*q3(k) + 2*q4(k)) + l3^2*m3*q2p(k)*sin(2*q2(k) + 2*q3(k)) + l3^2*m3*q3p(k)*sin(2*q2(k) + 2*q3(k)) + l3^2*m4*q2p(k)*sin(2*q2(k) + 2*q3(k)) + l3^2*m4*q3p(k)*sin(2*q2(k) + 2*q3(k)) + l2*l3*m3*q3p(k)*sin(q3(k)) + l2*l3*m4*q3p(k)*sin(q3(k)) + l3*l4*m4*q4p(k)*sin(q4(k)) + 2*l3*l4*m4*q2p(k)*sin(2*q2(k) + 2*q3(k) + q4(k)) + 2*l3*l4*m4*q3p(k)*sin(2*q2(k) + 2*q3(k) + q4(k)) + l3*l4*m4*q4p(k)*sin(2*q2(k) + 2*q3(k) + q4(k)) + 2*l2*l3*m3*q2p(k)*sin(2*q2(k) + q3(k)) + l2*l3*m3*q3p(k)*sin(2*q2(k) + q3(k)) + 2*l2*l3*m4*q2p(k)*sin(2*q2(k) + q3(k)) + l2*l3*m4*q3p(k)*sin(2*q2(k) + q3(k)) + 2*l2*l4*m4*q2p(k)*sin(2*q2(k) + q3(k) + q4(k)) + l2*l4*m4*q3p(k)*sin(2*q2(k) + q3(k) + q4(k)) + l2*l4*m4*q4p(k)*sin(2*q2(k) + q3(k) + q4(k)) + l2*l4*m4*q3p(k)*sin(q3(k) + q4(k)) + l2*l4*m4*q4p(k)*sin(q3(k) + q4(k))))/(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 + l4^2*m4 + l3^2*m3*cos(2*q2(k) + 2*q3(k)) + l3^2*m4*cos(2*q2(k) + 2*q3(k)) + l2^2*m2*cos(2*q2(k)) + l2^2*m3*cos(2*q2(k)) + l2^2*m4*cos(2*q2(k)) + l4^2*m4*cos(2*q2(k) + 2*q3(k) + 2*q4(k)) + 2*l2*l4*m4*cos(2*q2(k) + q3(k) + q4(k)) + 2*l2*l4*m4*cos(q3(k) + q4(k)) + 2*l2*l3*m3*cos(q3(k)) + 2*l2*l3*m4*cos(q3(k)) + 2*l3*l4*m4*cos(q4(k)) + 2*l3*l4*m4*cos(2*q2(k) + 2*q3(k) + q4(k)) + 2*l2*l3*m3*cos(2*q2(k) + q3(k)) + 2*l2*l3*m4*cos(2*q2(k) + q3(k
  ((m3 + m4 - m4*cos(q4(k))^2)*((l2^2*m2*q1p(k)*sin(2*q2(k)))/2 + (l2^2*m3*q1p(k)*sin(2*q2(k)))/2 + (l2^2*m4*q1p(k)*sin(2*q2(k)))/2 + (l4^2*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + 2*q4(k)))/2 + (l3^2*m3*q1p(k)*sin(2*q2(k) + 2*q3(k)))/2 + (l3^2*m4*q1p(k)*sin(2*q2(k) + 2*q3(k)))/2 + l3*l4*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + q4(k)) + l2*l3*m3*q1p(k)*sin(2*q2(k) + q3(k)) + l2*l3*m4*q1p(k)*sin(2*q2(k) + q3(k)) + l2*l4*m4*q1p(k)*sin(2*q2(k) + q3(k) + q4(k))))/(l2^2*m4^2*cos(q3(k) + q4(k))^2 - l2^2*m4^2 - l2^2*m3^2 - l2^2*m2*m3 - l2^2*m2*m4 - 2*l2^2*m3*m4 + l2^2*m3^2*cos(q3(k))^2 + l2^2*m4^2*cos(q3(k))^2 + l2^2*m4^2*cos(q4(k))^2 + l2^2*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*m2*m4*cos(q4(k))^2 + 2*l2^2*m3*m4*cos(q3(k))^2 + l2^2*m3*m4*cos(q4(k))^2 - 2*l2^2*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - ((l3*m3 + l3*m4 + l2*m3*cos(q3(k)) + l2*m4*cos(q3(k)) - l3*m4*cos(q4(k))^2 - l2*m4*cos(q3(k) + q4(k))*cos(q4(k)))*((l4^2*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + 2*q4(k)))/2 + (l3^2*m3*q1p(k)*sin(2*q2(k) + 2*q3(k)))/2 + (l3^2*m4*q1p(k)*sin(2*q2(k) + 2*q3(k)))/2 + (l2*l3*m3*q1p(k)*sin(q3(k)))/2 + (l2*l3*m4*q1p(k)*sin(q3(k)))/2 + l3*l4*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + q4(k)) + (l2*l3*m3*q1p(k)*sin(2*q2(k) + q3(k)))/2 + (l2*l3*m4*q1p(k)*sin(2*q2(k) + q3(k)))/2 + (l2*l4*m4*q1p(k)*sin(2*q2(k) + q3(k) + q4(k)))/2 + (l2*l4*m4*q1p(k)*sin(q3(k) + q4(k)))/2))/(l2^2*l3*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3*m4^2 - l2^2*l3*m3^2 - l2^2*l3*m2*m3 - l2^2*l3*m2*m4 - 2*l2^2*l3*m3*m4 + l2^2*l3*m3^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q4(k))^2 + l2^2*l3*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*l3*m2*m4*cos(q4(k))^2 + 2*l2^2*l3*m3*m4*cos(q3(k))^2 + l2^2*l3*m3*m4*cos(q4(k))^2 - 2*l2^2*l3*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) + (((l4^2*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + 2*q4(k)))/2 + (l3*l4*m4*q1p(k)*sin(q4(k)))/2 + (l3*l4*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + q4(k)))/2 + (l2*l4*m4*q1p(k)*sin(2*q2(k) + q3(k) + q4(k)))/2 + (l2*l4*m4*q1p(k)*sin(q3(k) + q4(k)))/2)*(l4*m3*cos(q3(k)) + l4*m4*cos(q3(k)) - l3*m3*cos(q3(k) + q4(k)) - l3*m4*cos(q3(k) + q4(k)) - l4*m4*cos(q3(k) + q4(k))*cos(q4(k)) + l3*m3*cos(q3(k))*cos(q4(k)) + l3*m4*cos(q3(k))*cos(q4(k))))/(l2*l3*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3*l4*m4^2 - l2*l3*l4*m3^2 - l2*l3*l4*m2*m3 - l2*l3*l4*m2*m4 - 2*l2*l3*l4*m3*m4 + l2*l3*l4*m3^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q4(k))^2 + l2*l3*l4*m3*m4*cos(q3(k) + q4(k))^2 + l2*l3*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3*l4*m3*m4*cos(q3(k))^2 + l2*l3*l4*m3*m4*cos(q4(k))^2 - 2*l2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ((l3*l4*m4*q2p(k)*sin(q4(k)) + 2*l3*l4*m4*q3p(k)*sin(q4(k)) + l2*l4*m4*q2p(k)*sin(q3(k) + q4(k)))*(l4*m3*cos(q3(k)) + l4*m4*cos(q3(k)) - l3*m3*cos(q3(k) + q4(k)) - l3*m4*cos(q3(k) + q4(k)) - l4*m4*cos(q3(k) + q4(k))*cos(q4(k)) + l3*m3*cos(q3(k))*cos(q4(k)) + l3*m4*cos(q3(k))*cos(q4(k))))/(l2*l3*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3*l4*m4^2 - l2*l3*l4*m3^2 - l2*l3*l4*m2*m3 - l2*l3*l4*m2*m4 - 2*l2*l3*l4*m3*m4 + l2*l3*l4*m3^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q4(k))^2 + l2*l3*l4*m3*m4*cos(q3(k) + q4(k))^2 + l2*l3*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3*l4*m3*m4*cos(q3(k))^2 + l2*l3*l4*m3*m4*cos(q4(k))^2 - 2*l2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - ((m3 + m4 - m4*cos(q4(k))^2)*(2*l2*l3*m3*q3p(k)*sin(q3(k)) - b2 + 2*l2*l3*m4*q3p(k)*sin(q3(k)) + 2*l3*l4*m4*q4p(k)*sin(q4(k)) + 2*l2*l4*m4*q3p(k)*sin(q3(k) + q4(k)) + 2*l2*l4*m4*q4p(k)*sin(q3(k) + q4(k))))/(l2^2*m4^2*cos(q3(k) + q4(k))^2 - l2^2*m4^2 - l2^2*m3^2 - l2^2*m2*m3 - l2^2*m2*m4 - 2*l2^2*m3*m4 + l2^2*m3^2*cos(q3(k))^2 + l2^2*m4^2*cos(q3(k))^2 + l2^2*m4^2*cos(q4(k))^2 + l2^2*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*m2*m4*cos(q4(k))^2 + 2*l2^2*m3*m4*cos(q3(k))^2 + l2^2*m3*m4*cos(q4(k))^2 - 2*l2^2*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - ((l3*m3 + l3*m4 + l2*m3*cos(q3(k)) + l2*m4*cos(q3(k)) - l3*m4*cos(q4(k))^2 - l2*m4*cos(q3(k) + q4(k))*cos(q4(k)))*(l2*l3*m3*q2p(k)*sin(q3(k)) + l2*l3*m4*q2p(k)*sin(q3(k)) - 2*l3*l4*m4*q3p(k)*sin(q4(k)) + l2*l4*m4*q2p(k)*sin(q3(k) + q4(k)) - l2*l4*m4*q3p(k)*sin(q3(k) + q4(k)) + l2*l4*m4*q4p(k)*sin(q3(k) + q4(k))))/(l2^2*l3*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3*m4^2 - l2^2*l3*m3^2 - l2^2*l3*m2*m3 - l2^2*l3*m2*m4 - 2*l2^2*l3*m3*m4 + l2^2*l3*m3^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q4(k))^2 + l2^2*l3*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*l3*m2*m4*cos(q4(k))^2 + 2*l2^2*l3*m3*m4*cos(q3(k))^2 + l2^2*l3*m3*m4*cos(q4(k))^2 - 2*l2^2*l3*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(kl3*l4*m4*q3p(k)*sin(q4(k)) - b3 + l3*l4*m4*q4p(k)*sin(q4(k)))*(l3*m3 + l3*m4 + l2*m3*cos(q3(k)) + l2*m4*cos(q3(k)) - l3*m4*cos(q4(k))^2 - l2*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2^2*l3*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3*m4^2 - l2^2*l3*m3^2 - l2^2*l3*m2*m3 - l2^2*l3*m2*m4 - 2*l2^2*l3*m3*m4 + l2^2*l3*m3^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q4(k))^2 + l2^2*l3*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*l3*m2*m4*cos(q4(k))^2 + 2*l2^2*l3*m3*m4*cos(q3(k))^2 + l2^2*l3*m3*m4*cos(q4(k))^2 - 2*l2^2*l3*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - ((m3 + m4 - m4*cos(q4(k))^2)*(l2*l3*m3*q3p(k)*sin(q3(k)) + l2*l3*m4*q3p(k)*sin(q3(k)) + 2*l3*l4*m4*q4p(k)*sin(q4(k)) + l2*l4*m4*q3p(k)*sin(q3(k) + q4(k)) + 2*l2*l4*m4*q4p(k)*sin(q3(k) + q4(k))))/(l2^2*m4^2*cos(q3(k) + q4(k))^2 - l2^2*m4^2 - l2^2*m3^2 - l2^2*m2*m3 - l2^2*m2*m4 - 2*l2^2*m3*m4 + l2^2*m3^2*cos(q3(k))^2 + l2^2*m4^2*cos(q3(k))^2 + l2^2*m4^2*cos(q4(k))^2 + l2^2*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*m2*m4*cos(q4(k))^2 + 2*l2^2*m3*m4*cos(q3(k))^2 + l2^2*m3*m4*cos(q4(k))^2 - 2*l2^2*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) + (l3*l4*m4*q3p(k)*sin(q4(k))*(l4*m3*cos(q3(k)) + l4*m4*cos(q3(k)) - l3*m3*cos(q3(k) + q4(k)) - l3*m4*cos(q3(k) + q4(k)) - l4*m4*cos(q3(k) + q4(k))*cos(q4(k)) + l3*m3*cos(q3(k))*cos(q4(k)) + l3*m4*cos(q3(k))*cos(q4(k))))/(l2*l3*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3*l4*m4^2 - l2*l3*l4*m3^2 - l2*l3*l4*m2*m3 - l2*l3*l4*m2*m4 - 2*l2*l3*l4*m3*m4 + l2*l3*l4*m3^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q4(k))^2 + l2*l3*l4*m3*m4*cos(q3(k) + q4(k))^2 + l2*l3*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3*l4*m3*m4*cos(q3(k))^2 + l2*l3*l4*m3*m4*cos(q4(k))^2 - 2*l2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))),                                                                                                                                                                                                                                                                                                                                                                                                                                        (b4*(l4*m3*cos(q3(k)) + l4*m4*cos(q3(k)) - l3*m3*cos(q3(k) + q4(k)) - l3*m4*cos(q3(k) + q4(k)) - l4*m4*cos(q3(k) + q4(k))*cos(q4(k)) + l3*m3*cos(q3(k))*cos(q4(k)) + l3*m4*cos(q3(k))*cos(q4(k))))/(l2*l3*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3*l4*m4^2 - l2*l3*l4*m3^2 - l2*l3*l4*m2*m3 - l2*l3*l4*m2*m4 - 2*l2*l3*l4*m3*m4 + l2*l3*l4*m3^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q4(k))^2 + l2*l3*l4*m3*m4*cos(q3(k) + q4(k))^2 + l2*l3*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3*l4*m3*m4*cos(q3(k))^2 + l2*l3*l4*m3*m4*cos(q4(k))^2 - 2*l2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - ((l3*l4*m4*q4p(k)*sin(q4(k)) + l2*l4*m4*q4p(k)*sin(q3(k) + q4(k)))*(m3 + m4 - m4*cos(q4(k))^2))/(l2^2*m4^2*cos(q3(k) + q4(k))^2 - l2^2*m4^2 - l2^2*m3^2 - l2^2*m2*m3 - l2^2*m2*m4 - 2*l2^2*m3*m4 + l2^2*m3^2*cos(q3(k))^2 + l2^2*m4^2*cos(q3(k))^2 + l2^2*m4^2*cos(q4(k))^2 + l2^2*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*m2*m4*cos(q4(k))^2 + 2*l2^2*m3*m4*cos(q3(k))^2 + l2^2*m3*m4*cos(q4(k))^2 - 2*l2^2*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)));
  (((l4^2*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + 2*q4(k)))/2 + (l3^2*m3*q1p(k)*sin(2*q2(k) + 2*q3(k)))/2 + (l3^2*m4*q1p(k)*sin(2*q2(k) + 2*q3(k)))/2 + (l2*l3*m3*q1p(k)*sin(q3(k)))/2 + (l2*l3*m4*q1p(k)*sin(q3(k)))/2 + l3*l4*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + q4(k)) + (l2*l3*m3*q1p(k)*sin(2*q2(k) + q3(k)))/2 + (l2*l3*m4*q1p(k)*sin(2*q2(k) + q3(k)))/2 + (l2*l4*m4*q1p(k)*sin(2*q2(k) + q3(k) + q4(k)))/2 + (l2*l4*m4*q1p(k)*sin(q3(k) + q4(k)))/2)*(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 - l2^2*m4*cos(q3(k) + q4(k))^2 - l3^2*m4*cos(q4(k))^2 + 2*l2*l3*m3*cos(q3(k)) + 2*l2*l3*m4*cos(q3(k)) - 2*l2*l3*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2^2*l3^2*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3^2*m4^2 - l2^2*l3^2*m3^2 - l2^2*l3^2*m2*m3 - l2^2*l3^2*m2*m4 - 2*l2^2*l3^2*m3*m4 + l2^2*l3^2*m3^2*cos(q3(k))^2 + l2^2*l3^2*m4^2*cos(q3(k))^2 + l2^2*l3^2*m4^2*cos(q4(k))^2 + l2^2*l3^2*m2*m4*cos(q4(k))^2 + 2*l2^2*l3^2*m3*m4*cos(q3(k))^2 + l2^2*l3^2*m3*m4*cos(q4(k))^2 + l2^2*l3^2*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2^2*l3^2*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3^2*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - ((l3*m3 + l3*m4 + l2*m3*cos(q3(k)) + l2*m4*cos(q3(k)) - l3*m4*cos(q4(k))^2 - l2*m4*cos(q3(k) + q4(k))*cos(q4(k)))*((l2^2*m2*q1p(k)*sin(2*q2(k)))/2 + (l2^2*m3*q1p(k)*sin(2*q2(k)))/2 + (l2^2*m4*q1p(k)*sin(2*q2(k)))/2 + (l4^2*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + 2*q4(k)))/2 + (l3^2*m3*q1p(k)*sin(2*q2(k) + 2*q3(k)))/2 + (l3^2*m4*q1p(k)*sin(2*q2(k) + 2*q3(k)))/2 + l3*l4*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + q4(k)) + l2*l3*m3*q1p(k)*sin(2*q2(k) + q3(k)) + l2*l3*m4*q1p(k)*sin(2*q2(k) + q3(k)) + l2*l4*m4*q1p(k)*sin(2*q2(k) + q3(k) + q4(k))))/(l2^2*l3*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3*m4^2 - l2^2*l3*m3^2 - l2^2*l3*m2*m3 - l2^2*l3*m2*m4 - 2*l2^2*l3*m3*m4 + l2^2*l3*m3^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q4(k))^2 + l2^2*l3*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*l3*m2*m4*cos(q4(k))^2 + 2*l2^2*l3*m3*m4*cos(q3(k))^2 + l2^2*l3*m3*m4*cos(q4(k))^2 - 2*l2^2*l3*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - (((l4^2*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + 2*q4(k)))/2 + (l3*l4*m4*q1p(k)*sin(q4(k)))/2 + (l3*l4*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + q4(k)))/2 + (l2*l4*m4*q1p(k)*sin(2*q2(k) + q3(k) + q4(k)))/2 + (l2*l4*m4*q1p(k)*sin(q3(k) + q4(k)))/2)*(l2*l4*m2 - l3^2*m4*cos(q3(k) + q4(k)) - l3^2*m3*cos(q3(k) + q4(k)) + l2*l4*m3 + l2*l4*m4 + l3^2*m3*cos(q3(k))*cos(q4(k)) + l3^2*m4*cos(q3(k))*cos(q4(k)) + l2*l3*m2*cos(q4(k)) + l2*l3*m3*cos(q4(k)) + l2*l3*m4*cos(q4(k)) + l3*l4*m3*cos(q3(k)) + l3*l4*m4*cos(q3(k)) - l2*l4*m4*cos(q3(k) + q4(k))^2 - l2*l3*m3*cos(q3(k) + q4(k))*cos(q3(k)) - l2*l3*m4*cos(q3(k) + q4(k))*cos(q3(k)) - l3*l4*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2*l3^2*l4*m3^2*cos(q3(k))^2 - l2*l3^2*l4*m4^2 - l2*l3^2*l4*m3^2 + l2*l3^2*l4*m4^2*cos(q3(k))^2 + l2*l3^2*l4*m4^2*cos(q4(k))^2 + l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3^2*l4*m2*m3 - l2*l3^2*l4*m2*m4 - 2*l2*l3^2*l4*m3*m4 + l2*l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3^2*l4*m3*m4*cos(q3(k))^2 + l2*l3^2*l4*m3*m4*cos(q4(k))^2 + l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))),                                                                                                                                                                                                                                                                                  ((l3*m3 + l3*m4 + l2*m3*cos(q3(k)) + l2*m4*cos(q3(k)) - l3*m4*cos(q4(k))^2 - l2*m4*cos(q3(k) + q4(k))*cos(q4(k)))*(2*l2*l3*m3*q3p(k)*sin(q3(k)) - b2 + 2*l2*l3*m4*q3p(k)*sin(q3(k)) + 2*l3*l4*m4*q4p(k)*sin(q4(k)) + 2*l2*l4*m4*q3p(k)*sin(q3(k) + q4(k)) + 2*l2*l4*m4*q4p(k)*sin(q3(k) + q4(k))))/(l2^2*l3*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3*m4^2 - l2^2*l3*m3^2 - l2^2*l3*m2*m3 - l2^2*l3*m2*m4 - 2*l2^2*l3*m3*m4 + l2^2*l3*m3^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q4(k))^2 + l2^2*l3*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*l3*m2*m4*cos(q4(k))^2 + 2*l2^2*l3*m3*m4*cos(q3(k))^2 + l2^2*l3*m3*m4*cos(q4(k))^2 - 2*l2^2*l3*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) + ((l2*l3*m3*q2p(k)*sin(q3(k)) + l2*l3*m4*q2p(k)*sin(q3(k)) - 2*l3*l4*m4*q3p(k)*sin(q4(k)) + l2*l4*m4*q2p(k)*sin(q3(k) + q4(k)) - l2*l4*m4*q3p(k)*sin(q3(k) + q4(k)) + l2*l4*m4*q4p(k)*sin(q3(k) + q4(k)))*(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 - l2^2*m4*cos(q3(k) + q4(k))^2 - l3^2*m4*cos(q4(k))^2 + 2*l2*l3*m3*cos(q3(k)) + 2*l2*l3*m4*cos(q3(k)) - 2*l2*l3*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2^2*l3^2*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3^2*m4^2 - l2^2*l3^2*m3^2 - l2^2*l3^2*m2*m3 - l2^2*l3^2*m2*m4 - 2*l2^2*l3^2*m3*m4 + l2^2*l3^2*m3^2*cos(q3(k))^2 + l2^2*l3^2*m4^2*cos(q3(k))^2 + l2^2*l3^2*m4^2*cos(q4(k))^2 + l2^2*l3^2*m2*m4*cos(q4(k))^2 + 2*l2^2*l3^2*m3*m4*cos(q3(k))^2 + l2^2*l3^2*m3*m4*cos(q4(k))^2 + l2^2*l3^2*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2^2*l3^2*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3^2*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - ((l3*l4*m4*q2p(k)*sin(q4(k)) + 2*l3*l4*m4*q3p(k)*sin(q4(k)) + l2*l4*m4*q2p(k)*sin(q3(k) + q4(k)))*(l2*l4*m2 - l3^2*m4*cos(q3(k) + q4(k)) - l3^2*m3*cos(q3(k) + q4(k)) + l2*l4*m3 + l2*l4*m4 + l3^2*m3*cos(q3(k))*cos(q4(k)) + l3^2*m4*cos(q3(k))*cos(q4(k)) + l2*l3*m2*cos(q4(k)) + l2*l3*m3*cos(q4(k)) + l2*l3*m4*cos(q4(k)) + l3*l4*m3*cos(q3(k)) + l3*l4*m4*cos(q3(k)) - l2*l4*m4*cos(q3(k) + q4(k))^2 - l2*l3*m3*cos(q3(k) + q4(k))*cos(q3(k)) - l2*l3*m4*cos(q3(k) + q4(k))*cos(q3(k)) - l3*l4*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2*l3^2*l4*m3^2*cos(q3(k))^2 - l2*l3^2*l4*m4^2 - l2*l3^2*l4*m3^2 + l2*l3^2*l4*m4^2*cos(q3(k))^2 + l2*l3^2*l4*m4^2*cos(q4(k))^2 + l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3^2*l4*m2*m3 - l2*l3^2*l4*m2*m4 - 2*l2*l3^2*l4*m3*m4 + l2*l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3^2*l4*m3*m4*cos(q3(k))^2 + l2*l3^2*l4*m3*m4*cos(q4(k))^2 + l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))),                                                                                                                                                                                                                                                                    ((l2*l3*m3*q3p(k)*sin(q3(k)) + l2*l3*m4*q3p(k)*sin(q3(k)) + 2*l3*l4*m4*q4p(k)*sin(q4(k)) + l2*l4*m4*q3p(k)*sin(q3(k) + q4(k)) + 2*l2*l4*m4*q4p(k)*sin(q3(k) + q4(k)))*(l3*m3 + l3*m4 + l2*m3*cos(q3(k)) + l2*m4*cos(q3(k)) - l3*m4*cos(q4(k))^2 - l2*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2^2*l3*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3*m4^2 - l2^2*l3*m3^2 - l2^2*l3*m2*m3 - l2^2*l3*m2*m4 - 2*l2^2*l3*m3*m4 + l2^2*l3*m3^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q4(k))^2 + l2^2*l3*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*l3*m2*m4*cos(q4(k))^2 + 2*l2^2*l3*m3*m4*cos(q3(k))^2 + l2^2*l3*m3*m4*cos(q4(k))^2 - 2*l2^2*l3*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - ((2*l3*l4*m4*q3p(k)*sin(q4(k)) - b3 + l3*l4*m4*q4p(k)*sin(q4(k)))*(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 - l2^2*m4*cos(q3(k) + q4(k))^2 - l3^2*m4*cos(q4(k))^2 + 2*l2*l3*m3*cos(q3(k)) + 2*l2*l3*m4*cos(q3(k)) - 2*l2*l3*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2^2*l3^2*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3^2*m4^2 - l2^2*l3^2*m3^2 - l2^2*l3^2*m2*m3 - l2^2*l3^2*m2*m4 - 2*l2^2*l3^2*m3*m4 + l2^2*l3^2*m3^2*cos(q3(k))^2 + l2^2*l3^2*m4^2*cos(q3(k))^2 + l2^2*l3^2*m4^2*cos(q4(k))^2 + l2^2*l3^2*m2*m4*cos(q4(k))^2 + 2*l2^2*l3^2*m3*m4*cos(q3(k))^2 + l2^2*l3^2*m3*m4*cos(q4(k))^2 + l2^2*l3^2*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2^2*l3^2*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3^2*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - (l3*l4*m4*q3p(k)*sin(q4(k))*(l2*l4*m2 - l3^2*m4*cos(q3(k) + q4(k)) - l3^2*m3*cos(q3(k) + q4(k)) + l2*l4*m3 + l2*l4*m4 + l3^2*m3*cos(q3(k))*cos(q4(k)) + l3^2*m4*cos(q3(k))*cos(q4(k)) + l2*l3*m2*cos(q4(k)) + l2*l3*m3*cos(q4(k)) + l2*l3*m4*cos(q4(k)) + l3*l4*m3*cos(q3(k)) + l3*l4*m4*cos(q3(k)) - l2*l4*m4*cos(q3(k) + q4(k))^2 - l2*l3*m3*cos(q3(k) + q4(k))*cos(q3(k)) - l2*l3*m4*cos(q3(k) + q4(k))*cos(q3(k)) - l3*l4*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2*l3^2*l4*m3^2*cos(q3(k))^2 - l2*l3^2*l4*m4^2 - l2*l3^2*l4*m3^2 + l2*l3^2*l4*m4^2*cos(q3(k))^2 + l2*l3^2*l4*m4^2*cos(q4(k))^2 + l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3^2*l4*m2*m3 - l2*l3^2*l4*m2*m4 - 2*l2*l3^2*l4*m3*m4 + l2*l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3^2*l4*m3*m4*cos(q3(k))^2 + l2*l3^2*l4*m3*m4*cos(q4(k))^2 + l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))),                  ((l3*l4*m4*q4p(k)*sin(q4(k)) + l2*l4*m4*q4p(k)*sin(q3(k) + q4(k)))*(l3*m3 + l3*m4 + l2*m3*cos(q3(k)) + l2*m4*cos(q3(k)) - l3*m4*cos(q4(k))^2 - l2*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2^2*l3*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3*m4^2 - l2^2*l3*m3^2 - l2^2*l3*m2*m3 - l2^2*l3*m2*m4 - 2*l2^2*l3*m3*m4 + l2^2*l3*m3^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q4(k))^2 + l2^2*l3*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*l3*m2*m4*cos(q4(k))^2 + 2*l2^2*l3*m3*m4*cos(q3(k))^2 + l2^2*l3*m3*m4*cos(q4(k))^2 - 2*l2^2*l3*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - (b4*(l2*l4*m2 - l3^2*m4*cos(q3(k) + q4(k)) - l3^2*m3*cos(q3(k) + q4(k)) + l2*l4*m3 + l2*l4*m4 + l3^2*m3*cos(q3(k))*cos(q4(k)) + l3^2*m4*cos(q3(k))*cos(q4(k)) + l2*l3*m2*cos(q4(k)) + l2*l3*m3*cos(q4(k)) + l2*l3*m4*cos(q4(k)) + l3*l4*m3*cos(q3(k)) + l3*l4*m4*cos(q3(k)) - l2*l4*m4*cos(q3(k) + q4(k))^2 - l2*l3*m3*cos(q3(k) + q4(k))*cos(q3(k)) - l2*l3*m4*cos(q3(k) + q4(k))*cos(q3(k)) - l3*l4*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2*l3^2*l4*m3^2*cos(q3(k))^2 - l2*l3^2*l4*m4^2 - l2*l3^2*l4*m3^2 + l2*l3^2*l4*m4^2*cos(q3(k))^2 + l2*l3^2*l4*m4^2*cos(q4(k))^2 + l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3^2*l4*m2*m3 - l2*l3^2*l4*m2*m4 - 2*l2*l3^2*l4*m3*m4 + l2*l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3^2*l4*m3*m4*cos(q3(k))^2 + l2*l3^2*l4*m3*m4*cos(q4(k))^2 + l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)));
 ((l4*m3*cos(q3(k)) + l4*m4*cos(q3(k)) - l3*m3*cos(q3(k) + q4(k)) - l3*m4*cos(q3(k) + q4(k)) - l4*m4*cos(q3(k) + q4(k))*cos(q4(k)) + l3*m3*cos(q3(k))*cos(q4(k)) + l3*m4*cos(q3(k))*cos(q4(k)))*((l2^2*m2*q1p(k)*sin(2*q2(k)))/2 + (l2^2*m3*q1p(k)*sin(2*q2(k)))/2 + (l2^2*m4*q1p(k)*sin(2*q2(k)))/2 + (l4^2*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + 2*q4(k)))/2 + (l3^2*m3*q1p(k)*sin(2*q2(k) + 2*q3(k)))/2 + (l3^2*m4*q1p(k)*sin(2*q2(k) + 2*q3(k)))/2 + l3*l4*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + q4(k)) + l2*l3*m3*q1p(k)*sin(2*q2(k) + q3(k)) + l2*l3*m4*q1p(k)*sin(2*q2(k) + q3(k)) + l2*l4*m4*q1p(k)*sin(2*q2(k) + q3(k) + q4(k))))/(l2*l3*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3*l4*m4^2 - l2*l3*l4*m3^2 - l2*l3*l4*m2*m3 - l2*l3*l4*m2*m4 - 2*l2*l3*l4*m3*m4 + l2*l3*l4*m3^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q4(k))^2 + l2*l3*l4*m3*m4*cos(q3(k) + q4(k))^2 + l2*l3*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3*l4*m3*m4*cos(q3(k))^2 + l2*l3*l4*m3*m4*cos(q4(k))^2 - 2*l2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - (((l4^2*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + 2*q4(k)))/2 + (l3^2*m3*q1p(k)*sin(2*q2(k) + 2*q3(k)))/2 + (l3^2*m4*q1p(k)*sin(2*q2(k) + 2*q3(k)))/2 + (l2*l3*m3*q1p(k)*sin(q3(k)))/2 + (l2*l3*m4*q1p(k)*sin(q3(k)))/2 + l3*l4*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + q4(k)) + (l2*l3*m3*q1p(k)*sin(2*q2(k) + q3(k)))/2 + (l2*l3*m4*q1p(k)*sin(2*q2(k) + q3(k)))/2 + (l2*l4*m4*q1p(k)*sin(2*q2(k) + q3(k) + q4(k)))/2 + (l2*l4*m4*q1p(k)*sin(q3(k) + q4(k)))/2)*(l2*l4*m2 - l3^2*m4*cos(q3(k) + q4(k)) - l3^2*m3*cos(q3(k) + q4(k)) + l2*l4*m3 + l2*l4*m4 + l3^2*m3*cos(q3(k))*cos(q4(k)) + l3^2*m4*cos(q3(k))*cos(q4(k)) + l2*l3*m2*cos(q4(k)) + l2*l3*m3*cos(q4(k)) + l2*l3*m4*cos(q4(k)) + l3*l4*m3*cos(q3(k)) + l3*l4*m4*cos(q3(k)) - l2*l4*m4*cos(q3(k) + q4(k))^2 - l2*l3*m3*cos(q3(k) + q4(k))*cos(q3(k)) - l2*l3*m4*cos(q3(k) + q4(k))*cos(q3(k)) - l3*l4*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2*l3^2*l4*m3^2*cos(q3(k))^2 - l2*l3^2*l4*m4^2 - l2*l3^2*l4*m3^2 + l2*l3^2*l4*m4^2*cos(q3(k))^2 + l2*l3^2*l4*m4^2*cos(q4(k))^2 + l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3^2*l4*m2*m3 - l2*l3^2*l4*m2*m4 - 2*l2*l3^2*l4*m3*m4 + l2*l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3^2*l4*m3*m4*cos(q3(k))^2 + l2*l3^2*l4*m3*m4*cos(q4(k))^2 + l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) + (((l4^2*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + 2*q4(k)))/2 + (l3*l4*m4*q1p(k)*sin(q4(k)))/2 + (l3*l4*m4*q1p(k)*sin(2*q2(k) + 2*q3(k) + q4(k)))/2 + (l2*l4*m4*q1p(k)*sin(2*q2(k) + q3(k) + q4(k)))/2 + (l2*l4*m4*q1p(k)*sin(q3(k) + q4(k)))/2)*(l3^2*m3^2 + l3^2*m4^2 + l4^2*m4^2 - l4^2*m4^2*cos(q3(k) + q4(k))^2 + l3^2*m2*m3 + l3^2*m2*m4 + 2*l3^2*m3*m4 + l4^2*m2*m4 + l4^2*m3*m4 - l3^2*m3^2*cos(q3(k))^2 - l3^2*m4^2*cos(q3(k))^2 - 2*l3^2*m3*m4*cos(q3(k))^2 + 2*l3*l4*m4^2*cos(q4(k)) - 2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k)) + 2*l3*l4*m2*m4*cos(q4(k)) + 2*l3*l4*m3*m4*cos(q4(k)) - 2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))))/(l4*m4*(l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l3^2*l4*m4^2 - l3^2*l4*m3^2 - l3^2*l4*m2*m3 - l3^2*l4*m2*m4 - 2*l3^2*l4*m3*m4 + l3^2*l4*m3^2*cos(q3(k))^2 + l3^2*l4*m4^2*cos(q3(k))^2 + l3^2*l4*m4^2*cos(q4(k))^2 + l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 + l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l3^2*l4*m3*m4*cos(q3(k))^2 + l3^2*l4*m3*m4*cos(q4(k))^2 - 2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)))), ((l3*l4*m4*q2p(k)*sin(q4(k)) + 2*l3*l4*m4*q3p(k)*sin(q4(k)) + l2*l4*m4*q2p(k)*sin(q3(k) + q4(k)))*(l3^2*m3^2 + l3^2*m4^2 + l4^2*m4^2 - l4^2*m4^2*cos(q3(k) + q4(k))^2 + l3^2*m2*m3 + l3^2*m2*m4 + 2*l3^2*m3*m4 + l4^2*m2*m4 + l4^2*m3*m4 - l3^2*m3^2*cos(q3(k))^2 - l3^2*m4^2*cos(q3(k))^2 - 2*l3^2*m3*m4*cos(q3(k))^2 + 2*l3*l4*m4^2*cos(q4(k)) - 2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k)) + 2*l3*l4*m2*m4*cos(q4(k)) + 2*l3*l4*m3*m4*cos(q4(k)) - 2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))))/(l4*m4*(l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l3^2*l4*m4^2 - l3^2*l4*m3^2 - l3^2*l4*m2*m3 - l3^2*l4*m2*m4 - 2*l3^2*l4*m3*m4 + l3^2*l4*m3^2*cos(q3(k))^2 + l3^2*l4*m4^2*cos(q3(k))^2 + l3^2*l4*m4^2*cos(q4(k))^2 + l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 + l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l3^2*l4*m3*m4*cos(q3(k))^2 + l3^2*l4*m3*m4*cos(q4(k))^2 - 2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)))) - ((2*l2*l3*m3*q3p(k)*sin(q3(k)) - b2 + 2*l2*l3*m4*q3p(k)*sin(q3(k)) + 2*l3*l4*m4*q4p(k)*sin(q4(k)) + 2*l2*l4*m4*q3p(k)*sin(q3(k) + q4(k)) + 2*l2*l4*m4*q4p(k)*sin(q3(k) + q4(k)))*(l4*m3*cos(q3(k)) + l4*m4*cos(q3(k)) - l3*m3*cos(q3(k) + q4(k)) - l3*m4*cos(q3(k) + q4(k)) - l4*m4*cos(q3(k) + q4(k))*cos(q4(k)) + l3*m3*cos(q3(k))*cos(q4(k)) + l3*m4*cos(q3(k))*cos(q4(k))))/(l2*l3*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3*l4*m4^2 - l2*l3*l4*m3^2 - l2*l3*l4*m2*m3 - l2*l3*l4*m2*m4 - 2*l2*l3*l4*m3*m4 + l2*l3*l4*m3^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q4(k))^2 + l2*l3*l4*m3*m4*cos(q3(k) + q4(k))^2 + l2*l3*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3*l4*m3*m4*cos(q3(k))^2 + l2*l3*l4*m3*m4*cos(q4(k))^2 - 2*l2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - ((l2*l3*m3*q2p(k)*sin(q3(k)) + l2*l3*m4*q2p(k)*sin(q3(k)) - 2*l3*l4*m4*q3p(k)*sin(q4(k)) + l2*l4*m4*q2p(k)*sin(q3(k) + q4(k)) - l2*l4*m4*q3p(k)*sin(q3(k) + q4(k)) + l2*l4*m4*q4p(k)*sin(q3(k) + q4(k)))*(l2*l4*m2 - l3^2*m4*cos(q3(k) + q4(k)) - l3^2*m3*cos(q3(k) + q4(k)) + l2*l4*m3 + l2*l4*m4 + l3^2*m3*cos(q3(k))*cos(q4(k)) + l3^2*m4*cos(q3(k))*cos(q4(k)) + l2*l3*m2*cos(q4(k)) + l2*l3*m3*cos(q4(k)) + l2*l3*m4*cos(q4(k)) + l3*l4*m3*cos(q3(k)) + l3*l4*m4*cos(q3(k)) - l2*l4*m4*cos(q3(k) + q4(k))^2 - l2*l3*m3*cos(q3(k) + q4(k))*cos(q3(k)) - l2*l3*m4*cos(q3(k) + q4(k))*cos(q3(k)) - l3*l4*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2*l3^2*l4*m3^2*cos(q3(k))^2 - l2*l3^2*l4*m4^2 - l2*l3^2*l4*m3^2 + l2*l3^2*l4*m4^2*cos(q3(k))^2 + l2*l3^2*l4*m4^2*cos(q4(k))^2 + l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3^2*l4*m2*m3 - l2*l3^2*l4*m2*m4 - 2*l2*l3^2*l4*m3*m4 + l2*l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3^2*l4*m3*m4*cos(q3(k))^2 + l2*l3^2*l4*m3*m4*cos(q4(k))^2 + l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))), ((2*l3*l4*m4*q3p(k)*sin(q4(k)) - b3 + l3*l4*m4*q4p(k)*sin(q4(k)))*(l2*l4*m2 - l3^2*m4*cos(q3(k) + q4(k)) - l3^2*m3*cos(q3(k) + q4(k)) + l2*l4*m3 + l2*l4*m4 + l3^2*m3*cos(q3(k))*cos(q4(k)) + l3^2*m4*cos(q3(k))*cos(q4(k)) + l2*l3*m2*cos(q4(k)) + l2*l3*m3*cos(q4(k)) + l2*l3*m4*cos(q4(k)) + l3*l4*m3*cos(q3(k)) + l3*l4*m4*cos(q3(k)) - l2*l4*m4*cos(q3(k) + q4(k))^2 - l2*l3*m3*cos(q3(k) + q4(k))*cos(q3(k)) - l2*l3*m4*cos(q3(k) + q4(k))*cos(q3(k)) - l3*l4*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2*l3^2*l4*m3^2*cos(q3(k))^2 - l2*l3^2*l4*m4^2 - l2*l3^2*l4*m3^2 + l2*l3^2*l4*m4^2*cos(q3(k))^2 + l2*l3^2*l4*m4^2*cos(q4(k))^2 + l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3^2*l4*m2*m3 - l2*l3^2*l4*m2*m4 - 2*l2*l3^2*l4*m3*m4 + l2*l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3^2*l4*m3*m4*cos(q3(k))^2 + l2*l3^2*l4*m3*m4*cos(q4(k))^2 + l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - ((l2*l3*m3*q3p(k)*sin(q3(k)) + l2*l3*m4*q3p(k)*sin(q3(k)) + 2*l3*l4*m4*q4p(k)*sin(q4(k)) + l2*l4*m4*q3p(k)*sin(q3(k) + q4(k)) + 2*l2*l4*m4*q4p(k)*sin(q3(k) + q4(k)))*(l4*m3*cos(q3(k)) + l4*m4*cos(q3(k)) - l3*m3*cos(q3(k) + q4(k)) - l3*m4*cos(q3(k) + q4(k)) - l4*m4*cos(q3(k) + q4(k))*cos(q4(k)) + l3*m3*cos(q3(k))*cos(q4(k)) + l3*m4*cos(q3(k))*cos(q4(k))))/(l2*l3*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3*l4*m4^2 - l2*l3*l4*m3^2 - l2*l3*l4*m2*m3 - l2*l3*l4*m2*m4 - 2*l2*l3*l4*m3*m4 + l2*l3*l4*m3^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q4(k))^2 + l2*l3*l4*m3*m4*cos(q3(k) + q4(k))^2 + l2*l3*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3*l4*m3*m4*cos(q3(k))^2 + l2*l3*l4*m3*m4*cos(q4(k))^2 - 2*l2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) + (l3*q3p(k)*sin(q4(k))*(l3^2*m3^2 + l3^2*m4^2 + l4^2*m4^2 - l4^2*m4^2*cos(q3(k) + q4(k))^2 + l3^2*m2*m3 + l3^2*m2*m4 + 2*l3^2*m3*m4 + l4^2*m2*m4 + l4^2*m3*m4 - l3^2*m3^2*cos(q3(k))^2 - l3^2*m4^2*cos(q3(k))^2 - 2*l3^2*m3*m4*cos(q3(k))^2 + 2*l3*l4*m4^2*cos(q4(k)) - 2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k)) + 2*l3*l4*m2*m4*cos(q4(k)) + 2*l3*l4*m3*m4*cos(q4(k)) - 2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))))/(l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l3^2*l4*m4^2 - l3^2*l4*m3^2 - l3^2*l4*m2*m3 - l3^2*l4*m2*m4 - 2*l3^2*l4*m3*m4 + l3^2*l4*m3^2*cos(q3(k))^2 + l3^2*l4*m4^2*cos(q3(k))^2 + l3^2*l4*m4^2*cos(q4(k))^2 + l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 + l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l3^2*l4*m3*m4*cos(q3(k))^2 + l3^2*l4*m3*m4*cos(q4(k))^2 - 2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))), (b4*(l3^2*m3^2 + l3^2*m4^2 + l4^2*m4^2 - l4^2*m4^2*cos(q3(k) + q4(k))^2 + l3^2*m2*m3 + l3^2*m2*m4 + 2*l3^2*m3*m4 + l4^2*m2*m4 + l4^2*m3*m4 - l3^2*m3^2*cos(q3(k))^2 - l3^2*m4^2*cos(q3(k))^2 - 2*l3^2*m3*m4*cos(q3(k))^2 + 2*l3*l4*m4^2*cos(q4(k)) - 2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k)) + 2*l3*l4*m2*m4*cos(q4(k)) + 2*l3*l4*m3*m4*cos(q4(k)) - 2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))))/(l4*m4*(l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l3^2*l4*m4^2 - l3^2*l4*m3^2 - l3^2*l4*m2*m3 - l3^2*l4*m2*m4 - 2*l3^2*l4*m3*m4 + l3^2*l4*m3^2*cos(q3(k))^2 + l3^2*l4*m4^2*cos(q3(k))^2 + l3^2*l4*m4^2*cos(q4(k))^2 + l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 + l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l3^2*l4*m3*m4*cos(q3(k))^2 + l3^2*l4*m3*m4*cos(q4(k))^2 - 2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)))) - ((l3*l4*m4*q4p(k)*sin(q4(k)) + l2*l4*m4*q4p(k)*sin(q3(k) + q4(k)))*(l4*m3*cos(q3(k)) + l4*m4*cos(q3(k)) - l3*m3*cos(q3(k) + q4(k)) - l3*m4*cos(q3(k) + q4(k)) - l4*m4*cos(q3(k) + q4(k))*cos(q4(k)) + l3*m3*cos(q3(k))*cos(q4(k)) + l3*m4*cos(q3(k))*cos(q4(k))))/(l2*l3*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3*l4*m4^2 - l2*l3*l4*m3^2 - l2*l3*l4*m2*m3 - l2*l3*l4*m2*m4 - 2*l2*l3*l4*m3*m4 + l2*l3*l4*m3^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q4(k))^2 + l2*l3*l4*m3*m4*cos(q3(k) + q4(k))^2 + l2*l3*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3*l4*m3*m4*cos(q3(k))^2 + l2*l3*l4*m3*m4*cos(q4(k))^2 - 2*l2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)))];
 
B = [2/(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 + l4^2*m4 + l3^2*m3*cos(2*q2(k) + 2*q3(k)) + l3^2*m4*cos(2*q2(k) + 2*q3(k)) + l2^2*m2*cos(2*q2(k)) + l2^2*m3*cos(2*q2(k)) + l2^2*m4*cos(2*q2(k)) + l4^2*m4*cos(2*q2(k) + 2*q3(k) + 2*q4(k)) + 2*l2*l4*m4*cos(2*q2(k) + q3(k) + q4(k)) + 2*l2*l4*m4*cos(q3(k) + q4(k)) + 2*l2*l3*m3*cos(q3(k)) + 2*l2*l3*m4*cos(q3(k)) + 2*l3*l4*m4*cos(q4(k)) + 2*l3*l4*m4*cos(2*q2(k) + 2*q3(k) + q4(k)) + 2*l2*l3*m3*cos(2*q2(k) + q3(k)) + 2*l2*l3*m4*cos(2*q2(k) + q3(k
m3 + m4 - m4*cos(q4(k))^2)/(l2^2*m4^2*cos(q3(k) + q4(k))^2 - l2^2*m4^2 - l2^2*m3^2 - l2^2*m2*m3 - l2^2*m2*m4 - 2*l2^2*m3*m4 + l2^2*m3^2*cos(q3(k))^2 + l2^2*m4^2*cos(q3(k))^2 + l2^2*m4^2*cos(q4(k))^2 + l2^2*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*m2*m4*cos(q4(k))^2 + 2*l2^2*m3*m4*cos(q3(k))^2 + l2^2*m3*m4*cos(q4(k))^2 - 2*l2^2*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))),                                                                                                                                                                                                                                                                                                                                                                                   (l3*m3 + l3*m4 + l2*m3*cos(q3(k)) + l2*m4*cos(q3(k)) - l3*m4*cos(q4(k))^2 - l2*m4*cos(q3(k) + q4(k))*cos(q4(k)))/(l2^2*l3*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3*m4^2 - l2^2*l3*m3^2 - l2^2*l3*m2*m3 - l2^2*l3*m2*m4 - 2*l2^2*l3*m3*m4 + l2^2*l3*m3^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q4(k))^2 + l2^2*l3*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*l3*m2*m4*cos(q4(k))^2 + 2*l2^2*l3*m3*m4*cos(q3(k))^2 + l2^2*l3*m3*m4*cos(q4(k))^2 - 2*l2^2*l3*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))),                                                                                                                                                                                                                                                                               -(l4*m3*cos(q3(k)) + l4*m4*cos(q3(k)) - l3*m3*cos(q3(k) + q4(k)) - l3*m4*cos(q3(k) + q4(k)) - l4*m4*cos(q3(k) + q4(k))*cos(q4(k)) + l3*m3*cos(q3(k))*cos(q4(k)) + l3*m4*cos(q3(k))*cos(q4(k)))/(l2*l3*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3*l4*m4^2 - l2*l3*l4*m3^2 - l2*l3*l4*m2*m3 - l2*l3*l4*m2*m4 - 2*l2*l3*l4*m3*m4 + l2*l3*l4*m3^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q4(k))^2 + l2*l3*l4*m3*m4*cos(q3(k) + q4(k))^2 + l2*l3*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3*l4*m3*m4*cos(q3(k))^2 + l2*l3*l4*m3*m4*cos(q4(k))^2 - 2*l2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)));
l3*m3 + l3*m4 + l2*m3*cos(q3(k)) + l2*m4*cos(q3(k)) - l3*m4*cos(q4(k))^2 - l2*m4*cos(q3(k) + q4(k))*cos(q4(k)))/(l2^2*l3*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3*m4^2 - l2^2*l3*m3^2 - l2^2*l3*m2*m3 - l2^2*l3*m2*m4 - 2*l2^2*l3*m3*m4 + l2^2*l3*m3^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q4(k))^2 + l2^2*l3*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*l3*m2*m4*cos(q4(k))^2 + 2*l2^2*l3*m3*m4*cos(q3(k))^2 + l2^2*l3*m3*m4*cos(q4(k))^2 - 2*l2^2*l3*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))),                                                                                                                                                                                                                                                                -(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 - l2^2*m4*cos(q3(k) + q4(k))^2 - l3^2*m4*cos(q4(k))^2 + 2*l2*l3*m3*cos(q3(k)) + 2*l2*l3*m4*cos(q3(k)) - 2*l2*l3*m4*cos(q3(k) + q4(k))*cos(q4(k)))/(l2^2*l3^2*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3^2*m4^2 - l2^2*l3^2*m3^2 - l2^2*l3^2*m2*m3 - l2^2*l3^2*m2*m4 - 2*l2^2*l3^2*m3*m4 + l2^2*l3^2*m3^2*cos(q3(k))^2 + l2^2*l3^2*m4^2*cos(q3(k))^2 + l2^2*l3^2*m4^2*cos(q4(k))^2 + l2^2*l3^2*m2*m4*cos(q4(k))^2 + 2*l2^2*l3^2*m3*m4*cos(q3(k))^2 + l2^2*l3^2*m3*m4*cos(q4(k))^2 + l2^2*l3^2*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2^2*l3^2*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3^2*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))), (l2*l4*m2 - l3^2*m4*cos(q3(k) + q4(k)) - l3^2*m3*cos(q3(k) + q4(k)) + l2*l4*m3 + l2*l4*m4 + l3^2*m3*cos(q3(k))*cos(q4(k)) + l3^2*m4*cos(q3(k))*cos(q4(k)) + l2*l3*m2*cos(q4(k)) + l2*l3*m3*cos(q4(k)) + l2*l3*m4*cos(q4(k)) + l3*l4*m3*cos(q3(k)) + l3*l4*m4*cos(q3(k)) - l2*l4*m4*cos(q3(k) + q4(k))^2 - l2*l3*m3*cos(q3(k) + q4(k))*cos(q3(k)) - l2*l3*m4*cos(q3(k) + q4(k))*cos(q3(k)) - l3*l4*m4*cos(q3(k) + q4(k))*cos(q4(k)))/(l2*l3^2*l4*m3^2*cos(q3(k))^2 - l2*l3^2*l4*m4^2 - l2*l3^2*l4*m3^2 + l2*l3^2*l4*m4^2*cos(q3(k))^2 + l2*l3^2*l4*m4^2*cos(q4(k))^2 + l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3^2*l4*m2*m3 - l2*l3^2*l4*m2*m4 - 2*l2*l3^2*l4*m3*m4 + l2*l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3^2*l4*m3*m4*cos(q3(k))^2 + l2*l3^2*l4*m3*m4*cos(q4(k))^2 + l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)));
l4*m3*cos(q3(k)) + l4*m4*cos(q3(k)) - l3*m3*cos(q3(k) + q4(k)) - l3*m4*cos(q3(k) + q4(k)) - l4*m4*cos(q3(k) + q4(k))*cos(q4(k)) + l3*m3*cos(q3(k))*cos(q4(k)) + l3*m4*cos(q3(k))*cos(q4(k)))/(l2*l3*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3*l4*m4^2 - l2*l3*l4*m3^2 - l2*l3*l4*m2*m3 - l2*l3*l4*m2*m4 - 2*l2*l3*l4*m3*m4 + l2*l3*l4*m3^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q4(k))^2 + l2*l3*l4*m3*m4*cos(q3(k) + q4(k))^2 + l2*l3*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3*l4*m3*m4*cos(q3(k))^2 + l2*l3*l4*m3*m4*cos(q4(k))^2 - 2*l2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))), (l2*l4*m2 - l3^2*m4*cos(q3(k) + q4(k)) - l3^2*m3*cos(q3(k) + q4(k)) + l2*l4*m3 + l2*l4*m4 + l3^2*m3*cos(q3(k))*cos(q4(k)) + l3^2*m4*cos(q3(k))*cos(q4(k)) + l2*l3*m2*cos(q4(k)) + l2*l3*m3*cos(q4(k)) + l2*l3*m4*cos(q4(k)) + l3*l4*m3*cos(q3(k)) + l3*l4*m4*cos(q3(k)) - l2*l4*m4*cos(q3(k) + q4(k))^2 - l2*l3*m3*cos(q3(k) + q4(k))*cos(q3(k)) - l2*l3*m4*cos(q3(k) + q4(k))*cos(q3(k)) - l3*l4*m4*cos(q3(k) + q4(k))*cos(q4(k)))/(l2*l3^2*l4*m3^2*cos(q3(k))^2 - l2*l3^2*l4*m4^2 - l2*l3^2*l4*m3^2 + l2*l3^2*l4*m4^2*cos(q3(k))^2 + l2*l3^2*l4*m4^2*cos(q4(k))^2 + l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3^2*l4*m2*m3 - l2*l3^2*l4*m2*m4 - 2*l2*l3^2*l4*m3*m4 + l2*l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3^2*l4*m3*m4*cos(q3(k))^2 + l2*l3^2*l4*m3*m4*cos(q4(k))^2 + l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))),                                                                                  -(l3^2*m3^2 + l3^2*m4^2 + l4^2*m4^2 - l4^2*m4^2*cos(q3(k) + q4(k))^2 + l3^2*m2*m3 + l3^2*m2*m4 + 2*l3^2*m3*m4 + l4^2*m2*m4 + l4^2*m3*m4 - l3^2*m3^2*cos(q3(k))^2 - l3^2*m4^2*cos(q3(k))^2 - 2*l3^2*m3*m4*cos(q3(k))^2 + 2*l3*l4*m4^2*cos(q4(k)) - 2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k)) + 2*l3*l4*m2*m4*cos(q4(k)) + 2*l3*l4*m3*m4*cos(q4(k)) - 2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k)))/(l4*m4*(l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l3^2*l4*m4^2 - l3^2*l4*m3^2 - l3^2*l4*m2*m3 - l3^2*l4*m2*m4 - 2*l3^2*l4*m3*m4 + l3^2*l4*m3^2*cos(q3(k))^2 + l3^2*l4*m4^2*cos(q3(k))^2 + l3^2*l4*m4^2*cos(q4(k))^2 + l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 + l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l3^2*l4*m3*m4*cos(q3(k))^2 + l3^2*l4*m3*m4*cos(q4(k))^2 - 2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))))];
 
G=[ 0;
  (g*(m3 + m4 - m4*cos(q4(k))^2)*(l2*m2*cos(q2(k)) + l2*m3*cos(q2(k)) + l2*m4*cos(q2(k)) + l4*m4*cos(q2(k) + q3(k) + q4(k)) + l3*m3*cos(q2(k) + q3(k)) + l3*m4*cos(q2(k) + q3(k))))/(l2^2*m4^2*cos(q3(k) + q4(k))^2 - l2^2*m4^2 - l2^2*m3^2 - l2^2*m2*m3 - l2^2*m2*m4 - 2*l2^2*m3*m4 + l2^2*m3^2*cos(q3(k))^2 + l2^2*m4^2*cos(q3(k))^2 + l2^2*m4^2*cos(q4(k))^2 + l2^2*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*m2*m4*cos(q4(k))^2 + 2*l2^2*m3*m4*cos(q3(k))^2 + l2^2*m3*m4*cos(q4(k))^2 - 2*l2^2*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - ((g*l3*m3*cos(q2(k) + q3(k)) + g*l3*m4*cos(q2(k) + q3(k)) + g*l4*m4*cos(q2(k) + q3(k) + q4(k)))*(l3*m3 + l3*m4 + l2*m3*cos(q3(k)) + l2*m4*cos(q3(k)) - l3*m4*cos(q4(k))^2 - l2*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2^2*l3*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3*m4^2 - l2^2*l3*m3^2 - l2^2*l3*m2*m3 - l2^2*l3*m2*m4 - 2*l2^2*l3*m3*m4 + l2^2*l3*m3^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q4(k))^2 + l2^2*l3*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*l3*m2*m4*cos(q4(k))^2 + 2*l2^2*l3*m3*m4*cos(q3(k))^2 + l2^2*l3*m3*m4*cos(q4(k))^2 - 2*l2^2*l3*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) + (g*l4*m4*cos(q2(k) + q3(k) + q4(k))*(l4*m3*cos(q3(k)) + l4*m4*cos(q3(k)) - l3*m3*cos(q3(k) + q4(k)) - l3*m4*cos(q3(k) + q4(k)) - l4*m4*cos(q3(k) + q4(k))*cos(q4(k)) + l3*m3*cos(q3(k))*cos(q4(k)) + l3*m4*cos(q3(k))*cos(q4(k))))/(l2*l3*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3*l4*m4^2 - l2*l3*l4*m3^2 - l2*l3*l4*m2*m3 - l2*l3*l4*m2*m4 - 2*l2*l3*l4*m3*m4 + l2*l3*l4*m3^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q4(k))^2 + l2*l3*l4*m3*m4*cos(q3(k) + q4(k))^2 + l2*l3*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3*l4*m3*m4*cos(q3(k))^2 + l2*l3*l4*m3*m4*cos(q4(k))^2 - 2*l2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)));
  ((g*l3*m3*cos(q2(k) + q3(k)) + g*l3*m4*cos(q2(k) + q3(k)) + g*l4*m4*cos(q2(k) + q3(k) + q4(k)))*(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 - l2^2*m4*cos(q3(k) + q4(k))^2 - l3^2*m4*cos(q4(k))^2 + 2*l2*l3*m3*cos(q3(k)) + 2*l2*l3*m4*cos(q3(k)) - 2*l2*l3*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2^2*l3^2*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3^2*m4^2 - l2^2*l3^2*m3^2 - l2^2*l3^2*m2*m3 - l2^2*l3^2*m2*m4 - 2*l2^2*l3^2*m3*m4 + l2^2*l3^2*m3^2*cos(q3(k))^2 + l2^2*l3^2*m4^2*cos(q3(k))^2 + l2^2*l3^2*m4^2*cos(q4(k))^2 + l2^2*l3^2*m2*m4*cos(q4(k))^2 + 2*l2^2*l3^2*m3*m4*cos(q3(k))^2 + l2^2*l3^2*m3*m4*cos(q4(k))^2 + l2^2*l3^2*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2^2*l3^2*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3^2*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - (g*(l3*m3 + l3*m4 + l2*m3*cos(q3(k)) + l2*m4*cos(q3(k)) - l3*m4*cos(q4(k))^2 - l2*m4*cos(q3(k) + q4(k))*cos(q4(k)))*(l2*m2*cos(q2(k)) + l2*m3*cos(q2(k)) + l2*m4*cos(q2(k)) + l4*m4*cos(q2(k) + q3(k) + q4(k)) + l3*m3*cos(q2(k) + q3(k)) + l3*m4*cos(q2(k) + q3(k))))/(l2^2*l3*m4^2*cos(q3(k) + q4(k))^2 - l2^2*l3*m4^2 - l2^2*l3*m3^2 - l2^2*l3*m2*m3 - l2^2*l3*m2*m4 - 2*l2^2*l3*m3*m4 + l2^2*l3*m3^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q3(k))^2 + l2^2*l3*m4^2*cos(q4(k))^2 + l2^2*l3*m3*m4*cos(q3(k) + q4(k))^2 + l2^2*l3*m2*m4*cos(q4(k))^2 + 2*l2^2*l3*m3*m4*cos(q3(k))^2 + l2^2*l3*m3*m4*cos(q4(k))^2 - 2*l2^2*l3*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2^2*l3*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - (g*l4*m4*cos(q2(k) + q3(k) + q4(k))*(l2*l4*m2 - l3^2*m4*cos(q3(k) + q4(k)) - l3^2*m3*cos(q3(k) + q4(k)) + l2*l4*m3 + l2*l4*m4 + l3^2*m3*cos(q3(k))*cos(q4(k)) + l3^2*m4*cos(q3(k))*cos(q4(k)) + l2*l3*m2*cos(q4(k)) + l2*l3*m3*cos(q4(k)) + l2*l3*m4*cos(q4(k)) + l3*l4*m3*cos(q3(k)) + l3*l4*m4*cos(q3(k)) - l2*l4*m4*cos(q3(k) + q4(k))^2 - l2*l3*m3*cos(q3(k) + q4(k))*cos(q3(k)) - l2*l3*m4*cos(q3(k) + q4(k))*cos(q3(k)) - l3*l4*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2*l3^2*l4*m3^2*cos(q3(k))^2 - l2*l3^2*l4*m4^2 - l2*l3^2*l4*m3^2 + l2*l3^2*l4*m4^2*cos(q3(k))^2 + l2*l3^2*l4*m4^2*cos(q4(k))^2 + l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3^2*l4*m2*m3 - l2*l3^2*l4*m2*m4 - 2*l2*l3^2*l4*m3*m4 + l2*l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3^2*l4*m3*m4*cos(q3(k))^2 + l2*l3^2*l4*m3*m4*cos(q4(k))^2 + l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)));
 (g*(l2*m2*cos(q2(k)) + l2*m3*cos(q2(k)) + l2*m4*cos(q2(k)) + l4*m4*cos(q2(k) + q3(k) + q4(k)) + l3*m3*cos(q2(k) + q3(k)) + l3*m4*cos(q2(k) + q3(k)))*(l4*m3*cos(q3(k)) + l4*m4*cos(q3(k)) - l3*m3*cos(q3(k) + q4(k)) - l3*m4*cos(q3(k) + q4(k)) - l4*m4*cos(q3(k) + q4(k))*cos(q4(k)) + l3*m3*cos(q3(k))*cos(q4(k)) + l3*m4*cos(q3(k))*cos(q4(k))))/(l2*l3*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3*l4*m4^2 - l2*l3*l4*m3^2 - l2*l3*l4*m2*m3 - l2*l3*l4*m2*m4 - 2*l2*l3*l4*m3*m4 + l2*l3*l4*m3^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q3(k))^2 + l2*l3*l4*m4^2*cos(q4(k))^2 + l2*l3*l4*m3*m4*cos(q3(k) + q4(k))^2 + l2*l3*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3*l4*m3*m4*cos(q3(k))^2 + l2*l3*l4*m3*m4*cos(q4(k))^2 - 2*l2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) - ((g*l3*m3*cos(q2(k) + q3(k)) + g*l3*m4*cos(q2(k) + q3(k)) + g*l4*m4*cos(q2(k) + q3(k) + q4(k)))*(l2*l4*m2 - l3^2*m4*cos(q3(k) + q4(k)) - l3^2*m3*cos(q3(k) + q4(k)) + l2*l4*m3 + l2*l4*m4 + l3^2*m3*cos(q3(k))*cos(q4(k)) + l3^2*m4*cos(q3(k))*cos(q4(k)) + l2*l3*m2*cos(q4(k)) + l2*l3*m3*cos(q4(k)) + l2*l3*m4*cos(q4(k)) + l3*l4*m3*cos(q3(k)) + l3*l4*m4*cos(q3(k)) - l2*l4*m4*cos(q3(k) + q4(k))^2 - l2*l3*m3*cos(q3(k) + q4(k))*cos(q3(k)) - l2*l3*m4*cos(q3(k) + q4(k))*cos(q3(k)) - l3*l4*m4*cos(q3(k) + q4(k))*cos(q4(k))))/(l2*l3^2*l4*m3^2*cos(q3(k))^2 - l2*l3^2*l4*m4^2 - l2*l3^2*l4*m3^2 + l2*l3^2*l4*m4^2*cos(q3(k))^2 + l2*l3^2*l4*m4^2*cos(q4(k))^2 + l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l2*l3^2*l4*m2*m3 - l2*l3^2*l4*m2*m4 - 2*l2*l3^2*l4*m3*m4 + l2*l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l2*l3^2*l4*m3*m4*cos(q3(k))^2 + l2*l3^2*l4*m3*m4*cos(q4(k))^2 + l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 - 2*l2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k))) + (g*cos(q2(k) + q3(k) + q4(k))*(l3^2*m3^2 + l3^2*m4^2 + l4^2*m4^2 - l4^2*m4^2*cos(q3(k) + q4(k))^2 + l3^2*m2*m3 + l3^2*m2*m4 + 2*l3^2*m3*m4 + l4^2*m2*m4 + l4^2*m3*m4 - l3^2*m3^2*cos(q3(k))^2 - l3^2*m4^2*cos(q3(k))^2 - 2*l3^2*m3*m4*cos(q3(k))^2 + 2*l3*l4*m4^2*cos(q4(k)) - 2*l3*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k)) + 2*l3*l4*m2*m4*cos(q4(k)) + 2*l3*l4*m3*m4*cos(q4(k)) - 2*l3*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))))/(l3^2*l4*m4^2*cos(q3(k) + q4(k))^2 - l3^2*l4*m4^2 - l3^2*l4*m3^2 - l3^2*l4*m2*m3 - l3^2*l4*m2*m4 - 2*l3^2*l4*m3*m4 + l3^2*l4*m3^2*cos(q3(k))^2 + l3^2*l4*m4^2*cos(q3(k))^2 + l3^2*l4*m4^2*cos(q4(k))^2 + l3^2*l4*m3*m4*cos(q3(k) + q4(k))^2 + l3^2*l4*m2*m4*cos(q4(k))^2 + 2*l3^2*l4*m3*m4*cos(q3(k))^2 + l3^2*l4*m3*m4*cos(q4(k))^2 - 2*l3^2*l4*m4^2*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)) - 2*l3^2*l4*m3*m4*cos(q3(k) + q4(k))*cos(q3(k))*cos(q4(k)))];


  Control=hdpp+KP*he+KD*hep;
  T=inv(B)*Control-inv(B)*A*qp-inv(B)*G;
  
   qpp=A*qp+B*T+G
   
  
  
  %% INTEGRACION NUMERICA PARA SACAR VELOCIDADES
    q1p(k+1)=q1p(k)+ts*qpp(1);
    q2p(k+1)=q2p(k)+ts*qpp(2);
    q3p(k+1)=q3p(k)+ts*qpp(3);
    q4p(k+1)=q4p(k)+ts*qpp(4);
    %% INTEGRACION NUMERICA PARA SACAR POSICIONES
    q1(k+1)=q1(k)+ts*q1p(k);
    q2(k+1)=q2(k)+ts*q2p(k);
    q3(k+1)=q3(k)+ts*q3p(k);
    q4(k+1)=q4(k)+ts*q4p(k);
    
end
figure()
plot(t,q1(1:length(t)),'-r');
hold on
grid on;
plot(t,q2(1:length(t)),'-b');
plot(t,q3(1:length(t)),'-m');
plot(t,q4(1:length(t)),'-g');
%plot(t,x3(1:length(t)),'--r');
%plot(t,x4(1:length(t)),'--b');
%legend('q1','q2','q1d','q2d')

legend('q1','q2','q3','q4')
figure()
plot(t,torque1(1:length(t)),'-r');
hold on
grid on;
plot(t,torque2(1:length(t)),'-b');
legend('T1','T2');
Animacion_brazo(l1,l2,l3,l4,q1,q2,q3,q4,t,ts)
A_l11=(2*(l2^2*m2*t2p*sin(2*theta2) - b1 + l2^2*m3*t2p*sin(2*theta2) + l2^2*m4*t2p*sin(2*theta2) + l4^2*m4*t2p*sin(2*theta2 + 2*theta3 + 2*theta4) + l4^2*m4*t3p*sin(2*theta2 + 2*theta3 + 2*theta4) + l4^2*m4*t4p*sin(2*theta2 + 2*theta3 + 2*theta4) + l3^2*m3*t2p*sin(2*theta2 + 2*theta3) + l3^2*m3*t3p*sin(2*theta2 + 2*theta3) + l3^2*m4*t2p*sin(2*theta2 + 2*theta3) + l3^2*m4*t3p*sin(2*theta2 + 2*theta3) + l2*l3*m3*t3p*sin(theta3) + l2*l3*m4*t3p*sin(theta3) + l3*l4*m4*t4p*sin(theta4) + 2*l3*l4*m4*t2p*sin(2*theta2 + 2*theta3 + theta4) + 2*l3*l4*m4*t3p*sin(2*theta2 + 2*theta3 + theta4) + l3*l4*m4*t4p*sin(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*t2p*sin(2*theta2 + theta3) + l2*l3*m3*t3p*sin(2*theta2 + theta3) + 2*l2*l3*m4*t2p*sin(2*theta2 + theta3) + l2*l3*m4*t3p*sin(2*theta2 + theta3) + 2*l2*l4*m4*t2p*sin(2*theta2 + theta3 + theta4) + l2*l4*m4*t3p*sin(2*theta2 + theta3 + theta4) + l2*l4*m4*t4p*sin(2*theta2 + theta3 + theta4) + l2*l4*m4*t3p*sin(theta3 + theta4) + l2*l4*m4*t4p*sin(theta3 + theta4)))/(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 + l4^2*m4 + l3^2*m3*cos(2*theta2 + 2*theta3) + l3^2*m4*cos(2*theta2 + 2*theta3) + l2^2*m2*cos(2*theta2) + l2^2*m3*cos(2*theta2) + l2^2*m4*cos(2*theta2) + l4^2*m4*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l2*l4*m4*cos(2*theta2 + theta3 + theta4) + 2*l2*l4*m4*cos(theta3 + theta4) + 2*l2*l3*m3*cos(theta3) + 2*l2*l3*m4*cos(theta3) + 2*l3*l4*m4*cos(theta4) + 2*l3*l4*m4*cos(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*cos(2*theta2 + theta3) + 2*l2*l3*m4*cos(2*theta2 + theta3));
A_l12=(2*t1p*(l3^2*m3*sin(2*theta2 + 2*theta3) + l3^2*m4*sin(2*theta2 + 2*theta3) + l2^2*m2*sin(2*theta2) + l2^2*m3*sin(2*theta2) + l2^2*m4*sin(2*theta2) + l4^2*m4*sin(2*theta2 + 2*theta3 + 2*theta4) + 2*l2*l4*m4*sin(2*theta2 + theta3 + theta4) + 2*l3*l4*m4*sin(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*sin(2*theta2 + theta3) + 2*l2*l3*m4*sin(2*theta2 + theta3)))/(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 + l4^2*m4 + l3^2*m3*cos(2*theta2 + 2*theta3) + l3^2*m4*cos(2*theta2 + 2*theta3) + l2^2*m2*cos(2*theta2) + l2^2*m3*cos(2*theta2) + l2^2*m4*cos(2*theta2) + l4^2*m4*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l2*l4*m4*cos(2*theta2 + theta3 + theta4) + 2*l2*l4*m4*cos(theta3 + theta4) + 2*l2*l3*m3*cos(theta3) + 2*l2*l3*m4*cos(theta3) + 2*l3*l4*m4*cos(theta4) + 2*l3*l4*m4*cos(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*cos(2*theta2 + theta3) + 2*l2*l3*m4*cos(2*theta2 + theta3));
A_l13=(2*t1p*(l3^2*m3*sin(2*theta2 + 2*theta3) + l3^2*m4*sin(2*theta2 + 2*theta3) + l4^2*m4*sin(2*theta2 + 2*theta3 + 2*theta4) + l2*l4*m4*sin(2*theta2 + theta3 + theta4) + l2*l4*m4*sin(theta3 + theta4) + l2*l3*m3*sin(theta3) + l2*l3*m4*sin(theta3) + 2*l3*l4*m4*sin(2*theta2 + 2*theta3 + theta4) + l2*l3*m3*sin(2*theta2 + theta3) + l2*l3*m4*sin(2*theta2 + theta3)))/(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 + l4^2*m4 + l3^2*m3*cos(2*theta2 + 2*theta3) + l3^2*m4*cos(2*theta2 + 2*theta3) + l2^2*m2*cos(2*theta2) + l2^2*m3*cos(2*theta2) + l2^2*m4*cos(2*theta2) + l4^2*m4*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l2*l4*m4*cos(2*theta2 + theta3 + theta4) + 2*l2*l4*m4*cos(theta3 + theta4) + 2*l2*l3*m3*cos(theta3) + 2*l2*l3*m4*cos(theta3) + 2*l3*l4*m4*cos(theta4) + 2*l3*l4*m4*cos(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*cos(2*theta2 + theta3) + 2*l2*l3*m4*cos(2*theta2 + theta3));
A_l14=(2*l4*m4*t1p*(l4*sin(2*theta2 + 2*theta3 + 2*theta4) + l2*sin(2*theta2 + theta3 + theta4) + l2*sin(theta3 + theta4) + l3*sin(theta4) + l3*sin(2*theta2 + 2*theta3 + theta4)))/(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 + l4^2*m4 + l3^2*m3*cos(2*theta2 + 2*theta3) + l3^2*m4*cos(2*theta2 + 2*theta3) + l2^2*m2*cos(2*theta2) + l2^2*m3*cos(2*theta2) + l2^2*m4*cos(2*theta2) + l4^2*m4*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l2*l4*m4*cos(2*theta2 + theta3 + theta4) + 2*l2*l4*m4*cos(theta3 + theta4) + 2*l2*l3*m3*cos(theta3) + 2*l2*l3*m4*cos(theta3) + 2*l3*l4*m4*cos(theta4) + 2*l3*l4*m4*cos(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*cos(2*theta2 + theta3) + 2*l2*l3*m4*cos(2*theta2 + theta3));
A_l15=0;
A_l16=(2*t1p*(2*l2^2*m2*t2p*cos(2*theta2) + 2*l2^2*m3*t2p*cos(2*theta2) + 2*l2^2*m4*t2p*cos(2*theta2) + 2*l4^2*m4*t2p*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l4^2*m4*t3p*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l4^2*m4*t4p*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l3^2*m3*t2p*cos(2*theta2 + 2*theta3) + 2*l3^2*m3*t3p*cos(2*theta2 + 2*theta3) + 2*l3^2*m4*t2p*cos(2*theta2 + 2*theta3) + 2*l3^2*m4*t3p*cos(2*theta2 + 2*theta3) + 4*l2*l3*m3*t2p*cos(2*theta2 + theta3) + 2*l2*l3*m3*t3p*cos(2*theta2 + theta3) + 4*l2*l3*m4*t2p*cos(2*theta2 + theta3) + 2*l2*l3*m4*t3p*cos(2*theta2 + theta3) + 4*l2*l4*m4*t2p*cos(2*theta2 + theta3 + theta4) + 2*l2*l4*m4*t3p*cos(2*theta2 + theta3 + theta4) + 2*l2*l4*m4*t4p*cos(2*theta2 + theta3 + theta4) + 4*l3*l4*m4*t2p*cos(2*theta2 + 2*theta3 + theta4) + 4*l3*l4*m4*t3p*cos(2*theta2 + 2*theta3 + theta4) + 2*l3*l4*m4*t4p*cos(2*theta2 + 2*theta3 + theta4)))/(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 + l4^2*m4 + l3^2*m3*cos(2*theta2 + 2*theta3) + l3^2*m4*cos(2*theta2 + 2*theta3) + l2^2*m2*cos(2*theta2) + l2^2*m3*cos(2*theta2) + l2^2*m4*cos(2*theta2) + l4^2*m4*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l2*l4*m4*cos(2*theta2 + theta3 + theta4) + 2*l2*l4*m4*cos(theta3 + theta4) + 2*l2*l3*m3*cos(theta3) + 2*l2*l3*m4*cos(theta3) + 2*l3*l4*m4*cos(theta4) + 2*l3*l4*m4*cos(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*cos(2*theta2 + theta3) + 2*l2*l3*m4*cos(2*theta2 + theta3)) + (2*t1p*(2*l3^2*m3*sin(2*theta2 + 2*theta3) + 2*l3^2*m4*sin(2*theta2 + 2*theta3) + 2*l2^2*m2*sin(2*theta2) + 2*l2^2*m3*sin(2*theta2) + 2*l2^2*m4*sin(2*theta2) + 2*l4^2*m4*sin(2*theta2 + 2*theta3 + 2*theta4) + 4*l2*l4*m4*sin(2*theta2 + theta3 + theta4) + 4*l3*l4*m4*sin(2*theta2 + 2*theta3 + theta4) + 4*l2*l3*m3*sin(2*theta2 + theta3) + 4*l2*l3*m4*sin(2*theta2 + theta3))*(l2^2*m2*t2p*sin(2*theta2) - b1 + l2^2*m3*t2p*sin(2*theta2) + l2^2*m4*t2p*sin(2*theta2) + l4^2*m4*t2p*sin(2*theta2 + 2*theta3 + 2*theta4) + l4^2*m4*t3p*sin(2*theta2 + 2*theta3 + 2*theta4) + l4^2*m4*t4p*sin(2*theta2 + 2*theta3 + 2*theta4) + l3^2*m3*t2p*sin(2*theta2 + 2*theta3) + l3^2*m3*t3p*sin(2*theta2 + 2*theta3) + l3^2*m4*t2p*sin(2*theta2 + 2*theta3) + l3^2*m4*t3p*sin(2*theta2 + 2*theta3) + l2*l3*m3*t3p*sin(theta3) + l2*l3*m4*t3p*sin(theta3) + l3*l4*m4*t4p*sin(theta4) + 2*l3*l4*m4*t2p*sin(2*theta2 + 2*theta3 + theta4) + 2*l3*l4*m4*t3p*sin(2*theta2 + 2*theta3 + theta4) + l3*l4*m4*t4p*sin(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*t2p*sin(2*theta2 + theta3) + l2*l3*m3*t3p*sin(2*theta2 + theta3) + 2*l2*l3*m4*t2p*sin(2*theta2 + theta3) + l2*l3*m4*t3p*sin(2*theta2 + theta3) + 2*l2*l4*m4*t2p*sin(2*theta2 + theta3 + theta4) + l2*l4*m4*t3p*sin(2*theta2 + theta3 + theta4) + l2*l4*m4*t4p*sin(2*theta2 + theta3 + theta4) + l2*l4*m4*t3p*sin(theta3 + theta4) + l2*l4*m4*t4p*sin(theta3 + theta4)))/(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 + l4^2*m4 + l3^2*m3*cos(2*theta2 + 2*theta3) + l3^2*m4*cos(2*theta2 + 2*theta3) + l2^2*m2*cos(2*theta2) + l2^2*m3*cos(2*theta2) + l2^2*m4*cos(2*theta2) + l4^2*m4*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l2*l4*m4*cos(2*theta2 + theta3 + theta4) + 2*l2*l4*m4*cos(theta3 + theta4) + 2*l2*l3*m3*cos(theta3) + 2*l2*l3*m4*cos(theta3) + 2*l3*l4*m4*cos(theta4) + 2*l3*l4*m4*cos(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*cos(2*theta2 + theta3) + 2*l2*l3*m4*cos(2*theta2 + theta3))^2;
A_l17=(2*t1p*(2*l4^2*m4*t2p*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l4^2*m4*t3p*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l4^2*m4*t4p*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l3^2*m3*t2p*cos(2*theta2 + 2*theta3) + 2*l3^2*m3*t3p*cos(2*theta2 + 2*theta3) + 2*l3^2*m4*t2p*cos(2*theta2 + 2*theta3) + 2*l3^2*m4*t3p*cos(2*theta2 + 2*theta3) + 2*l2*l3*m3*t2p*cos(2*theta2 + theta3) + l2*l3*m3*t3p*cos(2*theta2 + theta3) + 2*l2*l3*m4*t2p*cos(2*theta2 + theta3) + l2*l3*m4*t3p*cos(2*theta2 + theta3) + 2*l2*l4*m4*t2p*cos(2*theta2 + theta3 + theta4) + l2*l4*m4*t3p*cos(2*theta2 + theta3 + theta4) + l2*l4*m4*t4p*cos(2*theta2 + theta3 + theta4) + l2*l4*m4*t3p*cos(theta3 + theta4) + l2*l4*m4*t4p*cos(theta3 + theta4) + l2*l3*m3*t3p*cos(theta3) + l2*l3*m4*t3p*cos(theta3) + 4*l3*l4*m4*t2p*cos(2*theta2 + 2*theta3 + theta4) + 4*l3*l4*m4*t3p*cos(2*theta2 + 2*theta3 + theta4) + 2*l3*l4*m4*t4p*cos(2*theta2 + 2*theta3 + theta4)))/(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 + l4^2*m4 + l3^2*m3*cos(2*theta2 + 2*theta3) + l3^2*m4*cos(2*theta2 + 2*theta3) + l2^2*m2*cos(2*theta2) + l2^2*m3*cos(2*theta2) + l2^2*m4*cos(2*theta2) + l4^2*m4*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l2*l4*m4*cos(2*theta2 + theta3 + theta4) + 2*l2*l4*m4*cos(theta3 + theta4) + 2*l2*l3*m3*cos(theta3) + 2*l2*l3*m4*cos(theta3) + 2*l3*l4*m4*cos(theta4) + 2*l3*l4*m4*cos(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*cos(2*theta2 + theta3) + 2*l2*l3*m4*cos(2*theta2 + theta3)) + (2*t1p*(2*l3^2*m3*sin(2*theta2 + 2*theta3) + 2*l3^2*m4*sin(2*theta2 + 2*theta3) + 2*l4^2*m4*sin(2*theta2 + 2*theta3 + 2*theta4) + 2*l2*l4*m4*sin(2*theta2 + theta3 + theta4) + 2*l2*l4*m4*sin(theta3 + theta4) + 2*l2*l3*m3*sin(theta3) + 2*l2*l3*m4*sin(theta3) + 4*l3*l4*m4*sin(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*sin(2*theta2 + theta3) + 2*l2*l3*m4*sin(2*theta2 + theta3))*(l2^2*m2*t2p*sin(2*theta2) - b1 + l2^2*m3*t2p*sin(2*theta2) + l2^2*m4*t2p*sin(2*theta2) + l4^2*m4*t2p*sin(2*theta2 + 2*theta3 + 2*theta4) + l4^2*m4*t3p*sin(2*theta2 + 2*theta3 + 2*theta4) + l4^2*m4*t4p*sin(2*theta2 + 2*theta3 + 2*theta4) + l3^2*m3*t2p*sin(2*theta2 + 2*theta3) + l3^2*m3*t3p*sin(2*theta2 + 2*theta3) + l3^2*m4*t2p*sin(2*theta2 + 2*theta3) + l3^2*m4*t3p*sin(2*theta2 + 2*theta3) + l2*l3*m3*t3p*sin(theta3) + l2*l3*m4*t3p*sin(theta3) + l3*l4*m4*t4p*sin(theta4) + 2*l3*l4*m4*t2p*sin(2*theta2 + 2*theta3 + theta4) + 2*l3*l4*m4*t3p*sin(2*theta2 + 2*theta3 + theta4) + l3*l4*m4*t4p*sin(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*t2p*sin(2*theta2 + theta3) + l2*l3*m3*t3p*sin(2*theta2 + theta3) + 2*l2*l3*m4*t2p*sin(2*theta2 + theta3) + l2*l3*m4*t3p*sin(2*theta2 + theta3) + 2*l2*l4*m4*t2p*sin(2*theta2 + theta3 + theta4) + l2*l4*m4*t3p*sin(2*theta2 + theta3 + theta4) + l2*l4*m4*t4p*sin(2*theta2 + theta3 + theta4) + l2*l4*m4*t3p*sin(theta3 + theta4) + l2*l4*m4*t4p*sin(theta3 + theta4)))/(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 + l4^2*m4 + l3^2*m3*cos(2*theta2 + 2*theta3) + l3^2*m4*cos(2*theta2 + 2*theta3) + l2^2*m2*cos(2*theta2) + l2^2*m3*cos(2*theta2) + l2^2*m4*cos(2*theta2) + l4^2*m4*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l2*l4*m4*cos(2*theta2 + theta3 + theta4) + 2*l2*l4*m4*cos(theta3 + theta4) + 2*l2*l3*m3*cos(theta3) + 2*l2*l3*m4*cos(theta3) + 2*l3*l4*m4*cos(theta4) + 2*l3*l4*m4*cos(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*cos(2*theta2 + theta3) + 2*l2*l3*m4*cos(2*theta2 + theta3))^2;
A_l18=(2*l4*m4*t1p*(l3*t4p*cos(theta4) + 2*l3*t2p*cos(2*theta2 + 2*theta3 + theta4) + 2*l3*t3p*cos(2*theta2 + 2*theta3 + theta4) + l3*t4p*cos(2*theta2 + 2*theta3 + theta4) + 2*l4*t2p*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l4*t3p*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l4*t4p*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l2*t2p*cos(2*theta2 + theta3 + theta4) + l2*t3p*cos(2*theta2 + theta3 + theta4) + l2*t4p*cos(2*theta2 + theta3 + theta4) + l2*t3p*cos(theta3 + theta4) + l2*t4p*cos(theta3 + theta4)))/(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 + l4^2*m4 + l3^2*m3*cos(2*theta2 + 2*theta3) + l3^2*m4*cos(2*theta2 + 2*theta3) + l2^2*m2*cos(2*theta2) + l2^2*m3*cos(2*theta2) + l2^2*m4*cos(2*theta2) + l4^2*m4*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l2*l4*m4*cos(2*theta2 + theta3 + theta4) + 2*l2*l4*m4*cos(theta3 + theta4) + 2*l2*l3*m3*cos(theta3) + 2*l2*l3*m4*cos(theta3) + 2*l3*l4*m4*cos(theta4) + 2*l3*l4*m4*cos(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*cos(2*theta2 + theta3) + 2*l2*l3*m4*cos(2*theta2 + theta3)) + (4*l4*m4*t1p*(l4*sin(2*theta2 + 2*theta3 + 2*theta4) + l2*sin(2*theta2 + theta3 + theta4) + l2*sin(theta3 + theta4) + l3*sin(theta4) + l3*sin(2*theta2 + 2*theta3 + theta4))*(l2^2*m2*t2p*sin(2*theta2) - b1 + l2^2*m3*t2p*sin(2*theta2) + l2^2*m4*t2p*sin(2*theta2) + l4^2*m4*t2p*sin(2*theta2 + 2*theta3 + 2*theta4) + l4^2*m4*t3p*sin(2*theta2 + 2*theta3 + 2*theta4) + l4^2*m4*t4p*sin(2*theta2 + 2*theta3 + 2*theta4) + l3^2*m3*t2p*sin(2*theta2 + 2*theta3) + l3^2*m3*t3p*sin(2*theta2 + 2*theta3) + l3^2*m4*t2p*sin(2*theta2 + 2*theta3) + l3^2*m4*t3p*sin(2*theta2 + 2*theta3) + l2*l3*m3*t3p*sin(theta3) + l2*l3*m4*t3p*sin(theta3) + l3*l4*m4*t4p*sin(theta4) + 2*l3*l4*m4*t2p*sin(2*theta2 + 2*theta3 + theta4) + 2*l3*l4*m4*t3p*sin(2*theta2 + 2*theta3 + theta4) + l3*l4*m4*t4p*sin(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*t2p*sin(2*theta2 + theta3) + l2*l3*m3*t3p*sin(2*theta2 + theta3) + 2*l2*l3*m4*t2p*sin(2*theta2 + theta3) + l2*l3*m4*t3p*sin(2*theta2 + theta3) + 2*l2*l4*m4*t2p*sin(2*theta2 + theta3 + theta4) + l2*l4*m4*t3p*sin(2*theta2 + theta3 + theta4) + l2*l4*m4*t4p*sin(2*theta2 + theta3 + theta4) + l2*l4*m4*t3p*sin(theta3 + theta4) + l2*l4*m4*t4p*sin(theta3 + theta4)))/(l2^2*m2 + l2^2*m3 + l2^2*m4 + l3^2*m3 + l3^2*m4 + l4^2*m4 + l3^2*m3*cos(2*theta2 + 2*theta3) + l3^2*m4*cos(2*theta2 + 2*theta3) + l2^2*m2*cos(2*theta2) + l2^2*m3*cos(2*theta2) + l2^2*m4*cos(2*theta2) + l4^2*m4*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l2*l4*m4*cos(2*theta2 + theta3 + theta4) + 2*l2*l4*m4*cos(theta3 + theta4) + 2*l2*l3*m3*cos(theta3) + 2*l2*l3*m4*cos(theta3) + 2*l3*l4*m4*cos(theta4) + 2*l3*l4*m4*cos(2*theta2 + 2*theta3 + theta4) + 2*l2*l3*m3*cos(2*theta2 + theta3) + 2*l2*l3*m4*cos(2*theta2 + theta3))^2;


A_l21=(t1p*(2*l2*m3^2*sin(2*theta2 + 2*theta3) + 2*l3*m3^2*sin(2*theta2 + 3*theta3) + 4*l3*m3^2*sin(theta3) - 2*l3*m3^2*sin(2*theta2 + theta3) - 2*l2*m3^2*sin(2*theta2) + 2*l2*m3^2*sin(2*theta3) + l2*m2*m4*sin(2*theta2 - 2*theta4) + l2*m2*m4*sin(2*theta2 + 2*theta4) + 2*l2*m3*m4*sin(2*theta2 + 2*theta3) + 2*l3*m3*m4*sin(2*theta2 + 3*theta3) - l4*m3*m4*sin(2*theta2 + theta3 + theta4) + 2*l4*m3*m4*sin(theta3 + theta4) + 4*l3*m3*m4*sin(theta3) - l4*m3*m4*sin(2*theta2 + theta3 + 3*theta4) + l4*m3*m4*sin(2*theta2 + 3*theta3 + theta4) - 2*l3*m3*m4*sin(2*theta2 + theta3) + 2*l4*m3*m4*sin(theta3 - theta4) - 4*l2*m2*m3*sin(2*theta2) - 2*l2*m2*m4*sin(2*theta2) - 2*l2*m3*m4*sin(2*theta2) + 2*l2*m3*m4*sin(2*theta3) + l4*m3*m4*sin(2*theta2 + 3*theta3 + 3*theta4)))/(2*l2*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3)));
A_l22=(2*b2*l3*m4*cos(2*theta4) - 2*b2*l3*m4 - 4*b2*l3*m3 + 4*l2^2*l3*m3^2*t2p*sin(2*theta3) + 2*l3^2*l4*m4^2*t3p*sin(3*theta4) - 2*l3^2*l4*m4^2*t4p*sin(3*theta4) + l2^2*l4*m4^2*t3p*sin(2*theta3 + 3*theta4) - l2^2*l4*m4^2*t4p*sin(2*theta3 + 3*theta4) + 8*l2*l3^2*m3^2*t2p*sin(theta3) + 8*l2*l3^2*m3^2*t3p*sin(theta3) - 2*l2^2*l4*m4^2*t3p*sin(theta4) + 2*l2^2*l4*m4^2*t4p*sin(theta4) - 6*l3^2*l4*m4^2*t3p*sin(theta4) + 6*l3^2*l4*m4^2*t4p*sin(theta4) - l2^2*l4*m4^2*t3p*sin(2*theta3 + theta4) + l2^2*l4*m4^2*t4p*sin(2*theta3 + theta4) + 4*l2^2*l3*m3*m4*t2p*sin(2*theta3) - 6*l2*l3*l4*m4^2*t3p*sin(theta3 + theta4) + 6*l2*l3*l4*m4^2*t4p*sin(theta3 + theta4) + 8*l2*l3^2*m3*m4*t2p*sin(theta3) + 8*l2*l3^2*m3*m4*t3p*sin(theta3) - 2*l2^2*l4*m3*m4*t3p*sin(theta4) + 2*l2^2*l4*m3*m4*t4p*sin(theta4) - 8*l3^2*l4*m3*m4*t3p*sin(theta4) + 8*l3^2*l4*m3*m4*t4p*sin(theta4) + 3*l2*l3*l4*m4^2*t3p*sin(theta3 - theta4) - 3*l2*l3*l4*m4^2*t4p*sin(theta3 - theta4) + 3*l2*l3*l4*m4^2*t3p*sin(theta3 + 3*theta4) - 3*l2*l3*l4*m4^2*t4p*sin(theta3 + 3*theta4) - 2*l2^2*l4*m3*m4*t3p*sin(2*theta3 + theta4) + 2*l2^2*l4*m3*m4*t4p*sin(2*theta3 + theta4) + 4*l2*l3*l4*m3*m4*t2p*sin(theta3 - theta4) + 8*l2*l3*l4*m3*m4*t3p*sin(theta3 - theta4) + 4*l2*l3*l4*m3*m4*t2p*sin(theta3 + theta4) - 4*l2*l3*l4*m3*m4*t3p*sin(theta3 + theta4) + 12*l2*l3*l4*m3*m4*t4p*sin(theta3 + theta4))/(2*l2^2*l3*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3)));
A_l23=(4*b3*l3*m3 + 2*b3*l3*m4 + 4*b3*l2*m3*cos(theta3) + 2*b3*l2*m4*cos(theta3) - 2*b3*l2*m4*cos(theta3 + 2*theta4) - 2*b3*l3*m4*cos(2*theta4) + 2*l3^2*l4*m4^2*t2p*sin(3*theta4) + 4*l3^2*l4*m4^2*t3p*sin(3*theta4) - l3^2*l4*m4^2*t4p*sin(3*theta4) + l2^2*l4*m4^2*t2p*sin(2*theta3 + 3*theta4) + 8*l2*l3^2*m3^2*t2p*sin(theta3) + 8*l2*l3^2*m3^2*t3p*sin(theta3) - 2*l2^2*l4*m4^2*t2p*sin(theta4) - 6*l3^2*l4*m4^2*t2p*sin(theta4) - 12*l3^2*l4*m4^2*t3p*sin(theta4) + 3*l3^2*l4*m4^2*t4p*sin(theta4) - l2^2*l4*m4^2*t2p*sin(2*theta3 + theta4) - 6*l2*l3*l4*m4^2*t2p*sin(theta3 + theta4) - 8*l2*l3*l4*m4^2*t3p*sin(theta3 + theta4) + 2*l2*l3*l4*m4^2*t4p*sin(theta3 + theta4) + 8*l2*l3^2*m3*m4*t2p*sin(theta3) + 8*l2*l3^2*m3*m4*t3p*sin(theta3) - 2*l2^2*l4*m3*m4*t2p*sin(theta4) - 8*l3^2*l4*m3*m4*t2p*sin(theta4) - 16*l3^2*l4*m3*m4*t3p*sin(theta4) + 4*l3^2*l4*m3*m4*t4p*sin(theta4) + 3*l2*l3*l4*m4^2*t2p*sin(theta3 - theta4) + 4*l2*l3*l4*m4^2*t3p*sin(theta3 - theta4) + 3*l2*l3*l4*m4^2*t2p*sin(theta3 + 3*theta4) - l2*l3*l4*m4^2*t4p*sin(theta3 - theta4) + 4*l2*l3*l4*m4^2*t3p*sin(theta3 + 3*theta4) - l2*l3*l4*m4^2*t4p*sin(theta3 + 3*theta4) - 2*l2^2*l4*m3*m4*t2p*sin(2*theta3 + theta4) + 8*l2*l3*l4*m3*m4*t2p*sin(theta3 - theta4) + 12*l2*l3*l4*m3*m4*t3p*sin(theta3 - theta4) + 2*l2*l3*l4*m3*m4*t4p*sin(theta3 - theta4) - 4*l2*l3*l4*m3*m4*t2p*sin(theta3 + theta4) - 4*l2*l3*l4*m3*m4*t3p*sin(theta3 + theta4) + 6*l2*l3*l4*m3*m4*t4p*sin(theta3 + theta4))/(2*l2^2*l3*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3)));
A_l24=(2*b4*l2*l4*m4*cos(theta3 + 2*theta4) - 2*b4*l2*l3*m4*cos(theta3 - theta4) - 2*b4*l2*l3*m3*cos(theta3 - theta4) + 2*l2^2*l4^2*m4^2*t2p*sin(theta4) + 6*l3^2*l4^2*m4^2*t2p*sin(theta4) + 3*l3^2*l4^2*m4^2*t3p*sin(theta4) + 6*l3^2*l4^2*m4^2*t4p*sin(theta4) + l2^2*l4^2*m4^2*t2p*sin(2*theta3 + theta4) - 2*l3^2*l4^2*m4^2*t2p*sin(3*theta4) - l3^2*l4^2*m4^2*t3p*sin(3*theta4) - 2*l3^2*l4^2*m4^2*t4p*sin(3*theta4) - l2^2*l4^2*m4^2*t2p*sin(2*theta3 + 3*theta4) + 2*b4*l2*l3*m3*cos(theta3 + theta4) + 2*b4*l2*l3*m4*cos(theta3 + theta4) - 4*b4*l2*l4*m3*cos(theta3) - 2*b4*l2*l4*m4*cos(theta3) + 2*l2^2*l4^2*m3*m4*t2p*sin(theta4) + 8*l3^2*l4^2*m3*m4*t2p*sin(theta4) + 4*l3^2*l4^2*m3*m4*t3p*sin(theta4) + 8*l3^2*l4^2*m3*m4*t4p*sin(theta4) - 3*l2*l3*l4^2*m4^2*t2p*sin(theta3 - theta4) - l2*l3*l4^2*m4^2*t3p*sin(theta3 - theta4) - 3*l2*l3*l4^2*m4^2*t2p*sin(theta3 + 3*theta4) - 2*l2*l3*l4^2*m4^2*t4p*sin(theta3 - theta4) - l2*l3*l4^2*m4^2*t3p*sin(theta3 + 3*theta4) - 2*l2*l3*l4^2*m4^2*t4p*sin(theta3 + 3*theta4) + 2*l2^2*l4^2*m3*m4*t2p*sin(2*theta3 + theta4) + 6*l2*l3*l4^2*m4^2*t2p*sin(theta3 + theta4) + 2*l2*l3*l4^2*m4^2*t3p*sin(theta3 + theta4) + 4*l2*l3*l4^2*m4^2*t4p*sin(theta3 + theta4) + 12*l2*l3*l4^2*m3*m4*t2p*sin(theta3 + theta4) + 6*l2*l3*l4^2*m3*m4*t3p*sin(theta3 + theta4) + 8*l2*l3*l4^2*m3*m4*t4p*sin(theta3 + theta4) + 2*l2*l3*l4^2*m3*m4*t3p*sin(theta3 - theta4))/(2*l2^2*l3*l4*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3)));
A_l25=0;
A_l26=(2*g*m3^2*sin(theta2) - 2*g*m3^2*sin(theta2 + 2*theta3) - 2*l3*m3^2*t1p^2*cos(2*theta2 + theta3) + 4*g*m2*m3*sin(theta2) + 2*g*m2*m4*sin(theta2) + 2*g*m3*m4*sin(theta2) - 2*l2*m3^2*t1p^2*cos(2*theta2) - g*m2*m4*sin(theta2 - 2*theta4) - g*m2*m4*sin(theta2 + 2*theta4) - 2*g*m3*m4*sin(theta2 + 2*theta3) + 2*l2*m3^2*t1p^2*cos(2*theta2 + 2*theta3) + 2*l3*m3^2*t1p^2*cos(2*theta2 + 3*theta3) - l4*m3*m4*t1p^2*cos(2*theta2 + theta3 + 3*theta4) + l4*m3*m4*t1p^2*cos(2*theta2 + 3*theta3 + theta4) - 2*l3*m3*m4*t1p^2*cos(2*theta2 + theta3) - 4*l2*m2*m3*t1p^2*cos(2*theta2) - 2*l2*m2*m4*t1p^2*cos(2*theta2) - 2*l2*m3*m4*t1p^2*cos(2*theta2) + l4*m3*m4*t1p^2*cos(2*theta2 + 3*theta3 + 3*theta4) + l2*m2*m4*t1p^2*cos(2*theta2 - 2*theta4) + l2*m2*m4*t1p^2*cos(2*theta2 + 2*theta4) + 2*l2*m3*m4*t1p^2*cos(2*theta2 + 2*theta3) + 2*l3*m3*m4*t1p^2*cos(2*theta2 + 3*theta3) - l4*m3*m4*t1p^2*cos(2*theta2 + theta3 + theta4))/(2*l2*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3)));
A_l27=-(8*l2^2*l3*l4*m3^4*t1p^2 + 16*l2^2*l3*l4*m3^4*t2p^2 - 6*l2*l3^2*l4*m3^4*t1p^2*cos(2*theta2 - theta3) - 4*l2^2*l3*l4*m3^4*t1p^2*cos(2*theta2 - 2*theta3) - 4*l2^2*l3*l4*m3^4*t1p^2*cos(2*theta2 + 2*theta3) - 10*l2*l3^2*l4*m3^4*t1p^2*cos(2*theta2 + 3*theta3) + 2*l2*l3^2*l4*m3^4*t1p^2*cos(2*theta2 + 5*theta3) + 24*l3^2*l4^2*m3*m4^3*t3p^2*cos(2*theta3 + theta4) + 32*l3^2*l4^2*m3^3*m4*t3p^2*cos(2*theta3 + theta4) - 12*l3^2*l4^2*m3*m4^3*t4p^2*cos(2*theta3 + theta4) - 16*l3^2*l4^2*m3^3*m4*t4p^2*cos(2*theta3 + theta4) + 16*l2^2*l3*l4*m3^3*m4*t1p^2 + 32*l2^2*l3*l4*m3^3*m4*t2p^2 - 32*b2*l3*l4*m3^3*t2p*sin(2*theta3) + 8*b3*l2*l4*m3^3*t3p*sin(3*theta3) + 32*b3*l3*l4*m3^3*t3p*sin(2*theta3) - 8*b4*l2*l4*m3^3*t4p*sin(3*theta3) - 4*b4*l2*l3*m3^3*t4p*sin(3*theta3 - theta4) - 24*l3^2*l4^2*m3*m4^3*t3p^2*cos(2*theta3 - theta4) - 32*l3^2*l4^2*m3^3*m4*t3p^2*cos(2*theta3 - theta4) + 12*l3^2*l4^2*m3*m4^3*t4p^2*cos(2*theta3 - theta4) + 16*l3^2*l4^2*m3^3*m4*t4p^2*cos(2*theta3 - theta4) + 8*l3^2*l4^2*m3*m4^3*t3p^2*cos(2*theta3 - 3*theta4) - 8*l3^2*l4^2*m3*m4^3*t3p^2*cos(2*theta3 + 3*theta4) - 4*l3^2*l4^2*m3*m4^3*t4p^2*cos(2*theta3 - 3*theta4) + 4*l3^2*l4^2*m3*m4^3*t4p^2*cos(2*theta3 + 3*theta4) + 56*l3^2*l4^2*m3^2*m4^2*t3p^2*cos(2*theta3 + theta4) - 28*l3^2*l4^2*m3^2*m4^2*t4p^2*cos(2*theta3 + theta4) + 8*l2^2*l3*l4*m3^2*m4^2*t1p^2 + 16*l2^2*l3*l4*m3^2*m4^2*t2p^2 + 4*l2*l3^2*l4*m3^4*t1p^2*cos(theta3) + 8*l2*l3^2*l4*m3^4*t2p^2*cos(theta3) + 8*l2*l3^2*l4*m3^4*t3p^2*cos(theta3) - 4*b4*l2*l3*m3^3*t4p*sin(theta3 + theta4) + 14*l2*l3^2*l4*m3^4*t1p^2*cos(2*theta2 + theta3) - 16*g*l2*l3*l4*m3^4*sin(theta2) + 40*b3*l2*l4*m3^3*t3p*sin(theta3) - 40*b4*l2*l4*m3^3*t4p*sin(theta3) - 56*l3^2*l4^2*m3^2*m4^2*t3p^2*cos(2*theta3 - theta4) + 28*l3^2*l4^2*m3^2*m4^2*t4p^2*cos(2*theta3 - theta4) + 8*l3^2*l4^2*m3^2*m4^2*t3p^2*cos(2*theta3 - 3*theta4) - 8*l3^2*l4^2*m3^2*m4^2*t3p^2*cos(2*theta3 + 3*theta4) - 4*l3^2*l4^2*m3^2*m4^2*t4p^2*cos(2*theta3 - 3*theta4) + 4*l3^2*l4^2*m3^2*m4^2*t4p^2*cos(2*theta3 + 3*theta4) + 8*l2^2*l3*l4*m3^4*t1p^2*cos(2*theta2) - 8*l2^2*l3*l4*m3^4*t1p^2*cos(2*theta3) - 4*l2*l3^2*l4*m3^4*t1p^2*cos(3*theta3) - 16*l2^2*l3*l4*m3^4*t2p^2*cos(2*theta3) - 8*l2*l3^2*l4*m3^4*t2p^2*cos(3*theta3) - 8*l2*l3^2*l4*m3^4*t3p^2*cos(3*theta3) + 8*g*l2*l3*l4*m3^4*sin(theta2 - 2*theta3) + 8*g*l2*l3*l4*m3^4*sin(theta2 + 2*theta3) + 4*b4*l2*l3*m3^3*t4p*sin(theta3 - theta4) + 4*b4*l2*l3*m3^3*t4p*sin(3*theta3 + theta4) + 16*b4*l2*l3*m2*m3^2*t4p*sin(theta3 + theta4) + 12*b4*l2*l3*m2*m4^2*t4p*sin(theta3 + theta4) - 4*b4*l2*l3*m3*m4^2*t4p*sin(theta3 + theta4) - 8*b4*l2*l3*m3^2*m4*t4p*sin(theta3 + theta4) + 8*l2*l3^2*l4*m2*m3^3*t1p^2*cos(2*theta2 + theta3) + 28*l2*l3^2*l4*m3^3*m4*t1p^2*cos(2*theta2 + theta3) + 2*l2*l3*l4^2*m3^3*m4*t1p^2*cos(theta3 - theta4) - 16*l2*l3*l4^2*m2*m4^3*t3p^2*cos(theta3 - theta4) + 4*l2*l3*l4^2*m3^3*m4*t2p^2*cos(theta3 - theta4) + 8*l2*l3*l4^2*m2*m4^3*t4p^2*cos(theta3 - theta4) - 32*l2*l3*l4^2*m3*m4^3*t3p^2*cos(theta3 - theta4) - 2*l2*l3*l4^2*m3^3*m4*t1p^2*cos(3*theta3 + theta4) - 36*l2*l3*l4^2*m3^3*m4*t3p^2*cos(theta3 - theta4) + 4*l2*l3*l4^2*m2*m4^3*t3p^2*cos(theta3 - 3*theta4) - 16*l2*l3*l4^2*m2*m4^3*t3p^2*cos(theta3 + 3*theta4) + 16*l2*l3*l4^2*m3*m4^3*t4p^2*cos(theta3 - theta4) - 4*l2*l3*l4^2*m3^3*m4*t2p^2*cos(3*theta3 + theta4) + 24*l2*l3*l4^2*m3^3*m4*t4p^2*cos(theta3 - theta4) - 2*l2*l3*l4^2*m2*m4^3*t4p^2*cos(theta3 - 3*theta4) + 8*l2*l3*l4^2*m2*m4^3*t4p^2*cos(theta3 + 3*theta4) + 12*l2*l3*l4^2*m3*m4^3*t3p^2*cos(theta3 - 3*theta4) - 8*l2*l3*l4^2*m3*m4^3*t3p^2*cos(theta3 + 3*theta4) + 8*l2*l3*l4^2*m3*m4^3*t3p^2*cos(3*theta3 + theta4) + 4*l2*l3*l4^2*m3^3*m4*t3p^2*cos(3*theta3 + theta4) + 4*l2*l3*l4^2*m2*m4^3*t3p^2*cos(theta3 + 5*theta4) - 6*l2*l3*l4^2*m3*m4^3*t4p^2*cos(theta3 - 3*theta4) + 4*l2*l3*l4^2*m3*m4^3*t4p^2*cos(theta3 + 3*theta4) - 4*l2*l3*l4^2*m3*m4^3*t4p^2*cos(3*theta3 + theta4) - 8*l2*l3*l4^2*m3^3*m4*t4p^2*cos(3*theta3 + theta4) - 2*l2*l3*l4^2*m2*m4^3*t4p^2*cos(theta3 + 5*theta4) + 2*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(theta3 + theta4) + 4*l2*l3*l4^2*m3^2*m4^2*t2p^2*cos(theta3 + theta4) + 72*l2*l3*l4^2*m3^2*m4^2*t3p^2*cos(theta3 + theta4) - 30*l2*l3*l4^2*m3^2*m4^2*t4p^2*cos(theta3 + theta4) + 12*l2^2*l4^2*m2*m4^3*t2p*t3p*cos(2*theta3 + theta4) - 12*l2^2*l4^2*m2*m4^3*t2p*t4p*cos(2*theta3 + theta4) + 16*l2^2*l4^2*m3*m4^3*t2p*t3p*cos(2*theta3 + theta4) + 24*l2^2*l4^2*m3^3*m4*t2p*t3p*cos(2*theta3 + theta4) - 16*l2^2*l4^2*m3*m4^3*t2p*t4p*cos(2*theta3 + theta4) - 24*l2^2*l4^2*m3^3*m4*t2p*t4p*cos(2*theta3 + theta4) + 24*l3^2*l4^2*m3*m4^3*t2p*t3p*cos(2*theta3 + theta4) + 32*l3^2*l4^2*m3^3*m4*t2p*t3p*cos(2*theta3 + theta4) - 24*l3^2*l4^2*m3*m4^3*t2p*t4p*cos(2*theta3 + theta4) - 32*l3^2*l4^2*m3^3*m4*t2p*t4p*cos(2*theta3 + theta4) - 12*l3^2*l4^2*m3*m4^3*t3p*t4p*cos(2*theta3 + theta4) - 16*l3^2*l4^2*m3^3*m4*t3p*t4p*cos(2*theta3 + theta4) - 32*g*l2*l3*l4*m3^3*m4*sin(theta2) + 32*b3*l2*l4*m2*m3^2*t3p*sin(theta3) + 12*b3*l2*l4*m2*m4^2*t3p*sin(theta3) + 20*b3*l2*l4*m3*m4^2*t3p*sin(theta3) + 60*b3*l2*l4*m3^2*m4*t3p*sin(theta3) - 32*b4*l2*l4*m2*m3^2*t4p*sin(theta3) - 12*b4*l2*l4*m2*m4^2*t4p*sin(theta3) - 20*b4*l2*l4*m3*m4^2*t4p*sin(theta3) - 60*b4*l2*l4*m3^2*m4*t4p*sin(theta3) - 16*l2^2*l3*l4*m2*m3^3*t1p^2*cos(2*theta3) - 32*l2^2*l3*l4*m2*m3^3*t2p^2*cos(2*theta3) + 16*l2^2*l3*l4*m3^3*m4*t1p^2*cos(2*theta2) - 16*l2^2*l3*l4*m3^3*m4*t1p^2*cos(2*theta3) - 8*l2*l3^2*l4*m3^3*m4*t1p^2*cos(3*theta3) - 32*l2^2*l3*l4*m3^3*m4*t2p^2*cos(2*theta3) - 16*l2*l3^2*l4*m3^3*m4*t2p^2*cos(3*theta3) - 16*l2*l3^2*l4*m3^3*m4*t3p^2*cos(3*theta3) + 4*l2*l3^2*l4*m3^2*m4^2*t1p^2*cos(theta3) + 8*l2*l3^2*l4*m3^2*m4^2*t2p^2*cos(theta3) + 8*l2*l3^2*l4*m3^2*m4^2*t3p^2*cos(theta3) - 3*l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 - theta3 + 3*theta4) - 5*l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 + 3*theta3 + 3*theta4) + l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 + 5*theta3 + 3*theta4) - 3*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 - theta3 + theta4) + 7*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 + theta3 + 3*theta4) - 5*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 + 3*theta3 + theta4) + l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 + 5*theta3 + theta4) + 8*l2^2*l4^2*m3*m4^3*t2p*t3p*cos(3*theta4) - 8*l2^2*l4^2*m3*m4^3*t2p*t4p*cos(3*theta4) - 24*l2^2*l4^2*m3^2*m4^2*t2p*t3p*cos(theta4) + 24*l2^2*l4^2*m3^2*m4^2*t2p*t4p*cos(theta4) + 16*g*l2*l3*l4*m2*m3^3*sin(theta2 - 2*theta3) + 16*g*l2*l3*l4*m2*m3^3*sin(theta2 + 2*theta3) + 16*g*l2*l3*l4*m3^3*m4*sin(theta2 - 2*theta3) + 16*g*l2*l3*l4*m3^3*m4*sin(theta2 + 2*theta3) - 16*b4*l2*l3*m2*m3^2*t4p*sin(theta3 - theta4) - 4*b3*l2*l4*m2*m4^2*t3p*sin(theta3 - 2*theta4) - 12*b3*l2*l4*m2*m4^2*t3p*sin(theta3 + 2*theta4) - 12*b4*l2*l3*m2*m4^2*t4p*sin(theta3 - theta4) - 12*b3*l2*l4*m3*m4^2*t3p*sin(theta3 - 2*theta4) - 8*b3*l2*l4*m3*m4^2*t3p*sin(theta3 + 2*theta4) - 12*b3*l2*l4*m3^2*m4*t3p*sin(theta3 - 2*theta4) - 8*b3*l2*l4*m3^2*m4*t3p*sin(theta3 + 2*theta4) + 4*b4*l2*l3*m3*m4^2*t4p*sin(theta3 - theta4) + 8*b4*l2*l3*m3^2*m4*t4p*sin(theta3 - theta4) + 4*b3*l2*l4*m2*m4^2*t3p*sin(theta3 + 4*theta4) + 4*b4*l2*l3*m2*m4^2*t4p*sin(theta3 - 3*theta4) - 4*b4*l2*l3*m2*m4^2*t4p*sin(theta3 + 3*theta4) + 4*b4*l2*l4*m2*m4^2*t4p*sin(theta3 - 2*theta4) + 12*b4*l2*l4*m2*m4^2*t4p*sin(theta3 + 2*theta4) + 4*b4*l2*l3*m3*m4^2*t4p*sin(3*theta3 + theta4) + 8*b4*l2*l3*m3^2*m4*t4p*sin(3*theta3 + theta4) + 12*b4*l2*l4*m3*m4^2*t4p*sin(theta3 - 2*theta4) + 8*b4*l2*l4*m3*m4^2*t4p*sin(theta3 + 2*theta4) + 12*b4*l2*l4*m3^2*m4*t4p*sin(theta3 - 2*theta4) + 8*b4*l2*l4*m3^2*m4*t4p*sin(theta3 + 2*theta4) - 4*b4*l2*l4*m2*m4^2*t4p*sin(theta3 + 4*theta4) - 8*l2^2*l3*l4*m2*m3^3*t1p^2*cos(2*theta2 - 2*theta3) - 8*l2^2*l3*l4*m2*m3^3*t1p^2*cos(2*theta2 + 2*theta3) - 24*l2*l3^2*l4*m2*m3^3*t1p^2*cos(2*theta2 + 3*theta3) - 12*l2*l3^2*l4*m3^3*m4*t1p^2*cos(2*theta2 - theta3) - 8*l2^2*l3*l4*m3^3*m4*t1p^2*cos(2*theta2 - 2*theta3) - 8*l2^2*l3*l4*m3^3*m4*t1p^2*cos(2*theta2 + 2*theta3) - 20*l2*l3^2*l4*m3^3*m4*t1p^2*cos(2*theta2 + 3*theta3) - 2*l2*l3*l4^2*m3^3*m4*t1p^2*cos(3*theta3 - theta4) - 4*l2*l3*l4^2*m3^3*m4*t2p^2*cos(3*theta3 - theta4) + 4*l2*l3^2*l4*m3^3*m4*t1p^2*cos(2*theta2 + 5*theta3) - 4*l2*l3*l4^2*m3*m4^3*t3p^2*cos(3*theta3 - theta4) - 12*l2*l3*l4^2*m3^3*m4*t3p^2*cos(3*theta3 - theta4) + 2*l2*l3*l4^2*m3*m4^3*t4p^2*cos(3*theta3 - theta4) - 4*l2*l3*l4^2*m3*m4^3*t3p^2*cos(3*theta3 + 3*theta4) + 2*l2*l3*l4^2*m3*m4^3*t4p^2*cos(3*theta3 + 3*theta4) + 14*l2*l3^2*l4*m3^2*m4^2*t1p^2*cos(2*theta2 + theta3) + 2*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(theta3 - theta4) + 4*l2*l3*l4^2*m3^2*m4^2*t2p^2*cos(theta3 - theta4) - 2*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(3*theta3 + theta4) - 68*l2*l3*l4^2*m3^2*m4^2*t3p^2*cos(theta3 - theta4) - 4*l2*l3*l4^2*m3^2*m4^2*t2p^2*cos(3*theta3 + theta4) + 40*l2*l3*l4^2*m3^2*m4^2*t4p^2*cos(theta3 - theta4) + 12*l2*l3*l4^2*m3^2*m4^2*t3p^2*cos(theta3 - 3*theta4) - 8*l2*l3*l4^2*m3^2*m4^2*t3p^2*cos(theta3 + 3*theta4) + 12*l2*l3*l4^2*m3^2*m4^2*t3p^2*cos(3*theta3 + theta4) - 6*l2*l3*l4^2*m3^2*m4^2*t4p^2*cos(theta3 - 3*theta4) + 4*l2*l3*l4^2*m3^2*m4^2*t4p^2*cos(theta3 + 3*theta4) - 12*l2*l3*l4^2*m3^2*m4^2*t4p^2*cos(3*theta3 + theta4) - 4*l2^2*l4^2*m2*m4^3*t2p*t3p*cos(2*theta3 - theta4) + 4*l2^2*l4^2*m2*m4^3*t2p*t4p*cos(2*theta3 - theta4) - 8*l2^2*l4^2*m3*m4^3*t2p*t3p*cos(2*theta3 - theta4) - 8*l2^2*l4^2*m3^3*m4*t2p*t3p*cos(2*theta3 - theta4) - 12*l2^2*l4^2*m2*m4^3*t2p*t3p*cos(2*theta3 + 3*theta4) + 8*l2^2*l4^2*m3*m4^3*t2p*t4p*cos(2*theta3 - theta4) + 8*l2^2*l4^2*m3^3*m4*t2p*t4p*cos(2*theta3 - theta4) - 24*l3^2*l4^2*m3*m4^3*t2p*t3p*cos(2*theta3 - theta4) - 32*l3^2*l4^2*m3^3*m4*t2p*t3p*cos(2*theta3 - theta4) + 12*l2^2*l4^2*m2*m4^3*t2p*t4p*cos(2*theta3 + 3*theta4) - 8*l2^2*l4^2*m3*m4^3*t2p*t3p*cos(2*theta3 + 3*theta4) + 24*l3^2*l4^2*m3*m4^3*t2p*t4p*cos(2*theta3 - theta4) + 32*l3^2*l4^2*m3^3*m4*t2p*t4p*cos(2*theta3 - theta4) + 4*l2^2*l4^2*m2*m4^3*t2p*t3p*cos(2*theta3 + 5*theta4) + 8*l2^2*l4^2*m3*m4^3*t2p*t4p*cos(2*theta3 + 3*theta4) + 8*l3^2*l4^2*m3*m4^3*t2p*t3p*cos(2*theta3 - 3*theta4) - 8*l3^2*l4^2*m3*m4^3*t2p*t3p*cos(2*theta3 + 3*theta4) + 12*l3^2*l4^2*m3*m4^3*t3p*t4p*cos(2*theta3 - theta4) + 16*l3^2*l4^2*m3^3*m4*t3p*t4p*cos(2*theta3 - theta4) - 4*l2^2*l4^2*m2*m4^3*t2p*t4p*cos(2*theta3 + 5*theta4) - 8*l3^2*l4^2*m3*m4^3*t2p*t4p*cos(2*theta3 - 3*theta4) + 8*l3^2*l4^2*m3*m4^3*t2p*t4p*cos(2*theta3 + 3*theta4) - 4*l3^2*l4^2*m3*m4^3*t3p*t4p*cos(2*theta3 - 3*theta4) + 4*l3^2*l4^2*m3*m4^3*t3p*t4p*cos(2*theta3 + 3*theta4) + 40*l2^2*l4^2*m3^2*m4^2*t2p*t3p*cos(2*theta3 + theta4) - 40*l2^2*l4^2*m3^2*m4^2*t2p*t4p*cos(2*theta3 + theta4) + 56*l3^2*l4^2*m3^2*m4^2*t2p*t3p*cos(2*theta3 + theta4) - 56*l3^2*l4^2*m3^2*m4^2*t2p*t4p*cos(2*theta3 + theta4) - 28*l3^2*l4^2*m3^2*m4^2*t3p*t4p*cos(2*theta3 + theta4) - 16*g*l2*l3*l4*m3^2*m4^2*sin(theta2) - 16*b2*l3*l4*m3*m4^2*t2p*sin(2*theta3) - 48*b2*l3*l4*m3^2*m4*t2p*sin(2*theta3) + 4*b3*l2*l4*m3*m4^2*t3p*sin(3*theta3) + 12*b3*l2*l4*m3^2*m4*t3p*sin(3*theta3) + 16*b3*l3*l4*m3*m4^2*t3p*sin(2*theta3) + 48*b3*l3*l4*m3^2*m4*t3p*sin(2*theta3) - 4*b4*l2*l4*m3*m4^2*t4p*sin(3*theta3) - 12*b4*l2*l4*m3^2*m4*t4p*sin(3*theta3) + 16*l2*l3^2*l4*m3^4*t2p*t3p*cos(theta3) + 7*l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 + theta3 + theta4) + 8*l2^2*l3*l4*m3^2*m4^2*t1p^2*cos(2*theta2) - 8*l2^2*l3*l4*m3^2*m4^2*t1p^2*cos(2*theta3) - 4*l2*l3^2*l4*m3^2*m4^2*t1p^2*cos(3*theta3) - 16*l2^2*l3*l4*m3^2*m4^2*t2p^2*cos(2*theta3) - 8*l2*l3^2*l4*m3^2*m4^2*t2p^2*cos(3*theta3) - 8*l2*l3^2*l4*m3^2*m4^2*t3p^2*cos(3*theta3) - 3*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 - theta3 + 3*theta4) - 5*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 + 3*theta3 + 3*theta4) + l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 + 5*theta3 + 3*theta4) + 8*l2^2*l4^2*m3^2*m4^2*t2p*t3p*cos(3*theta4) - 8*l2^2*l4^2*m3^2*m4^2*t2p*t4p*cos(3*theta4) + 2*l2*l3*l4^2*m3^3*m4*t1p^2*cos(theta3 + theta4) + 24*l2*l3*l4^2*m2*m4^3*t3p^2*cos(theta3 + theta4) + 4*l2*l3*l4^2*m3^3*m4*t2p^2*cos(theta3 + theta4) - 12*l2*l3*l4^2*m2*m4^3*t4p^2*cos(theta3 + theta4) + 28*l2*l3*l4^2*m3*m4^3*t3p^2*cos(theta3 + theta4) + 44*l2*l3*l4^2*m3^3*m4*t3p^2*cos(theta3 + theta4) - 14*l2*l3*l4^2*m3*m4^3*t4p^2*cos(theta3 + theta4) - 16*l2*l3*l4^2*m3^3*m4*t4p^2*cos(theta3 + theta4) + 8*g*l2*l3*l4*m3^2*m4^2*sin(theta2 - 2*theta3) + 8*g*l2*l3*l4*m3^2*m4^2*sin(theta2 + 2*theta3) + 8*b2*l3*l4*m3*m4^2*t2p*sin(2*theta3 - 2*theta4) + 8*b2*l3*l4*m3*m4^2*t2p*sin(2*theta3 + 2*theta4) + 8*b2*l3*l4*m3^2*m4*t2p*sin(2*theta3 - 2*theta4) + 8*b2*l3*l4*m3^2*m4*t2p*sin(2*theta3 + 2*theta4) - 4*b3*l2*l4*m3*m4^2*t3p*sin(3*theta3 + 2*theta4) - 4*b3*l2*l4*m3^2*m4*t3p*sin(3*theta3 + 2*theta4) - 8*b3*l3*l4*m3*m4^2*t3p*sin(2*theta3 - 2*theta4) - 8*b3*l3*l4*m3*m4^2*t3p*sin(2*theta3 + 2*theta4) - 8*b3*l3*l4*m3^2*m4*t3p*sin(2*theta3 - 2*theta4) - 8*b3*l3*l4*m3^2*m4*t3p*sin(2*theta3 + 2*theta4) - 4*b4*l2*l3*m3*m4^2*t4p*sin(3*theta3 - theta4) - 8*b4*l2*l3*m3^2*m4*t4p*sin(3*theta3 - theta4) + 4*b4*l2*l4*m3*m4^2*t4p*sin(3*theta3 + 2*theta4) + 4*b4*l2*l4*m3^2*m4*t4p*sin(3*theta3 + 2*theta4) - 6*l2*l3^2*l4*m3^2*m4^2*t1p^2*cos(2*theta2 - theta3) - 4*l2^2*l3*l4*m3^2*m4^2*t1p^2*cos(2*theta2 - 2*theta3) - 4*l2^2*l3*l4*m3^2*m4^2*t1p^2*cos(2*theta2 + 2*theta3) - 10*l2*l3^2*l4*m3^2*m4^2*t1p^2*cos(2*theta2 + 3*theta3) - 2*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(3*theta3 - theta4) - 4*l2*l3*l4^2*m3^2*m4^2*t2p^2*cos(3*theta3 - theta4) + 2*l2*l3^2*l4*m3^2*m4^2*t1p^2*cos(2*theta2 + 5*theta3) - 16*l2*l3*l4^2*m3^2*m4^2*t3p^2*cos(3*theta3 - theta4) + 2*l2*l3*l4^2*m3^2*m4^2*t4p^2*cos(3*theta3 - theta4) - 4*l2*l3*l4^2*m3^2*m4^2*t3p^2*cos(3*theta3 + 3*theta4) + 2*l2*l3*l4^2*m3^2*m4^2*t4p^2*cos(3*theta3 + 3*theta4) - 16*l2^2*l4^2*m3^2*m4^2*t2p*t3p*cos(2*theta3 - theta4) + 16*l2^2*l4^2*m3^2*m4^2*t2p*t4p*cos(2*theta3 - theta4) - 56*l3^2*l4^2*m3^2*m4^2*t2p*t3p*cos(2*theta3 - theta4) - 8*l2^2*l4^2*m3^2*m4^2*t2p*t3p*cos(2*theta3 + 3*theta4) + 56*l3^2*l4^2*m3^2*m4^2*t2p*t4p*cos(2*theta3 - theta4) + 8*l2^2*l4^2*m3^2*m4^2*t2p*t4p*cos(2*theta3 + 3*theta4) + 8*l3^2*l4^2*m3^2*m4^2*t2p*t3p*cos(2*theta3 - 3*theta4) - 8*l3^2*l4^2*m3^2*m4^2*t2p*t3p*cos(2*theta3 + 3*theta4) + 28*l3^2*l4^2*m3^2*m4^2*t3p*t4p*cos(2*theta3 - theta4) - 8*l3^2*l4^2*m3^2*m4^2*t2p*t4p*cos(2*theta3 - 3*theta4) + 8*l3^2*l4^2*m3^2*m4^2*t2p*t4p*cos(2*theta3 + 3*theta4) - 4*l3^2*l4^2*m3^2*m4^2*t3p*t4p*cos(2*theta3 - 3*theta4) + 4*l3^2*l4^2*m3^2*m4^2*t3p*t4p*cos(2*theta3 + 3*theta4) - 16*l2*l3^2*l4*m2*m3^3*t1p^2*cos(theta3) - 32*l2*l3^2*l4*m2*m3^3*t2p^2*cos(theta3) - 32*l2*l3^2*l4*m2*m3^3*t3p^2*cos(theta3) + 8*l2*l3^2*l4*m3^3*m4*t1p^2*cos(theta3) + 16*l2*l3^2*l4*m3^3*m4*t2p^2*cos(theta3) + 16*l2*l3^2*l4*m3^3*m4*t3p^2*cos(theta3) - 16*l2*l3^2*l4*m3^4*t2p*t3p*cos(3*theta3) - 3*l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 - theta3 + theta4) + 7*l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 + theta3 + 3*theta4) - 5*l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 + 3*theta3 + theta4) + l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 + 5*theta3 + theta4) + 7*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 + theta3 + theta4) - 8*l2^2*l4^2*m3*m4^3*t2p*t3p*cos(theta4) - 16*l2^2*l4^2*m3^3*m4*t2p*t3p*cos(theta4) + 8*l2^2*l4^2*m3*m4^3*t2p*t4p*cos(theta4) + 16*l2^2*l4^2*m3^3*m4*t2p*t4p*cos(theta4) + 28*b4*l2*l3*m2*m3*m4*t4p*sin(theta3 + theta4) - 2*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(theta3 + theta4) - 8*l2*l3*l4^2*m2*m3^2*m4*t1p^2*cos(theta3 + theta4) - 4*l2*l3*l4^2*m2*m3*m4^2*t2p^2*cos(theta3 + theta4) - 16*l2*l3*l4^2*m2*m3^2*m4*t2p^2*cos(theta3 + theta4) + 52*l2*l3*l4^2*m2*m3*m4^2*t3p^2*cos(theta3 + theta4) + 16*l2*l3*l4^2*m2*m3^2*m4*t3p^2*cos(theta3 + theta4) - 32*l2*l3*l4^2*m2*m3*m4^2*t4p^2*cos(theta3 + theta4) - 32*l2*l3*l4^2*m2*m3^2*m4*t4p^2*cos(theta3 + theta4) - 24*l2*l3*l4^2*m2*m4^3*t2p*t3p*cos(theta3 - theta4) + 24*l2*l3*l4^2*m2*m4^3*t2p*t4p*cos(theta3 - theta4) - 48*l2*l3*l4^2*m3*m4^3*t2p*t3p*cos(theta3 - theta4) - 56*l2*l3*l4^2*m3^3*m4*t2p*t3p*cos(theta3 - theta4) + 6*l2*l3*l4^2*m2*m4^3*t2p*t3p*cos(theta3 - 3*theta4) - 24*l2*l3*l4^2*m2*m4^3*t2p*t3p*cos(theta3 + 3*theta4) + 8*l2*l3*l4^2*m2*m4^3*t3p*t4p*cos(theta3 - theta4) + 48*l2*l3*l4^2*m3*m4^3*t2p*t4p*cos(theta3 - theta4) + 72*l2*l3*l4^2*m3^3*m4*t2p*t4p*cos(theta3 - theta4) - 6*l2*l3*l4^2*m2*m4^3*t2p*t4p*cos(theta3 - 3*theta4) + 24*l2*l3*l4^2*m2*m4^3*t2p*t4p*cos(theta3 + 3*theta4) + 18*l2*l3*l4^2*m3*m4^3*t2p*t3p*cos(theta3 - 3*theta4) - 12*l2*l3*l4^2*m3*m4^3*t2p*t3p*cos(theta3 + 3*theta4) + 12*l2*l3*l4^2*m3*m4^3*t2p*t3p*cos(3*theta3 + theta4) + 16*l2*l3*l4^2*m3*m4^3*t3p*t4p*cos(theta3 - theta4) + 8*l2*l3*l4^2*m3^3*m4*t2p*t3p*cos(3*theta3 + theta4) + 28*l2*l3*l4^2*m3^3*m4*t3p*t4p*cos(theta3 - theta4) + 6*l2*l3*l4^2*m2*m4^3*t2p*t3p*cos(theta3 + 5*theta4) - 2*l2*l3*l4^2*m2*m4^3*t3p*t4p*cos(theta3 - 3*theta4) + 8*l2*l3*l4^2*m2*m4^3*t3p*t4p*cos(theta3 + 3*theta4) - 18*l2*l3*l4^2*m3*m4^3*t2p*t4p*cos(theta3 - 3*theta4) + 12*l2*l3*l4^2*m3*m4^3*t2p*t4p*cos(theta3 + 3*theta4) - 12*l2*l3*l4^2*m3*m4^3*t2p*t4p*cos(3*theta3 + theta4) - 24*l2*l3*l4^2*m3^3*m4*t2p*t4p*cos(3*theta3 + theta4) - 6*l2*l3*l4^2*m2*m4^3*t2p*t4p*cos(theta3 + 5*theta4) - 6*l2*l3*l4^2*m3*m4^3*t3p*t4p*cos(theta3 - 3*theta4) + 4*l2*l3*l4^2*m3*m4^3*t3p*t4p*cos(theta3 + 3*theta4) - 4*l2*l3*l4^2*m3*m4^3*t3p*t4p*cos(3*theta3 + theta4) - 12*l2*l3*l4^2*m3^3*m4*t3p*t4p*cos(3*theta3 + theta4) - 2*l2*l3*l4^2*m2*m4^3*t3p*t4p*cos(theta3 + 5*theta4) + 106*l2*l3*l4^2*m3^2*m4^2*t2p*t3p*cos(theta3 + theta4) - 90*l2*l3*l4^2*m3^2*m4^2*t2p*t4p*cos(theta3 + theta4) - 26*l2*l3*l4^2*m3^2*m4^2*t3p*t4p*cos(theta3 + theta4) + 32*b3*l2*l4*m2*m3*m4*t3p*sin(theta3) - 32*b4*l2*l4*m2*m3*m4*t4p*sin(theta3) - 8*l2*l3^2*l4*m2*m3*m4^2*t1p^2*cos(theta3) - 24*l2*l3^2*l4*m2*m3^2*m4*t1p^2*cos(theta3) - 16*l2*l3^2*l4*m2*m3*m4^2*t2p^2*cos(theta3) - 48*l2*l3^2*l4*m2*m3^2*m4*t2p^2*cos(theta3) - 16*l2*l3^2*l4*m2*m3*m4^2*t3p^2*cos(theta3) - 48*l2*l3^2*l4*m2*m3^2*m4*t3p^2*cos(theta3) - 32*l2*l3^2*l4*m3^3*m4*t2p*t3p*cos(3*theta3) + 16*l2*l3^2*l4*m3^2*m4^2*t2p*t3p*cos(theta3) - l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + theta3 - theta4) - 2*l2*l3^2*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 + theta3 - 2*theta4) - 2*l2*l3^2*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 + theta3 + 2*theta4) - 2*l2*l3^2*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 + theta3 - 2*theta4) - 2*l2*l3^2*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 + theta3 + 2*theta4) + l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + theta3 + 3*theta4) - 3*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + 3*theta3 + theta4) + 4*l2*l3*l4^2*m2*m3^2*m4*t1p^2*cos(2*theta2 + theta3 + 3*theta4) - 12*l2*l3*l4^2*m2*m3^2*m4*t1p^2*cos(2*theta2 + 3*theta3 + theta4) - l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + theta3 + 5*theta4) - 8*b3*l2*l4*m2*m3*m4*t3p*sin(theta3 - 2*theta4) - 24*b3*l2*l4*m2*m3*m4*t3p*sin(theta3 + 2*theta4) - 28*b4*l2*l3*m2*m3*m4*t4p*sin(theta3 - theta4) + 4*b4*l2*l3*m2*m3*m4*t4p*sin(theta3 - 3*theta4) - 4*b4*l2*l3*m2*m3*m4*t4p*sin(theta3 + 3*theta4) + 8*b4*l2*l4*m2*m3*m4*t4p*sin(theta3 - 2*theta4) + 24*b4*l2*l4*m2*m3*m4*t4p*sin(theta3 + 2*theta4) + 4*l2*l3^2*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 + theta3) + 12*l2*l3^2*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 + theta3) - 2*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(theta3 - theta4) - 8*l2*l3*l4^2*m2*m3^2*m4*t1p^2*cos(theta3 - theta4) - 4*l2*l3*l4^2*m2*m3*m4^2*t2p^2*cos(theta3 - theta4) - 16*l2*l3*l4^2*m2*m3^2*m4*t2p^2*cos(theta3 - theta4) + 4*l2*l3^2*l4*m2*m3*m4^2*t1p^2*cos(theta3 - 2*theta4) + 4*l2*l3^2*l4*m2*m3*m4^2*t1p^2*cos(theta3 + 2*theta4) + 4*l2*l3^2*l4*m2*m3^2*m4*t1p^2*cos(theta3 - 2*theta4) + 4*l2*l3^2*l4*m2*m3^2*m4*t1p^2*cos(theta3 + 2*theta4) + 2*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(theta3 - 3*theta4) + 2*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(theta3 + 3*theta4) - 44*l2*l3*l4^2*m2*m3*m4^2*t3p^2*cos(theta3 - theta4) - 48*l2*l3*l4^2*m2*m3^2*m4*t3p^2*cos(theta3 - theta4) + 8*l2*l3^2*l4*m2*m3*m4^2*t2p^2*cos(theta3 - 2*theta4) + 8*l2*l3^2*l4*m2*m3*m4^2*t2p^2*cos(theta3 + 2*theta4) + 8*l2*l3^2*l4*m2*m3^2*m4*t2p^2*cos(theta3 - 2*theta4) + 8*l2*l3^2*l4*m2*m3^2*m4*t2p^2*cos(theta3 + 2*theta4) + 4*l2*l3*l4^2*m2*m3*m4^2*t2p^2*cos(theta3 - 3*theta4) + 4*l2*l3*l4^2*m2*m3*m4^2*t2p^2*cos(theta3 + 3*theta4) + 16*l2*l3*l4^2*m2*m3*m4^2*t4p^2*cos(theta3 - theta4) + 8*l2*l3^2*l4*m2*m3*m4^2*t3p^2*cos(theta3 - 2*theta4) + 8*l2*l3^2*l4*m2*m3*m4^2*t3p^2*cos(theta3 + 2*theta4) + 8*l2*l3^2*l4*m2*m3^2*m4*t3p^2*cos(theta3 - 2*theta4) + 8*l2*l3^2*l4*m2*m3^2*m4*t3p^2*cos(theta3 + 2*theta4) + 12*l2*l3*l4^2*m2*m3*m4^2*t3p^2*cos(theta3 - 3*theta4) - 20*l2*l3*l4^2*m2*m3*m4^2*t3p^2*cos(theta3 + 3*theta4) + 16*l2*l3*l4^2*m2*m3*m4^2*t4p^2*cos(theta3 + 3*theta4) - 6*l2*l3*l4^2*m3*m4^3*t2p*t3p*cos(3*theta3 - theta4) - 16*l2*l3*l4^2*m3^3*m4*t2p*t3p*cos(3*theta3 - theta4) + 6*l2*l3*l4^2*m3*m4^3*t2p*t4p*cos(3*theta3 - theta4) - 6*l2*l3*l4^2*m3*m4^3*t2p*t3p*cos(3*theta3 + 3*theta4) + 2*l2*l3*l4^2*m3*m4^3*t3p*t4p*cos(3*theta3 - theta4) - 4*l2*l3*l4^2*m3^3*m4*t3p*t4p*cos(3*theta3 - theta4) + 6*l2*l3*l4^2*m3*m4^3*t2p*t4p*cos(3*theta3 + 3*theta4) + 2*l2*l3*l4^2*m3*m4^3*t3p*t4p*cos(3*theta3 + 3*theta4) - 104*l2*l3*l4^2*m3^2*m4^2*t2p*t3p*cos(theta3 - theta4) + 120*l2*l3*l4^2*m3^2*m4^2*t2p*t4p*cos(theta3 - theta4) + 18*l2*l3*l4^2*m3^2*m4^2*t2p*t3p*cos(theta3 - 3*theta4) - 12*l2*l3*l4^2*m3^2*m4^2*t2p*t3p*cos(theta3 + 3*theta4) + 20*l2*l3*l4^2*m3^2*m4^2*t2p*t3p*cos(3*theta3 + theta4) + 44*l2*l3*l4^2*m3^2*m4^2*t3p*t4p*cos(theta3 - theta4) - 18*l2*l3*l4^2*m3^2*m4^2*t2p*t4p*cos(theta3 - 3*theta4) + 12*l2*l3*l4^2*m3^2*m4^2*t2p*t4p*cos(theta3 + 3*theta4) - 36*l2*l3*l4^2*m3^2*m4^2*t2p*t4p*cos(3*theta3 + theta4) - 6*l2*l3*l4^2*m3^2*m4^2*t3p*t4p*cos(theta3 - 3*theta4) + 4*l2*l3*l4^2*m3^2*m4^2*t3p*t4p*cos(theta3 + 3*theta4) - 16*l2*l3*l4^2*m3^2*m4^2*t3p*t4p*cos(3*theta3 + theta4) + 32*l2^2*l4^2*m2*m3*m4^2*t2p*t3p*cos(2*theta3 + theta4) + 32*l2^2*l4^2*m2*m3^2*m4*t2p*t3p*cos(2*theta3 + theta4) - 32*l2^2*l4^2*m2*m3*m4^2*t2p*t4p*cos(2*theta3 + theta4) - 32*l2^2*l4^2*m2*m3^2*m4*t2p*t4p*cos(2*theta3 + theta4) - 4*g*l2*l3*l4*m2*m3*m4^2*sin(theta2 - 2*theta3 + 2*theta4) - 4*g*l2*l3*l4*m2*m3*m4^2*sin(theta2 + 2*theta3 - 2*theta4) - 4*g*l2*l3*l4*m2*m3*m4^2*sin(theta2 + 2*theta3 + 2*theta4) - 4*g*l2*l3*l4*m2*m3^2*m4*sin(theta2 - 2*theta3 + 2*theta4) - 4*g*l2*l3*l4*m2*m3^2*m4*sin(theta2 + 2*theta3 - 2*theta4) - 4*g*l2*l3*l4*m2*m3^2*m4*sin(theta2 + 2*theta3 + 2*theta4) - 8*l2^2*l3*l4*m2*m3*m4^2*t1p^2*cos(2*theta3) - 24*l2^2*l3*l4*m2*m3^2*m4*t1p^2*cos(2*theta3) - 16*l2^2*l3*l4*m2*m3*m4^2*t2p^2*cos(2*theta3) - 48*l2^2*l3*l4*m2*m3^2*m4*t2p^2*cos(2*theta3) - 16*l2*l3^2*l4*m3^2*m4^2*t2p*t3p*cos(3*theta3) + 3*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + 3*theta3 - theta4) + 2*l2^2*l3*l4*m2*m3*m4^2*t1p^2*cos(2*theta3 - 2*theta2 + 2*theta4) + 2*l2^2*l3*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 - 2*theta3 + 2*theta4) + 2*l2^2*l3*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 + 2*theta3 - 2*theta4) + 2*l2^2*l3*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 + 2*theta3 + 2*theta4) + 2*l2^2*l3*l4*m2*m3^2*m4*t1p^2*cos(2*theta3 - 2*theta2 + 2*theta4) + 2*l2^2*l3*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 - 2*theta3 + 2*theta4) + 2*l2^2*l3*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 + 2*theta3 - 2*theta4) + 2*l2^2*l3*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 + 2*theta3 + 2*theta4) + 6*l2*l3^2*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 + 3*theta3 - 2*theta4) + 6*l2*l3^2*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 + 3*theta3 + 2*theta4) + 6*l2*l3^2*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 + 3*theta3 - 2*theta4) + 6*l2*l3^2*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 + 3*theta3 + 2*theta4) - 3*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + 3*theta3 + 3*theta4) - 12*l2*l3*l4^2*m2*m3^2*m4*t1p^2*cos(2*theta2 + 3*theta3 + 3*theta4) + 3*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + 3*theta3 + 5*theta4) + 8*g*l2*l3*l4*m2*m3*m4^2*sin(theta2 - 2*theta3) + 8*g*l2*l3*l4*m2*m3*m4^2*sin(theta2 + 2*theta3) + 24*g*l2*l3*l4*m2*m3^2*m4*sin(theta2 - 2*theta3) + 24*g*l2*l3*l4*m2*m3^2*m4*sin(theta2 + 2*theta3) + 36*l2*l3*l4^2*m2*m4^3*t2p*t3p*cos(theta3 + theta4) - 36*l2*l3*l4^2*m2*m4^3*t2p*t4p*cos(theta3 + theta4) + 42*l2*l3*l4^2*m3*m4^3*t2p*t3p*cos(theta3 + theta4) + 64*l2*l3*l4^2*m3^3*m4*t2p*t3p*cos(theta3 + theta4) - 12*l2*l3*l4^2*m2*m4^3*t3p*t4p*cos(theta3 + theta4) - 42*l2*l3*l4^2*m3*m4^3*t2p*t4p*cos(theta3 + theta4) - 48*l2*l3*l4^2*m3^3*m4*t2p*t4p*cos(theta3 + theta4) - 14*l2*l3*l4^2*m3*m4^3*t3p*t4p*cos(theta3 + theta4) - 12*l2*l3*l4^2*m3^3*m4*t3p*t4p*cos(theta3 + theta4) - 4*l2^2*l3*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 - 2*theta3) - 4*l2^2*l3*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 + 2*theta3) - 12*l2^2*l3*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 - 2*theta3) - 12*l2^2*l3*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 + 2*theta3) - 12*l2*l3^2*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 + 3*theta3) - 36*l2*l3^2*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 + 3*theta3) + 4*l2^2*l3*l4*m2*m3*m4^2*t1p^2*cos(2*theta3 - 2*theta4) + 4*l2^2*l3*l4*m2*m3*m4^2*t1p^2*cos(2*theta3 + 2*theta4) + 4*l2^2*l3*l4*m2*m3^2*m4*t1p^2*cos(2*theta3 - 2*theta4) + 4*l2^2*l3*l4*m2*m3^2*m4*t1p^2*cos(2*theta3 + 2*theta4) + 8*l2^2*l3*l4*m2*m3*m4^2*t2p^2*cos(2*theta3 - 2*theta4) + 8*l2^2*l3*l4*m2*m3*m4^2*t2p^2*cos(2*theta3 + 2*theta4) + 8*l2^2*l3*l4*m2*m3^2*m4*t2p^2*cos(2*theta3 - 2*theta4) + 8*l2^2*l3*l4*m2*m3^2*m4*t2p^2*cos(2*theta3 + 2*theta4) - 22*l2*l3*l4^2*m3^2*m4^2*t2p*t3p*cos(3*theta3 - theta4) + 6*l2*l3*l4^2*m3^2*m4^2*t2p*t4p*cos(3*theta3 - theta4) - 6*l2*l3*l4^2*m3^2*m4^2*t2p*t3p*cos(3*theta3 + 3*theta4) - 2*l2*l3*l4^2*m3^2*m4^2*t3p*t4p*cos(3*theta3 - theta4) + 6*l2*l3*l4^2*m3^2*m4^2*t2p*t4p*cos(3*theta3 + 3*theta4) + 2*l2*l3*l4^2*m3^2*m4^2*t3p*t4p*cos(3*theta3 + 3*theta4) - 8*l2^2*l4^2*m2*m3*m4^2*t2p*t3p*cos(2*theta3 - theta4) + 8*l2^2*l4^2*m2*m3*m4^2*t2p*t4p*cos(2*theta3 - theta4) - 24*l2^2*l4^2*m2*m3*m4^2*t2p*t3p*cos(2*theta3 + 3*theta4) + 24*l2^2*l4^2*m2*m3*m4^2*t2p*t4p*cos(2*theta3 + 3*theta4) - 64*l2*l3^2*l4*m2*m3^3*t2p*t3p*cos(theta3) + 32*l2*l3^2*l4*m3^3*m4*t2p*t3p*cos(theta3) + l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + theta3 + theta4) + 4*l2*l3*l4^2*m2*m3^2*m4*t1p^2*cos(2*theta2 + theta3 + theta4) + 4*g*l2*l3*l4*m2*m3*m4^2*sin(2*theta3 - theta2 + 2*theta4) + 4*g*l2*l3*l4*m2*m3^2*m4*sin(2*theta3 - theta2 + 2*theta4) + 80*l2*l3*l4^2*m2*m3*m4^2*t2p*t3p*cos(theta3 + theta4) + 32*l2*l3*l4^2*m2*m3^2*m4*t2p*t3p*cos(theta3 + theta4) - 96*l2*l3*l4^2*m2*m3*m4^2*t2p*t4p*cos(theta3 + theta4) - 96*l2*l3*l4^2*m2*m3^2*m4*t2p*t4p*cos(theta3 + theta4) - 36*l2*l3*l4^2*m2*m3*m4^2*t3p*t4p*cos(theta3 + theta4) - 48*l2*l3*l4^2*m2*m3^2*m4*t3p*t4p*cos(theta3 + theta4) - 32*l2*l3^2*l4*m2*m3*m4^2*t2p*t3p*cos(theta3) - 96*l2*l3^2*l4*m2*m3^2*m4*t2p*t3p*cos(theta3) - 64*l2*l3*l4^2*m2*m3*m4^2*t2p*t3p*cos(theta3 - theta4) - 64*l2*l3*l4^2*m2*m3^2*m4*t2p*t3p*cos(theta3 - theta4) + 48*l2*l3*l4^2*m2*m3*m4^2*t2p*t4p*cos(theta3 - theta4) + 16*l2*l3^2*l4*m2*m3*m4^2*t2p*t3p*cos(theta3 - 2*theta4) + 16*l2*l3^2*l4*m2*m3*m4^2*t2p*t3p*cos(theta3 + 2*theta4) + 16*l2*l3^2*l4*m2*m3^2*m4*t2p*t3p*cos(theta3 - 2*theta4) + 16*l2*l3^2*l4*m2*m3^2*m4*t2p*t3p*cos(theta3 + 2*theta4) + 16*l2*l3*l4^2*m2*m3*m4^2*t2p*t3p*cos(theta3 - 3*theta4) - 32*l2*l3*l4^2*m2*m3*m4^2*t2p*t3p*cos(theta3 + 3*theta4) + 12*l2*l3*l4^2*m2*m3*m4^2*t3p*t4p*cos(theta3 - theta4) - 16*l2*l3*l4^2*m2*m3^2*m4*t3p*t4p*cos(theta3 - theta4) + 48*l2*l3*l4^2*m2*m3*m4^2*t2p*t4p*cos(theta3 + 3*theta4) + 4*l2*l3*l4^2*m2*m3*m4^2*t3p*t4p*cos(theta3 - 3*theta4) + 20*l2*l3*l4^2*m2*m3*m4^2*t3p*t4p*cos(theta3 + 3*theta4))/(8*l2^2*l3*l4*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3))^2);
A_l28=-(6*l3^2*l4^2*m3*m4^3*t4p^2*cos(2*theta3 + theta4) - 16*l3^2*l4^2*m3^3*m4*t3p^2*cos(2*theta3 + theta4) - 12*l3^2*l4^2*m3*m4^3*t3p^2*cos(2*theta3 + theta4) + 8*l3^2*l4^2*m3^3*m4*t4p^2*cos(2*theta3 + theta4) - 12*l3^2*l4^2*m2*m4^3*t3p^2*cos(3*theta4) + 6*l3^2*l4^2*m2*m4^3*t4p^2*cos(3*theta4) - 24*l3^2*l4^2*m3*m4^3*t3p^2*cos(3*theta4) + 4*l3^2*l4^2*m2*m4^3*t3p^2*cos(5*theta4) + 12*l3^2*l4^2*m3*m4^3*t4p^2*cos(3*theta4) - 2*l3^2*l4^2*m2*m4^3*t4p^2*cos(5*theta4) + 56*l3^2*l4^2*m3^2*m4^2*t3p^2*cos(theta4) - 28*l3^2*l4^2*m3^2*m4^2*t4p^2*cos(theta4) - 4*b4*l2*l3*m3^3*t4p*sin(3*theta3 - theta4) - 12*l3^2*l4^2*m3*m4^3*t3p^2*cos(2*theta3 - theta4) - 16*l3^2*l4^2*m3^3*m4*t3p^2*cos(2*theta3 - theta4) + 6*l3^2*l4^2*m3*m4^3*t4p^2*cos(2*theta3 - theta4) + 8*l3^2*l4^2*m3^3*m4*t4p^2*cos(2*theta3 - theta4) + 12*l3^2*l4^2*m3*m4^3*t3p^2*cos(2*theta3 - 3*theta4) + 12*l3^2*l4^2*m3*m4^3*t3p^2*cos(2*theta3 + 3*theta4) - 6*l3^2*l4^2*m3*m4^3*t4p^2*cos(2*theta3 - 3*theta4) - 6*l3^2*l4^2*m3*m4^3*t4p^2*cos(2*theta3 + 3*theta4) - 28*l3^2*l4^2*m3^2*m4^2*t3p^2*cos(2*theta3 + theta4) + 14*l3^2*l4^2*m3^2*m4^2*t4p^2*cos(2*theta3 + theta4) + 12*b4*l2*l3*m3^3*t4p*sin(theta3 + theta4) - 24*l3^2*l4^2*m3^2*m4^2*t3p^2*cos(3*theta4) + 12*l3^2*l4^2*m3^2*m4^2*t4p^2*cos(3*theta4) - 28*l3^2*l4^2*m3^2*m4^2*t3p^2*cos(2*theta3 - theta4) + 14*l3^2*l4^2*m3^2*m4^2*t4p^2*cos(2*theta3 - theta4) + 12*l3^2*l4^2*m3^2*m4^2*t3p^2*cos(2*theta3 - 3*theta4) + 12*l3^2*l4^2*m3^2*m4^2*t3p^2*cos(2*theta3 + 3*theta4) - 6*l3^2*l4^2*m3^2*m4^2*t4p^2*cos(2*theta3 - 3*theta4) - 6*l3^2*l4^2*m3^2*m4^2*t4p^2*cos(2*theta3 + 3*theta4) + 8*l3^2*l4^2*m2*m4^3*t3p^2*cos(theta4) - 4*l3^2*l4^2*m2*m4^3*t4p^2*cos(theta4) + 24*l3^2*l4^2*m3*m4^3*t3p^2*cos(theta4) + 32*l3^2*l4^2*m3^3*m4*t3p^2*cos(theta4) - 12*l3^2*l4^2*m3*m4^3*t4p^2*cos(theta4) - 16*l3^2*l4^2*m3^3*m4*t4p^2*cos(theta4) + 12*b4*l2*l3*m3^3*t4p*sin(theta3 - theta4) - 4*b4*l2*l3*m3^3*t4p*sin(3*theta3 + theta4) + 16*b4*l2*l3*m2*m3^2*t4p*sin(theta3 + theta4) - 4*b4*l2*l3*m2*m4^2*t4p*sin(theta3 + theta4) + 12*b4*l2*l3*m3*m4^2*t4p*sin(theta3 + theta4) + 24*b4*l2*l3*m3^2*m4*t4p*sin(theta3 + theta4) + 6*l2*l3*l4^2*m3^3*m4*t1p^2*cos(theta3 - theta4) - 16*l2*l3*l4^2*m2*m4^3*t3p^2*cos(theta3 - theta4) + 12*l2*l3*l4^2*m3^3*m4*t2p^2*cos(theta3 - theta4) + 8*l2*l3*l4^2*m2*m4^3*t4p^2*cos(theta3 - theta4) + 2*l2*l3*l4^2*m3^3*m4*t1p^2*cos(3*theta3 + theta4) + 20*l2*l3*l4^2*m3^3*m4*t3p^2*cos(theta3 - theta4) + 4*l2*l3*l4^2*m2*m4^3*t3p^2*cos(theta3 - 3*theta4) - 16*l2*l3*l4^2*m2*m4^3*t3p^2*cos(theta3 + 3*theta4) + 4*l2*l3*l4^2*m3^3*m4*t2p^2*cos(3*theta3 + theta4) + 8*l2*l3*l4^2*m3^3*m4*t4p^2*cos(theta3 - theta4) - 2*l2*l3*l4^2*m2*m4^3*t4p^2*cos(theta3 - 3*theta4) + 8*l2*l3*l4^2*m2*m4^3*t4p^2*cos(theta3 + 3*theta4) + 12*l2*l3*l4^2*m3*m4^3*t3p^2*cos(theta3 - 3*theta4) - 24*l2*l3*l4^2*m3*m4^3*t3p^2*cos(theta3 + 3*theta4) - 8*l2*l3*l4^2*m3*m4^3*t3p^2*cos(3*theta3 + theta4) - 4*l2*l3*l4^2*m3^3*m4*t3p^2*cos(3*theta3 + theta4) + 4*l2*l3*l4^2*m2*m4^3*t3p^2*cos(theta3 + 5*theta4) - 6*l2*l3*l4^2*m3*m4^3*t4p^2*cos(theta3 - 3*theta4) + 12*l2*l3*l4^2*m3*m4^3*t4p^2*cos(theta3 + 3*theta4) + 4*l2*l3*l4^2*m3*m4^3*t4p^2*cos(3*theta3 + theta4) + 8*l2*l3*l4^2*m3^3*m4*t4p^2*cos(3*theta3 + theta4) - 2*l2*l3*l4^2*m2*m4^3*t4p^2*cos(theta3 + 5*theta4) - 6*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(theta3 + theta4) - 12*l2*l3*l4^2*m3^2*m4^2*t2p^2*cos(theta3 + theta4) + 8*l2*l3*l4^2*m3^2*m4^2*t3p^2*cos(theta3 + theta4) - 22*l2*l3*l4^2*m3^2*m4^2*t4p^2*cos(theta3 + theta4) + 14*l2^2*l4^2*m2*m4^3*t2p*t3p*cos(2*theta3 + theta4) - 14*l2^2*l4^2*m2*m4^3*t2p*t4p*cos(2*theta3 + theta4) + 4*l2^2*l4^2*m3^3*m4*t2p*t3p*cos(2*theta3 + theta4) - 4*l2^2*l4^2*m3^3*m4*t2p*t4p*cos(2*theta3 + theta4) - 12*l3^2*l4^2*m3*m4^3*t2p*t3p*cos(2*theta3 + theta4) - 16*l3^2*l4^2*m3^3*m4*t2p*t3p*cos(2*theta3 + theta4) - 2*l2^2*l4^2*m3*m4^3*t2p*t3p*cos(4*theta3 + theta4) - 4*l2^2*l4^2*m3^3*m4*t2p*t3p*cos(4*theta3 + theta4) + 12*l3^2*l4^2*m3*m4^3*t2p*t4p*cos(2*theta3 + theta4) + 16*l3^2*l4^2*m3^3*m4*t2p*t4p*cos(2*theta3 + theta4) + 2*l2^2*l4^2*m3*m4^3*t2p*t4p*cos(4*theta3 + theta4) + 4*l2^2*l4^2*m3^3*m4*t2p*t4p*cos(4*theta3 + theta4) + 6*l3^2*l4^2*m3*m4^3*t3p*t4p*cos(2*theta3 + theta4) + 8*l3^2*l4^2*m3^3*m4*t3p*t4p*cos(2*theta3 + theta4) + 16*b3*l2*l4*m2*m4^2*t3p*sin(theta3) - 16*b4*l2*l4*m2*m4^2*t4p*sin(theta3) + 32*l3^2*l4^2*m2*m3*m4^2*t3p^2*cos(theta4) + 64*l3^2*l4^2*m2*m3^2*m4*t3p^2*cos(theta4) - 16*l3^2*l4^2*m2*m3*m4^2*t4p^2*cos(theta4) - 32*l3^2*l4^2*m2*m3^2*m4*t4p^2*cos(theta4) - 3*l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 - theta3 + 3*theta4) - 9*l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 + 3*theta3 + 3*theta4) + 3*l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 + 5*theta3 + 3*theta4) - l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 - theta3 + theta4) + 9*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 + theta3 + 3*theta4) - 3*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 + 3*theta3 + theta4) + l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 + 5*theta3 + theta4) + 4*l2^2*l4^2*m2*m4^3*t2p*t3p*cos(3*theta4) - 4*l2^2*l4^2*m2*m4^3*t2p*t4p*cos(3*theta4) + 6*l2^2*l4^2*m3*m4^3*t2p*t3p*cos(3*theta4) - 12*l3^2*l4^2*m2*m4^3*t2p*t3p*cos(3*theta4) - 6*l2^2*l4^2*m3*m4^3*t2p*t4p*cos(3*theta4) + 12*l3^2*l4^2*m2*m4^3*t2p*t4p*cos(3*theta4) - 24*l3^2*l4^2*m3*m4^3*t2p*t3p*cos(3*theta4) + 4*l3^2*l4^2*m2*m4^3*t2p*t3p*cos(5*theta4) + 6*l3^2*l4^2*m2*m4^3*t3p*t4p*cos(3*theta4) + 24*l3^2*l4^2*m3*m4^3*t2p*t4p*cos(3*theta4) - 4*l3^2*l4^2*m2*m4^3*t2p*t4p*cos(5*theta4) + 12*l3^2*l4^2*m3*m4^3*t3p*t4p*cos(3*theta4) - 2*l3^2*l4^2*m2*m4^3*t3p*t4p*cos(5*theta4) + 10*l2^2*l4^2*m3^2*m4^2*t2p*t3p*cos(theta4) - 10*l2^2*l4^2*m3^2*m4^2*t2p*t4p*cos(theta4) + 56*l3^2*l4^2*m3^2*m4^2*t2p*t3p*cos(theta4) - 56*l3^2*l4^2*m3^2*m4^2*t2p*t4p*cos(theta4) - 28*l3^2*l4^2*m3^2*m4^2*t3p*t4p*cos(theta4) + 16*b4*l2*l3*m2*m3^2*t4p*sin(theta3 - theta4) - 8*b3*l2*l4*m2*m4^2*t3p*sin(theta3 - 2*theta4) - 8*b3*l2*l4*m2*m4^2*t3p*sin(theta3 + 2*theta4) - 4*b4*l2*l3*m2*m4^2*t4p*sin(theta3 - theta4) - 8*b3*l2*l4*m3*m4^2*t3p*sin(theta3 - 2*theta4) - 16*b3*l2*l4*m3*m4^2*t3p*sin(theta3 + 2*theta4) - 8*b3*l2*l4*m3^2*m4*t3p*sin(theta3 - 2*theta4) - 16*b3*l2*l4*m3^2*m4*t3p*sin(theta3 + 2*theta4) + 12*b4*l2*l3*m3*m4^2*t4p*sin(theta3 - theta4) + 24*b4*l2*l3*m3^2*m4*t4p*sin(theta3 - theta4) + 4*b4*l2*l3*m2*m4^2*t4p*sin(theta3 - 3*theta4) + 4*b4*l2*l3*m2*m4^2*t4p*sin(theta3 + 3*theta4) + 8*b4*l2*l4*m2*m4^2*t4p*sin(theta3 - 2*theta4) + 8*b4*l2*l4*m2*m4^2*t4p*sin(theta3 + 2*theta4) - 4*b4*l2*l3*m3*m4^2*t4p*sin(3*theta3 + theta4) - 8*b4*l2*l3*m3^2*m4*t4p*sin(3*theta3 + theta4) + 8*b4*l2*l4*m3*m4^2*t4p*sin(theta3 - 2*theta4) + 16*b4*l2*l4*m3*m4^2*t4p*sin(theta3 + 2*theta4) + 8*b4*l2*l4*m3^2*m4*t4p*sin(theta3 - 2*theta4) + 16*b4*l2*l4*m3^2*m4*t4p*sin(theta3 + 2*theta4) - 2*l2*l3*l4^2*m3^3*m4*t1p^2*cos(3*theta3 - theta4) - 4*l2*l3*l4^2*m3^3*m4*t2p^2*cos(3*theta3 - theta4) - 4*l2*l3*l4^2*m3*m4^3*t3p^2*cos(3*theta3 - theta4) - 12*l2*l3*l4^2*m3^3*m4*t3p^2*cos(3*theta3 - theta4) + 2*l2*l3*l4^2*m3*m4^3*t4p^2*cos(3*theta3 - theta4) + 12*l2*l3*l4^2*m3*m4^3*t3p^2*cos(3*theta3 + 3*theta4) - 6*l2*l3*l4^2*m3*m4^3*t4p^2*cos(3*theta3 + 3*theta4) + 6*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(theta3 - theta4) + 12*l2*l3*l4^2*m3^2*m4^2*t2p^2*cos(theta3 - theta4) + 2*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(3*theta3 + theta4) + 20*l2*l3*l4^2*m3^2*m4^2*t3p^2*cos(theta3 - theta4) + 4*l2*l3*l4^2*m3^2*m4^2*t2p^2*cos(3*theta3 + theta4) + 8*l2*l3*l4^2*m3^2*m4^2*t4p^2*cos(theta3 - theta4) + 12*l2*l3*l4^2*m3^2*m4^2*t3p^2*cos(theta3 - 3*theta4) - 24*l2*l3*l4^2*m3^2*m4^2*t3p^2*cos(theta3 + 3*theta4) - 12*l2*l3*l4^2*m3^2*m4^2*t3p^2*cos(3*theta3 + theta4) - 6*l2*l3*l4^2*m3^2*m4^2*t4p^2*cos(theta3 - 3*theta4) + 12*l2*l3*l4^2*m3^2*m4^2*t4p^2*cos(theta3 + 3*theta4) + 12*l2*l3*l4^2*m3^2*m4^2*t4p^2*cos(3*theta3 + theta4) - 6*l2^2*l4^2*m2*m4^3*t2p*t3p*cos(2*theta3 - theta4) + 6*l2^2*l4^2*m2*m4^3*t2p*t4p*cos(2*theta3 - theta4) - 4*l2^2*l4^2*m3*m4^3*t2p*t3p*cos(2*theta3 - theta4) - 4*l2^2*l4^2*m3^3*m4*t2p*t3p*cos(2*theta3 - theta4) - 10*l2^2*l4^2*m2*m4^3*t2p*t3p*cos(2*theta3 + 3*theta4) + 4*l2^2*l4^2*m3*m4^3*t2p*t4p*cos(2*theta3 - theta4) + 4*l2^2*l4^2*m3^3*m4*t2p*t4p*cos(2*theta3 - theta4) - 12*l3^2*l4^2*m3*m4^3*t2p*t3p*cos(2*theta3 - theta4) - 16*l3^2*l4^2*m3^3*m4*t2p*t3p*cos(2*theta3 - theta4) + 10*l2^2*l4^2*m2*m4^3*t2p*t4p*cos(2*theta3 + 3*theta4) - 12*l2^2*l4^2*m3*m4^3*t2p*t3p*cos(2*theta3 + 3*theta4) + 12*l3^2*l4^2*m3*m4^3*t2p*t4p*cos(2*theta3 - theta4) + 16*l3^2*l4^2*m3^3*m4*t2p*t4p*cos(2*theta3 - theta4) + 2*l2^2*l4^2*m2*m4^3*t2p*t3p*cos(2*theta3 + 5*theta4) + 12*l2^2*l4^2*m3*m4^3*t2p*t4p*cos(2*theta3 + 3*theta4) + 12*l3^2*l4^2*m3*m4^3*t2p*t3p*cos(2*theta3 - 3*theta4) + 12*l3^2*l4^2*m3*m4^3*t2p*t3p*cos(2*theta3 + 3*theta4) + 6*l3^2*l4^2*m3*m4^3*t3p*t4p*cos(2*theta3 - theta4) + 8*l3^2*l4^2*m3^3*m4*t3p*t4p*cos(2*theta3 - theta4) - 2*l2^2*l4^2*m2*m4^3*t2p*t4p*cos(2*theta3 + 5*theta4) + 6*l2^2*l4^2*m3*m4^3*t2p*t3p*cos(4*theta3 + 3*theta4) - 12*l3^2*l4^2*m3*m4^3*t2p*t4p*cos(2*theta3 - 3*theta4) - 12*l3^2*l4^2*m3*m4^3*t2p*t4p*cos(2*theta3 + 3*theta4) - 6*l2^2*l4^2*m3*m4^3*t2p*t4p*cos(4*theta3 + 3*theta4) - 6*l3^2*l4^2*m3*m4^3*t3p*t4p*cos(2*theta3 - 3*theta4) - 6*l3^2*l4^2*m3*m4^3*t3p*t4p*cos(2*theta3 + 3*theta4) + 4*l2^2*l4^2*m3^2*m4^2*t2p*t3p*cos(2*theta3 + theta4) - 4*l2^2*l4^2*m3^2*m4^2*t2p*t4p*cos(2*theta3 + theta4) - 28*l3^2*l4^2*m3^2*m4^2*t2p*t3p*cos(2*theta3 + theta4) - 6*l2^2*l4^2*m3^2*m4^2*t2p*t3p*cos(4*theta3 + theta4) + 28*l3^2*l4^2*m3^2*m4^2*t2p*t4p*cos(2*theta3 + theta4) + 6*l2^2*l4^2*m3^2*m4^2*t2p*t4p*cos(4*theta3 + theta4) + 14*l3^2*l4^2*m3^2*m4^2*t3p*t4p*cos(2*theta3 + theta4) + 16*b2*l3*l4*m3*m4^2*t2p*sin(2*theta4) + 16*b2*l3*l4*m3^2*m4*t2p*sin(2*theta4) - 16*b3*l3*l4*m3*m4^2*t3p*sin(2*theta4) - 16*b3*l3*l4*m3^2*m4*t3p*sin(2*theta4) + 3*l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 + theta3 + theta4) - 32*l3^2*l4^2*m2*m3*m4^2*t3p^2*cos(3*theta4) + 16*l3^2*l4^2*m2*m3*m4^2*t4p^2*cos(3*theta4) - 3*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 - theta3 + 3*theta4) - 9*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 + 3*theta3 + 3*theta4) + 3*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 + 5*theta3 + 3*theta4) + 6*l2^2*l4^2*m3^2*m4^2*t2p*t3p*cos(3*theta4) - 6*l2^2*l4^2*m3^2*m4^2*t2p*t4p*cos(3*theta4) - 24*l3^2*l4^2*m3^2*m4^2*t2p*t3p*cos(3*theta4) + 24*l3^2*l4^2*m3^2*m4^2*t2p*t4p*cos(3*theta4) + 12*l3^2*l4^2*m3^2*m4^2*t3p*t4p*cos(3*theta4) - 6*l2*l3*l4^2*m3^3*m4*t1p^2*cos(theta3 + theta4) + 24*l2*l3*l4^2*m2*m4^3*t3p^2*cos(theta3 + theta4) - 12*l2*l3*l4^2*m3^3*m4*t2p^2*cos(theta3 + theta4) - 12*l2*l3*l4^2*m2*m4^3*t4p^2*cos(theta3 + theta4) + 12*l2*l3*l4^2*m3*m4^3*t3p^2*cos(theta3 + theta4) - 4*l2*l3*l4^2*m3^3*m4*t3p^2*cos(theta3 + theta4) - 6*l2*l3*l4^2*m3*m4^3*t4p^2*cos(theta3 + theta4) - 16*l2*l3*l4^2*m3^3*m4*t4p^2*cos(theta3 + theta4) + 8*b2*l3*l4*m3*m4^2*t2p*sin(2*theta3 - 2*theta4) - 8*b2*l3*l4*m3*m4^2*t2p*sin(2*theta3 + 2*theta4) + 8*b2*l3*l4*m3^2*m4*t2p*sin(2*theta3 - 2*theta4) - 8*b2*l3*l4*m3^2*m4*t2p*sin(2*theta3 + 2*theta4) + 8*b3*l2*l4*m3*m4^2*t3p*sin(3*theta3 + 2*theta4) + 8*b3*l2*l4*m3^2*m4*t3p*sin(3*theta3 + 2*theta4) - 8*b3*l3*l4*m3*m4^2*t3p*sin(2*theta3 - 2*theta4) + 8*b3*l3*l4*m3*m4^2*t3p*sin(2*theta3 + 2*theta4) - 8*b3*l3*l4*m3^2*m4*t3p*sin(2*theta3 - 2*theta4) + 8*b3*l3*l4*m3^2*m4*t3p*sin(2*theta3 + 2*theta4) - 4*b4*l2*l3*m3*m4^2*t4p*sin(3*theta3 - theta4) - 8*b4*l2*l3*m3^2*m4*t4p*sin(3*theta3 - theta4) - 8*b4*l2*l4*m3*m4^2*t4p*sin(3*theta3 + 2*theta4) - 8*b4*l2*l4*m3^2*m4*t4p*sin(3*theta3 + 2*theta4) - 2*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(3*theta3 - theta4) - 4*l2*l3*l4^2*m3^2*m4^2*t2p^2*cos(3*theta3 - theta4) - 16*l2*l3*l4^2*m3^2*m4^2*t3p^2*cos(3*theta3 - theta4) + 2*l2*l3*l4^2*m3^2*m4^2*t4p^2*cos(3*theta3 - theta4) + 12*l2*l3*l4^2*m3^2*m4^2*t3p^2*cos(3*theta3 + 3*theta4) - 6*l2*l3*l4^2*m3^2*m4^2*t4p^2*cos(3*theta3 + 3*theta4) - 8*l2^2*l4^2*m3^2*m4^2*t2p*t3p*cos(2*theta3 - theta4) + 8*l2^2*l4^2*m3^2*m4^2*t2p*t4p*cos(2*theta3 - theta4) - 28*l3^2*l4^2*m3^2*m4^2*t2p*t3p*cos(2*theta3 - theta4) - 12*l2^2*l4^2*m3^2*m4^2*t2p*t3p*cos(2*theta3 + 3*theta4) + 28*l3^2*l4^2*m3^2*m4^2*t2p*t4p*cos(2*theta3 - theta4) + 12*l2^2*l4^2*m3^2*m4^2*t2p*t4p*cos(2*theta3 + 3*theta4) + 12*l3^2*l4^2*m3^2*m4^2*t2p*t3p*cos(2*theta3 - 3*theta4) + 12*l3^2*l4^2*m3^2*m4^2*t2p*t3p*cos(2*theta3 + 3*theta4) + 14*l3^2*l4^2*m3^2*m4^2*t3p*t4p*cos(2*theta3 - theta4) + 6*l2^2*l4^2*m3^2*m4^2*t2p*t3p*cos(4*theta3 + 3*theta4) - 12*l3^2*l4^2*m3^2*m4^2*t2p*t4p*cos(2*theta3 - 3*theta4) - 12*l3^2*l4^2*m3^2*m4^2*t2p*t4p*cos(2*theta3 + 3*theta4) - 6*l2^2*l4^2*m3^2*m4^2*t2p*t4p*cos(4*theta3 + 3*theta4) - 6*l3^2*l4^2*m3^2*m4^2*t3p*t4p*cos(2*theta3 - 3*theta4) - 6*l3^2*l4^2*m3^2*m4^2*t3p*t4p*cos(2*theta3 + 3*theta4) - l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 - theta3 + theta4) + 9*l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 + theta3 + 3*theta4) - 3*l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 + 3*theta3 + theta4) + l2*l3*l4^2*m3^3*m4*t1p^2*cos(2*theta2 + 5*theta3 + theta4) + 3*l2*l3*l4^2*m3^2*m4^2*t1p^2*cos(2*theta2 + theta3 + theta4) - 4*l2^2*l4^2*m2*m4^3*t2p*t3p*cos(theta4) + 4*l2^2*l4^2*m2*m4^3*t2p*t4p*cos(theta4) + 6*l2^2*l4^2*m3*m4^3*t2p*t3p*cos(theta4) + 4*l2^2*l4^2*m3^3*m4*t2p*t3p*cos(theta4) + 8*l3^2*l4^2*m2*m4^3*t2p*t3p*cos(theta4) - 6*l2^2*l4^2*m3*m4^3*t2p*t4p*cos(theta4) - 4*l2^2*l4^2*m3^3*m4*t2p*t4p*cos(theta4) - 8*l3^2*l4^2*m2*m4^3*t2p*t4p*cos(theta4) + 24*l3^2*l4^2*m3*m4^3*t2p*t3p*cos(theta4) + 32*l3^2*l4^2*m3^3*m4*t2p*t3p*cos(theta4) - 4*l3^2*l4^2*m2*m4^3*t3p*t4p*cos(theta4) - 24*l3^2*l4^2*m3*m4^3*t2p*t4p*cos(theta4) - 32*l3^2*l4^2*m3^3*m4*t2p*t4p*cos(theta4) - 12*l3^2*l4^2*m3*m4^3*t3p*t4p*cos(theta4) - 16*l3^2*l4^2*m3^3*m4*t3p*t4p*cos(theta4) + 12*b4*l2*l3*m2*m3*m4*t4p*sin(theta3 + theta4) - 10*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(theta3 + theta4) - 8*l2*l3*l4^2*m2*m3^2*m4*t1p^2*cos(theta3 + theta4) - 20*l2*l3*l4^2*m2*m3*m4^2*t2p^2*cos(theta3 + theta4) - 16*l2*l3*l4^2*m2*m3^2*m4*t2p^2*cos(theta3 + theta4) + 4*l2*l3*l4^2*m2*m3*m4^2*t3p^2*cos(theta3 + theta4) + 16*l2*l3*l4^2*m2*m3^2*m4*t3p^2*cos(theta3 + theta4) - 32*l2*l3*l4^2*m2*m3*m4^2*t4p^2*cos(theta3 + theta4) - 32*l2*l3*l4^2*m2*m3^2*m4*t4p^2*cos(theta3 + theta4) - 24*l2*l3*l4^2*m2*m4^3*t2p*t3p*cos(theta3 - theta4) + 24*l2*l3*l4^2*m2*m4^3*t2p*t4p*cos(theta3 - theta4) + 24*l2*l3*l4^2*m3^3*m4*t2p*t3p*cos(theta3 - theta4) + 6*l2*l3*l4^2*m2*m4^3*t2p*t3p*cos(theta3 - 3*theta4) - 24*l2*l3*l4^2*m2*m4^3*t2p*t3p*cos(theta3 + 3*theta4) + 8*l2*l3*l4^2*m2*m4^3*t3p*t4p*cos(theta3 - theta4) + 24*l2*l3*l4^2*m3^3*m4*t2p*t4p*cos(theta3 - theta4) - 6*l2*l3*l4^2*m2*m4^3*t2p*t4p*cos(theta3 - 3*theta4) + 24*l2*l3*l4^2*m2*m4^3*t2p*t4p*cos(theta3 + 3*theta4) + 18*l2*l3*l4^2*m3*m4^3*t2p*t3p*cos(theta3 - 3*theta4) - 36*l2*l3*l4^2*m3*m4^3*t2p*t3p*cos(theta3 + 3*theta4) - 12*l2*l3*l4^2*m3*m4^3*t2p*t3p*cos(3*theta3 + theta4) - 8*l2*l3*l4^2*m3^3*m4*t2p*t3p*cos(3*theta3 + theta4) + 20*l2*l3*l4^2*m3^3*m4*t3p*t4p*cos(theta3 - theta4) + 6*l2*l3*l4^2*m2*m4^3*t2p*t3p*cos(theta3 + 5*theta4) - 2*l2*l3*l4^2*m2*m4^3*t3p*t4p*cos(theta3 - 3*theta4) + 8*l2*l3*l4^2*m2*m4^3*t3p*t4p*cos(theta3 + 3*theta4) - 18*l2*l3*l4^2*m3*m4^3*t2p*t4p*cos(theta3 - 3*theta4) + 36*l2*l3*l4^2*m3*m4^3*t2p*t4p*cos(theta3 + 3*theta4) + 12*l2*l3*l4^2*m3*m4^3*t2p*t4p*cos(3*theta3 + theta4) + 24*l2*l3*l4^2*m3^3*m4*t2p*t4p*cos(3*theta3 + theta4) - 6*l2*l3*l4^2*m2*m4^3*t2p*t4p*cos(theta3 + 5*theta4) - 6*l2*l3*l4^2*m3*m4^3*t3p*t4p*cos(theta3 - 3*theta4) + 12*l2*l3*l4^2*m3*m4^3*t3p*t4p*cos(theta3 + 3*theta4) + 4*l2*l3*l4^2*m3*m4^3*t3p*t4p*cos(3*theta3 + theta4) + 12*l2*l3*l4^2*m3^3*m4*t3p*t4p*cos(3*theta3 + theta4) - 2*l2*l3*l4^2*m2*m4^3*t3p*t4p*cos(theta3 + 5*theta4) + 18*l2*l3*l4^2*m3^2*m4^2*t2p*t3p*cos(theta3 + theta4) - 66*l2*l3*l4^2*m3^2*m4^2*t2p*t4p*cos(theta3 + theta4) - 34*l2*l3*l4^2*m3^2*m4^2*t3p*t4p*cos(theta3 + theta4) - 3*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + theta3 - theta4) - 4*l2*l3^2*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 + theta3 - 2*theta4) + 4*l2*l3^2*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 + theta3 + 2*theta4) - 4*l2*l3^2*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 + theta3 - 2*theta4) + 4*l2*l3^2*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 + theta3 + 2*theta4) + 7*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + theta3 + 3*theta4) + 3*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + 3*theta3 + theta4) + 12*l2*l3*l4^2*m2*m3^2*m4*t1p^2*cos(2*theta2 + theta3 + 3*theta4) - 4*l2*l3*l4^2*m2*m3^2*m4*t1p^2*cos(2*theta2 + 3*theta3 + theta4) - l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + theta3 + 5*theta4) + 12*l2^2*l4^2*m2*m3*m4^2*t2p*t3p*cos(theta4) + 16*l2^2*l4^2*m2*m3^2*m4*t2p*t3p*cos(theta4) - 12*l2^2*l4^2*m2*m3*m4^2*t2p*t4p*cos(theta4) - 16*l2^2*l4^2*m2*m3^2*m4*t2p*t4p*cos(theta4) + 32*l3^2*l4^2*m2*m3*m4^2*t2p*t3p*cos(theta4) + 64*l3^2*l4^2*m2*m3^2*m4*t2p*t3p*cos(theta4) - 32*l3^2*l4^2*m2*m3*m4^2*t2p*t4p*cos(theta4) - 64*l3^2*l4^2*m2*m3^2*m4*t2p*t4p*cos(theta4) - 16*l3^2*l4^2*m2*m3*m4^2*t3p*t4p*cos(theta4) - 32*l3^2*l4^2*m2*m3^2*m4*t3p*t4p*cos(theta4) - 16*b3*l2*l4*m2*m3*m4*t3p*sin(theta3 - 2*theta4) - 16*b3*l2*l4*m2*m3*m4*t3p*sin(theta3 + 2*theta4) + 12*b4*l2*l3*m2*m3*m4*t4p*sin(theta3 - theta4) + 4*b4*l2*l3*m2*m3*m4*t4p*sin(theta3 - 3*theta4) + 4*b4*l2*l3*m2*m3*m4*t4p*sin(theta3 + 3*theta4) + 16*b4*l2*l4*m2*m3*m4*t4p*sin(theta3 - 2*theta4) + 16*b4*l2*l4*m2*m3*m4*t4p*sin(theta3 + 2*theta4) + 10*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(theta3 - theta4) + 8*l2*l3*l4^2*m2*m3^2*m4*t1p^2*cos(theta3 - theta4) + 20*l2*l3*l4^2*m2*m3*m4^2*t2p^2*cos(theta3 - theta4) + 16*l2*l3*l4^2*m2*m3^2*m4*t2p^2*cos(theta3 - theta4) + 8*l2*l3^2*l4*m2*m3*m4^2*t1p^2*cos(theta3 - 2*theta4) - 8*l2*l3^2*l4*m2*m3*m4^2*t1p^2*cos(theta3 + 2*theta4) + 8*l2*l3^2*l4*m2*m3^2*m4*t1p^2*cos(theta3 - 2*theta4) - 8*l2*l3^2*l4*m2*m3^2*m4*t1p^2*cos(theta3 + 2*theta4) + 2*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(theta3 - 3*theta4) - 2*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(theta3 + 3*theta4) + 28*l2*l3*l4^2*m2*m3*m4^2*t3p^2*cos(theta3 - theta4) + 48*l2*l3*l4^2*m2*m3^2*m4*t3p^2*cos(theta3 - theta4) + 16*l2*l3^2*l4*m2*m3*m4^2*t2p^2*cos(theta3 - 2*theta4) - 16*l2*l3^2*l4*m2*m3*m4^2*t2p^2*cos(theta3 + 2*theta4) + 16*l2*l3^2*l4*m2*m3^2*m4*t2p^2*cos(theta3 - 2*theta4) - 16*l2*l3^2*l4*m2*m3^2*m4*t2p^2*cos(theta3 + 2*theta4) + 4*l2*l3*l4^2*m2*m3*m4^2*t2p^2*cos(theta3 - 3*theta4) - 4*l2*l3*l4^2*m2*m3*m4^2*t2p^2*cos(theta3 + 3*theta4) + 16*l2*l3*l4^2*m2*m3*m4^2*t4p^2*cos(theta3 - theta4) + 16*l2*l3^2*l4*m2*m3*m4^2*t3p^2*cos(theta3 - 2*theta4) - 16*l2*l3^2*l4*m2*m3*m4^2*t3p^2*cos(theta3 + 2*theta4) + 16*l2*l3^2*l4*m2*m3^2*m4*t3p^2*cos(theta3 - 2*theta4) - 16*l2*l3^2*l4*m2*m3^2*m4*t3p^2*cos(theta3 + 2*theta4) + 12*l2*l3*l4^2*m2*m3*m4^2*t3p^2*cos(theta3 - 3*theta4) - 44*l2*l3*l4^2*m2*m3*m4^2*t3p^2*cos(theta3 + 3*theta4) + 16*l2*l3*l4^2*m2*m3*m4^2*t4p^2*cos(theta3 + 3*theta4) - 6*l2*l3*l4^2*m3*m4^3*t2p*t3p*cos(3*theta3 - theta4) - 16*l2*l3*l4^2*m3^3*m4*t2p*t3p*cos(3*theta3 - theta4) + 6*l2*l3*l4^2*m3*m4^3*t2p*t4p*cos(3*theta3 - theta4) + 18*l2*l3*l4^2*m3*m4^3*t2p*t3p*cos(3*theta3 + 3*theta4) + 2*l2*l3*l4^2*m3*m4^3*t3p*t4p*cos(3*theta3 - theta4) - 4*l2*l3*l4^2*m3^3*m4*t3p*t4p*cos(3*theta3 - theta4) - 18*l2*l3*l4^2*m3*m4^3*t2p*t4p*cos(3*theta3 + 3*theta4) - 6*l2*l3*l4^2*m3*m4^3*t3p*t4p*cos(3*theta3 + 3*theta4) + 24*l2*l3*l4^2*m3^2*m4^2*t2p*t3p*cos(theta3 - theta4) + 24*l2*l3*l4^2*m3^2*m4^2*t2p*t4p*cos(theta3 - theta4) + 18*l2*l3*l4^2*m3^2*m4^2*t2p*t3p*cos(theta3 - 3*theta4) - 36*l2*l3*l4^2*m3^2*m4^2*t2p*t3p*cos(theta3 + 3*theta4) - 20*l2*l3*l4^2*m3^2*m4^2*t2p*t3p*cos(3*theta3 + theta4) + 20*l2*l3*l4^2*m3^2*m4^2*t3p*t4p*cos(theta3 - theta4) - 18*l2*l3*l4^2*m3^2*m4^2*t2p*t4p*cos(theta3 - 3*theta4) + 36*l2*l3*l4^2*m3^2*m4^2*t2p*t4p*cos(theta3 + 3*theta4) + 36*l2*l3*l4^2*m3^2*m4^2*t2p*t4p*cos(3*theta3 + theta4) - 6*l2*l3*l4^2*m3^2*m4^2*t3p*t4p*cos(theta3 - 3*theta4) + 12*l2*l3*l4^2*m3^2*m4^2*t3p*t4p*cos(theta3 + 3*theta4) + 16*l2*l3*l4^2*m3^2*m4^2*t3p*t4p*cos(3*theta3 + theta4) + 16*l2^2*l4^2*m2*m3*m4^2*t2p*t3p*cos(2*theta3 + theta4) + 16*l2^2*l4^2*m2*m3^2*m4*t2p*t3p*cos(2*theta3 + theta4) - 16*l2^2*l4^2*m2*m3*m4^2*t2p*t4p*cos(2*theta3 + theta4) - 16*l2^2*l4^2*m2*m3^2*m4*t2p*t4p*cos(2*theta3 + theta4) - 4*g*l2*l3*l4*m2*m3*m4^2*sin(theta2 - 2*theta3 + 2*theta4) - 4*g*l2*l3*l4*m2*m3*m4^2*sin(theta2 + 2*theta3 - 2*theta4) + 4*g*l2*l3*l4*m2*m3*m4^2*sin(theta2 + 2*theta3 + 2*theta4) - 4*g*l2*l3*l4*m2*m3^2*m4*sin(theta2 - 2*theta3 + 2*theta4) - 4*g*l2*l3*l4*m2*m3^2*m4*sin(theta2 + 2*theta3 - 2*theta4) + 4*g*l2*l3*l4*m2*m3^2*m4*sin(theta2 + 2*theta3 + 2*theta4) + 3*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + 3*theta3 - theta4) - 2*l2^2*l3*l4*m2*m3*m4^2*t1p^2*cos(2*theta3 - 2*theta2 + 2*theta4) + 2*l2^2*l3*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 - 2*theta3 + 2*theta4) + 2*l2^2*l3*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 + 2*theta3 - 2*theta4) - 2*l2^2*l3*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 + 2*theta3 + 2*theta4) - 2*l2^2*l3*l4*m2*m3^2*m4*t1p^2*cos(2*theta3 - 2*theta2 + 2*theta4) + 2*l2^2*l3*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 - 2*theta3 + 2*theta4) + 2*l2^2*l3*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 + 2*theta3 - 2*theta4) - 2*l2^2*l3*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 + 2*theta3 + 2*theta4) + 4*l2*l3^2*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 + 3*theta3 - 2*theta4) - 4*l2*l3^2*l4*m2*m3*m4^2*t1p^2*cos(2*theta2 + 3*theta3 + 2*theta4) + 4*l2*l3^2*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 + 3*theta3 - 2*theta4) - 4*l2*l3^2*l4*m2*m3^2*m4*t1p^2*cos(2*theta2 + 3*theta3 + 2*theta4) - 7*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + 3*theta3 + 3*theta4) - 12*l2*l3*l4^2*m2*m3^2*m4*t1p^2*cos(2*theta2 + 3*theta3 + 3*theta4) + l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + 3*theta3 + 5*theta4) + 4*l2^2*l4^2*m2*m3*m4^2*t2p*t3p*cos(3*theta4) - 4*l2^2*l4^2*m2*m3*m4^2*t2p*t4p*cos(3*theta4) - 32*l3^2*l4^2*m2*m3*m4^2*t2p*t3p*cos(3*theta4) + 32*l3^2*l4^2*m2*m3*m4^2*t2p*t4p*cos(3*theta4) + 16*l3^2*l4^2*m2*m3*m4^2*t3p*t4p*cos(3*theta4) + 36*l2*l3*l4^2*m2*m4^3*t2p*t3p*cos(theta3 + theta4) - 36*l2*l3*l4^2*m2*m4^3*t2p*t4p*cos(theta3 + theta4) + 18*l2*l3*l4^2*m3*m4^3*t2p*t3p*cos(theta3 + theta4) - 12*l2*l3*l4^2*m2*m4^3*t3p*t4p*cos(theta3 + theta4) - 18*l2*l3*l4^2*m3*m4^3*t2p*t4p*cos(theta3 + theta4) - 48*l2*l3*l4^2*m3^3*m4*t2p*t4p*cos(theta3 + theta4) - 6*l2*l3*l4^2*m3*m4^3*t3p*t4p*cos(theta3 + theta4) - 28*l2*l3*l4^2*m3^3*m4*t3p*t4p*cos(theta3 + theta4) + 4*l2^2*l3*l4*m2*m3*m4^2*t1p^2*cos(2*theta3 - 2*theta4) - 4*l2^2*l3*l4*m2*m3*m4^2*t1p^2*cos(2*theta3 + 2*theta4) + 4*l2^2*l3*l4*m2*m3^2*m4*t1p^2*cos(2*theta3 - 2*theta4) - 4*l2^2*l3*l4*m2*m3^2*m4*t1p^2*cos(2*theta3 + 2*theta4) + 8*l2^2*l3*l4*m2*m3*m4^2*t2p^2*cos(2*theta3 - 2*theta4) - 8*l2^2*l3*l4*m2*m3*m4^2*t2p^2*cos(2*theta3 + 2*theta4) + 8*l2^2*l3*l4*m2*m3^2*m4*t2p^2*cos(2*theta3 - 2*theta4) - 8*l2^2*l3*l4*m2*m3^2*m4*t2p^2*cos(2*theta3 + 2*theta4) - 22*l2*l3*l4^2*m3^2*m4^2*t2p*t3p*cos(3*theta3 - theta4) + 6*l2*l3*l4^2*m3^2*m4^2*t2p*t4p*cos(3*theta3 - theta4) + 18*l2*l3*l4^2*m3^2*m4^2*t2p*t3p*cos(3*theta3 + 3*theta4) - 2*l2*l3*l4^2*m3^2*m4^2*t3p*t4p*cos(3*theta3 - theta4) - 18*l2*l3*l4^2*m3^2*m4^2*t2p*t4p*cos(3*theta3 + 3*theta4) - 6*l2*l3*l4^2*m3^2*m4^2*t3p*t4p*cos(3*theta3 + 3*theta4) - 12*l2^2*l4^2*m2*m3*m4^2*t2p*t3p*cos(2*theta3 - theta4) + 12*l2^2*l4^2*m2*m3*m4^2*t2p*t4p*cos(2*theta3 - theta4) - 20*l2^2*l4^2*m2*m3*m4^2*t2p*t3p*cos(2*theta3 + 3*theta4) + 20*l2^2*l4^2*m2*m3*m4^2*t2p*t4p*cos(2*theta3 + 3*theta4) - 3*l2*l3*l4^2*m2*m3*m4^2*t1p^2*cos(2*theta2 + theta3 + theta4) + 4*l2*l3*l4^2*m2*m3^2*m4*t1p^2*cos(2*theta2 + theta3 + theta4) - 4*g*l2*l3*l4*m2*m3*m4^2*sin(2*theta3 - theta2 + 2*theta4) - 4*g*l2*l3*l4*m2*m3^2*m4*sin(2*theta3 - theta2 + 2*theta4) + 16*l2*l3*l4^2*m2*m3*m4^2*t2p*t3p*cos(theta3 + theta4) + 32*l2*l3*l4^2*m2*m3^2*m4*t2p*t3p*cos(theta3 + theta4) - 96*l2*l3*l4^2*m2*m3*m4^2*t2p*t4p*cos(theta3 + theta4) - 96*l2*l3*l4^2*m2*m3^2*m4*t2p*t4p*cos(theta3 + theta4) - 52*l2*l3*l4^2*m2*m3*m4^2*t3p*t4p*cos(theta3 + theta4) - 48*l2*l3*l4^2*m2*m3^2*m4*t3p*t4p*cos(theta3 + theta4) + 32*l2*l3*l4^2*m2*m3*m4^2*t2p*t3p*cos(theta3 - theta4) + 64*l2*l3*l4^2*m2*m3^2*m4*t2p*t3p*cos(theta3 - theta4) + 48*l2*l3*l4^2*m2*m3*m4^2*t2p*t4p*cos(theta3 - theta4) + 32*l2*l3^2*l4*m2*m3*m4^2*t2p*t3p*cos(theta3 - 2*theta4) - 32*l2*l3^2*l4*m2*m3*m4^2*t2p*t3p*cos(theta3 + 2*theta4) + 32*l2*l3^2*l4*m2*m3^2*m4*t2p*t3p*cos(theta3 - 2*theta4) - 32*l2*l3^2*l4*m2*m3^2*m4*t2p*t3p*cos(theta3 + 2*theta4) + 16*l2*l3*l4^2*m2*m3*m4^2*t2p*t3p*cos(theta3 - 3*theta4) - 64*l2*l3*l4^2*m2*m3*m4^2*t2p*t3p*cos(theta3 + 3*theta4) + 36*l2*l3*l4^2*m2*m3*m4^2*t3p*t4p*cos(theta3 - theta4) + 16*l2*l3*l4^2*m2*m3^2*m4*t3p*t4p*cos(theta3 - theta4) + 48*l2*l3*l4^2*m2*m3*m4^2*t2p*t4p*cos(theta3 + 3*theta4) + 4*l2*l3*l4^2*m2*m3*m4^2*t3p*t4p*cos(theta3 - 3*theta4) + 12*l2*l3*l4^2*m2*m3*m4^2*t3p*t4p*cos(theta3 + 3*theta4))/(8*l2^2*l3*l4*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3))^2);

A_l31=-(t1p*(2*l2^2*m3^2*sin(2*theta2 + theta3) - 2*l3^2*m3^2*sin(2*theta2 + theta3) - 2*l2^2*m3^2*sin(2*theta2 - theta3) + 2*l3^2*m3^2*sin(2*theta2 + 3*theta3) + 4*l2^2*m3^2*sin(theta3) + 4*l3^2*m3^2*sin(theta3) + 2*l2^2*m2*m3*sin(2*theta2 + theta3) + l2^2*m2*m4*sin(2*theta2 + theta3) + 2*l2^2*m3*m4*sin(2*theta2 + theta3) - 2*l2^2*m2*m4*sin(theta3 + 2*theta4) - 2*l3^2*m3*m4*sin(2*theta2 + theta3) - 4*l2*l3*m3^2*sin(2*theta2) + 4*l2*l3*m3^2*sin(2*theta3) + 4*l2*l3*m3^2*sin(2*theta2 + 2*theta3) - 2*l2^2*m2*m3*sin(2*theta2 - theta3) - l2^2*m2*m4*sin(2*theta2 - theta3) - 2*l2^2*m3*m4*sin(2*theta2 - theta3) + 2*l3^2*m3*m4*sin(2*theta2 + 3*theta3) + 4*l2^2*m2*m3*sin(theta3) + 2*l2^2*m2*m4*sin(theta3) + 4*l2^2*m3*m4*sin(theta3) + 4*l3^2*m3*m4*sin(theta3) - l2^2*m2*m4*sin(theta3 - 2*theta2 + 2*theta4) - l2^2*m2*m4*sin(2*theta2 + theta3 + 2*theta4) + 2*l2*l4*m2*m4*sin(2*theta2 + 2*theta3 + theta4) + l2*l4*m3*m4*sin(2*theta2 + 2*theta3 + theta4) - l3*l4*m3*m4*sin(2*theta2 + theta3 + 3*theta4) + l3*l4*m3*m4*sin(2*theta2 + 3*theta3 + theta4) - l2*l4*m3*m4*sin(2*theta2 + theta4) + 2*l2*l4*m3*m4*sin(2*theta3 + theta4) + 2*l3*l4*m3*m4*sin(theta3 - theta4) - 4*l2*l3*m2*m3*sin(2*theta2) - 2*l2*l3*m2*m4*sin(2*theta2) - 4*l2*l3*m3*m4*sin(2*theta2) - 2*l2*l3*m2*m4*sin(2*theta4) + 4*l2*l3*m3*m4*sin(2*theta3) - 2*l2*l3*m2*m4*sin(2*theta2 + 2*theta3 + 2*theta4) - 2*l2*l4*m2*m4*sin(2*theta2 + 2*theta3 + 3*theta4) - l2*l4*m3*m4*sin(2*theta2 + 2*theta3 + 3*theta4) + l2*l4*m3*m4*sin(2*theta2 + 4*theta3 + 3*theta4) + l3*l4*m3*m4*sin(2*theta2 + 3*theta3 + 3*theta4) + 4*l2*l3*m2*m3*sin(2*theta2 + 2*theta3) + 2*l2*l3*m2*m4*sin(2*theta2 + 2*theta3) + l2*l3*m2*m4*sin(2*theta2 - 2*theta4) + l2*l3*m2*m4*sin(2*theta2 + 2*theta4) + 4*l2*l3*m3*m4*sin(2*theta2 + 2*theta3) - l3*l4*m3*m4*sin(2*theta2 + theta3 + theta4) + 2*l3*l4*m3*m4*sin(theta3 + theta4) - 4*l2*l4*m2*m4*sin(theta4) - 2*l2*l4*m3*m4*sin(theta4)))/(2*l2*l3*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3)));
A_l32=-(2*b2*l3^2*m4*cos(2*theta4) - 2*b2*l3^2*m4 - 4*b2*l3^2*m3 + 2*b2*l2*l3*m4*cos(theta3 + 2*theta4) + 2*l3^3*l4*m4^2*t3p*sin(3*theta4) - 2*l3^3*l4*m4^2*t4p*sin(3*theta4) + l2^3*l4*m4^2*t3p*sin(3*theta3 + 3*theta4) - l2^3*l4*m4^2*t4p*sin(3*theta3 + 3*theta4) + 8*l2^2*l3^2*m3^2*t2p*sin(2*theta3) + 4*l2^2*l3^2*m3^2*t3p*sin(2*theta3) - 3*l2^3*l4*m4^2*t3p*sin(theta3 + theta4) + 3*l2^3*l4*m4^2*t4p*sin(theta3 + theta4) + 8*l2*l3^3*m3^2*t2p*sin(theta3) + 8*l2^3*l3*m3^2*t2p*sin(theta3) + 8*l2*l3^3*m3^2*t3p*sin(theta3) - 6*l3^3*l4*m4^2*t3p*sin(theta4) + 6*l3^3*l4*m4^2*t4p*sin(theta4) - 4*b2*l2*l3*m3*cos(theta3) - 2*b2*l2*l3*m4*cos(theta3) - 8*l2^2*l3*l4*m4^2*t3p*sin(theta4) + 8*l2^2*l3*l4*m4^2*t4p*sin(theta4) + 5*l2*l3^2*l4*m4^2*t3p*sin(theta3 - theta4) - 5*l2*l3^2*l4*m4^2*t4p*sin(theta3 - theta4) - 4*l2^2*l3*l4*m4^2*t3p*sin(2*theta3 + theta4) + 5*l2*l3^2*l4*m4^2*t3p*sin(theta3 + 3*theta4) + 4*l2^2*l3*l4*m4^2*t4p*sin(2*theta3 + theta4) - 5*l2*l3^2*l4*m4^2*t4p*sin(theta3 + 3*theta4) - 4*l2^2*l3^2*m2*m4*t2p*sin(2*theta4) + 8*l2^2*l3^2*m3*m4*t2p*sin(2*theta3) - 4*l2^2*l3^2*m2*m4*t3p*sin(2*theta4) + 4*l2^2*l3^2*m3*m4*t3p*sin(2*theta3) - 4*l2^3*l4*m2*m4*t3p*sin(theta3 + theta4) + 4*l2^3*l4*m2*m4*t4p*sin(theta3 + theta4) - 4*l2^3*l4*m3*m4*t3p*sin(theta3 + theta4) + 4*l2^3*l4*m3*m4*t4p*sin(theta3 + theta4) + 4*l2^2*l3*l4*m4^2*t3p*sin(2*theta3 + 3*theta4) - 4*l2^2*l3*l4*m4^2*t4p*sin(2*theta3 + 3*theta4) + 8*l2^3*l3*m2*m3*t2p*sin(theta3) + 4*l2^3*l3*m2*m4*t2p*sin(theta3) + 8*l2*l3^3*m3*m4*t2p*sin(theta3) + 8*l2^3*l3*m3*m4*t2p*sin(theta3) + 8*l2*l3^3*m3*m4*t3p*sin(theta3) - 8*l3^3*l4*m3*m4*t3p*sin(theta4) + 8*l3^3*l4*m3*m4*t4p*sin(theta4) - 10*l2*l3^2*l4*m4^2*t3p*sin(theta3 + theta4) + 10*l2*l3^2*l4*m4^2*t4p*sin(theta3 + theta4) - 4*l2^3*l3*m2*m4*t2p*sin(theta3 + 2*theta4) + 4*l2*l3^2*l4*m3*m4*t2p*sin(theta3 + theta4) - 8*l2*l3^2*l4*m3*m4*t3p*sin(theta3 + theta4) + 16*l2*l3^2*l4*m3*m4*t4p*sin(theta3 + theta4) - 8*l2^2*l3*l4*m2*m4*t2p*sin(theta4) - 16*l2^2*l3*l4*m2*m4*t3p*sin(theta4) - 4*l2^2*l3*l4*m3*m4*t2p*sin(theta4) - 16*l2^2*l3*l4*m3*m4*t3p*sin(theta4) + 8*l2^2*l3*l4*m3*m4*t4p*sin(theta4) + 4*l2*l3^2*l4*m3*m4*t2p*sin(theta3 - theta4) + 12*l2*l3^2*l4*m3*m4*t3p*sin(theta3 - theta4) + 4*l2^2*l3*l4*m3*m4*t2p*sin(2*theta3 + theta4) - 4*l2*l3^2*l4*m3*m4*t4p*sin(theta3 - theta4) + 8*l2^2*l3*l4*m3*m4*t4p*sin(2*theta3 + theta4))/(2*l2^2*l3^2*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3)));
A_l33=-(4*b3*l2^2*m2 + 4*b3*l2^2*m3 + 2*b3*l2^2*m4 + 4*b3*l3^2*m3 + 2*b3*l3^2*m4 - 2*b3*l3^2*m4*cos(2*theta4) - 2*b3*l2^2*m4*cos(2*theta3 + 2*theta4) - 4*b3*l2*l3*m4*cos(theta3 + 2*theta4) + 2*l3^3*l4*m4^2*t2p*sin(3*theta4) + 4*l3^3*l4*m4^2*t3p*sin(3*theta4) - l3^3*l4*m4^2*t4p*sin(3*theta4) + l2^3*l4*m4^2*t2p*sin(3*theta3 + 3*theta4) + 4*l2^2*l3^2*m3^2*t2p*sin(2*theta3) + 4*l2^2*l3^2*m3^2*t3p*sin(2*theta3) - 3*l2^3*l4*m4^2*t2p*sin(theta3 + theta4) + 8*l2*l3^3*m3^2*t2p*sin(theta3) + 8*l2*l3^3*m3^2*t3p*sin(theta3) - 6*l3^3*l4*m4^2*t2p*sin(theta4) - 12*l3^3*l4*m4^2*t3p*sin(theta4) + 3*l3^3*l4*m4^2*t4p*sin(theta4) + 8*b3*l2*l3*m3*cos(theta3) + 4*b3*l2*l3*m4*cos(theta3) - 8*l2^2*l3*l4*m4^2*t2p*sin(theta4) - 8*l2^2*l3*l4*m4^2*t3p*sin(theta4) + 2*l2^2*l3*l4*m4^2*t4p*sin(theta4) + 5*l2*l3^2*l4*m4^2*t2p*sin(theta3 - theta4) + 8*l2*l3^2*l4*m4^2*t3p*sin(theta3 - theta4) - 4*l2^2*l3*l4*m4^2*t2p*sin(2*theta3 + theta4) + 5*l2*l3^2*l4*m4^2*t2p*sin(theta3 + 3*theta4) - 2*l2*l3^2*l4*m4^2*t4p*sin(theta3 - theta4) - 4*l2^2*l3*l4*m4^2*t3p*sin(2*theta3 + theta4) + 8*l2*l3^2*l4*m4^2*t3p*sin(theta3 + 3*theta4) + l2^2*l3*l4*m4^2*t4p*sin(2*theta3 + theta4) - 2*l2*l3^2*l4*m4^2*t4p*sin(theta3 + 3*theta4) - 4*l2^2*l3^2*m2*m4*t2p*sin(2*theta4) + 4*l2^2*l3^2*m3*m4*t2p*sin(2*theta3) - 4*l2^2*l3^2*m2*m4*t3p*sin(2*theta4) + 4*l2^2*l3^2*m3*m4*t3p*sin(2*theta3) - 4*l2^3*l4*m2*m4*t2p*sin(theta3 + theta4) - 4*l2^3*l4*m3*m4*t2p*sin(theta3 + theta4) + 4*l2^2*l3*l4*m4^2*t2p*sin(2*theta3 + 3*theta4) + 4*l2^2*l3*l4*m4^2*t3p*sin(2*theta3 + 3*theta4) - l2^2*l3*l4*m4^2*t4p*sin(2*theta3 + 3*theta4) + 8*l2*l3^3*m3*m4*t2p*sin(theta3) + 8*l2*l3^3*m3*m4*t3p*sin(theta3) - 8*l3^3*l4*m3*m4*t2p*sin(theta4) - 16*l3^3*l4*m3*m4*t3p*sin(theta4) + 4*l3^3*l4*m3*m4*t4p*sin(theta4) - 10*l2*l3^2*l4*m4^2*t2p*sin(theta3 + theta4) - 16*l2*l3^2*l4*m4^2*t3p*sin(theta3 + theta4) + 4*l2*l3^2*l4*m4^2*t4p*sin(theta3 + theta4) - 8*l2*l3^2*l4*m3*m4*t2p*sin(theta3 + theta4) - 12*l2*l3^2*l4*m3*m4*t3p*sin(theta3 + theta4) + 8*l2*l3^2*l4*m3*m4*t4p*sin(theta3 + theta4) - 16*l2^2*l3*l4*m2*m4*t2p*sin(theta4) - 24*l2^2*l3*l4*m2*m4*t3p*sin(theta4) - 16*l2^2*l3*l4*m3*m4*t2p*sin(theta4) - 4*l2^2*l3*l4*m2*m4*t4p*sin(theta4) - 20*l2^2*l3*l4*m3*m4*t3p*sin(theta4) + 12*l2*l3^2*l4*m3*m4*t2p*sin(theta3 - theta4) + 20*l2*l3^2*l4*m3*m4*t3p*sin(theta3 - theta4) + 4*l2^2*l3*l4*m3*m4*t3p*sin(2*theta3 + theta4) + 4*l2^2*l3*l4*m3*m4*t4p*sin(2*theta3 + theta4))/(2*l2^2*l3^2*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3)));
A_l34=-(2*b4*l2*l3^2*m3*cos(theta3 + theta4) - 4*b4*l2^2*l4*m3 - 2*b4*l2^2*l4*m4 - 4*b4*l2^2*l4*m2 + 2*b4*l2*l3^2*m4*cos(theta3 + theta4) + 6*l3^3*l4^2*m4^2*t2p*sin(theta4) + 3*l3^3*l4^2*m4^2*t3p*sin(theta4) + 6*l3^3*l4^2*m4^2*t4p*sin(theta4) - 4*b4*l2^2*l3*m2*cos(theta4) - 2*b4*l2^2*l3*m3*cos(theta4) - 2*b4*l2^2*l3*m4*cos(theta4) - 2*b4*l2*l3^2*m3*cos(theta3 - theta4) - 2*b4*l2*l3^2*m4*cos(theta3 - theta4) + 2*b4*l2^2*l3*m3*cos(2*theta3 + theta4) + 2*b4*l2^2*l3*m4*cos(2*theta3 + theta4) - 2*l3^3*l4^2*m4^2*t2p*sin(3*theta4) - l3^3*l4^2*m4^2*t3p*sin(3*theta4) - 2*l3^3*l4^2*m4^2*t4p*sin(3*theta4) - l2^3*l4^2*m4^2*t2p*sin(3*theta3 + 3*theta4) + 2*b4*l2^2*l4*m4*cos(2*theta3 + 2*theta4) + 3*l2^3*l4^2*m4^2*t2p*sin(theta3 + theta4) - 4*l2^2*l3*l4^2*m4^2*t2p*sin(2*theta3 + 3*theta4) - l2^2*l3*l4^2*m4^2*t3p*sin(2*theta3 + 3*theta4) - 2*l2^2*l3*l4^2*m4^2*t4p*sin(2*theta3 + 3*theta4) + 8*l3^3*l4^2*m3*m4*t2p*sin(theta4) + 4*l3^3*l4^2*m3*m4*t3p*sin(theta4) + 8*l3^3*l4^2*m3*m4*t4p*sin(theta4) - 4*b4*l2*l3*l4*m3*cos(theta3) - 2*b4*l2*l3*l4*m4*cos(theta3) + 10*l2*l3^2*l4^2*m4^2*t2p*sin(theta3 + theta4) + 4*l2*l3^2*l4^2*m4^2*t3p*sin(theta3 + theta4) + 8*l2*l3^2*l4^2*m4^2*t4p*sin(theta3 + theta4) + 2*b4*l2*l3*l4*m4*cos(theta3 + 2*theta4) + 8*l2^2*l3*l4^2*m4^2*t2p*sin(theta4) + 2*l2^2*l3*l4^2*m4^2*t3p*sin(theta4) + 4*l2^2*l3*l4^2*m4^2*t4p*sin(theta4) - 5*l2*l3^2*l4^2*m4^2*t2p*sin(theta3 - theta4) - 2*l2*l3^2*l4^2*m4^2*t3p*sin(theta3 - theta4) + 4*l2^2*l3*l4^2*m4^2*t2p*sin(2*theta3 + theta4) - 5*l2*l3^2*l4^2*m4^2*t2p*sin(theta3 + 3*theta4) - 4*l2*l3^2*l4^2*m4^2*t4p*sin(theta3 - theta4) + l2^2*l3*l4^2*m4^2*t3p*sin(2*theta3 + theta4) - 2*l2*l3^2*l4^2*m4^2*t3p*sin(theta3 + 3*theta4) + 2*l2^2*l3*l4^2*m4^2*t4p*sin(2*theta3 + theta4) - 4*l2*l3^2*l4^2*m4^2*t4p*sin(theta3 + 3*theta4) + 4*l2^3*l4^2*m2*m4*t2p*sin(theta3 + theta4) + 4*l2^3*l4^2*m3*m4*t2p*sin(theta3 + theta4) + 16*l2*l3^2*l4^2*m3*m4*t2p*sin(theta3 + theta4) + 8*l2*l3^2*l4^2*m3*m4*t3p*sin(theta3 + theta4) + 12*l2*l3^2*l4^2*m3*m4*t4p*sin(theta3 + theta4) - 4*l2^2*l3*l4^2*m2*m4*t3p*sin(theta4) + 8*l2^2*l3*l4^2*m3*m4*t2p*sin(theta4) + 4*l2^2*l3*l4^2*m3*m4*t4p*sin(theta4) - 4*l2*l3^2*l4^2*m3*m4*t2p*sin(theta3 - theta4) + 8*l2^2*l3*l4^2*m3*m4*t2p*sin(2*theta3 + theta4) - 4*l2*l3^2*l4^2*m3*m4*t4p*sin(theta3 - theta4) + 4*l2^2*l3*l4^2*m3*m4*t3p*sin(2*theta3 + theta4) + 4*l2^2*l3*l4^2*m3*m4*t4p*sin(2*theta3 + theta4))/(2*l2^2*l3^2*l4*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3)));
A_l35=0;
A_l36=-(2*g*l2*m3^2*sin(theta2 - theta3) - 2*g*l3*m3^2*sin(theta2 + 2*theta3) - 2*l2^2*m3^2*t1p^2*cos(2*theta2 - theta3) + 2*l3^2*m3^2*t1p^2*cos(2*theta2 + 3*theta3) - 2*g*l2*m3^2*sin(theta2 + theta3) + 2*l2^2*m3^2*t1p^2*cos(2*theta2 + theta3) - 2*l3^2*m3^2*t1p^2*cos(2*theta2 + theta3) + 2*g*l3*m3^2*sin(theta2) - 4*l2*l3*m3^2*t1p^2*cos(2*theta2) + 2*g*l2*m2*m3*sin(theta2 - theta3) + g*l2*m2*m4*sin(theta2 - theta3) + 2*g*l2*m3*m4*sin(theta2 - theta3) - g*l3*m2*m4*sin(theta2 - 2*theta4) - g*l3*m2*m4*sin(theta2 + 2*theta4) - 2*g*l3*m3*m4*sin(theta2 + 2*theta3) + 4*l2*l3*m3^2*t1p^2*cos(2*theta2 + 2*theta3) - 2*l2^2*m2*m3*t1p^2*cos(2*theta2 - theta3) - l2^2*m2*m4*t1p^2*cos(2*theta2 - theta3) - 2*l2^2*m3*m4*t1p^2*cos(2*theta2 - theta3) + 2*l3^2*m3*m4*t1p^2*cos(2*theta2 + 3*theta3) + g*l2*m2*m4*sin(theta2 + theta3 + 2*theta4) + l2^2*m2*m4*t1p^2*cos(theta3 - 2*theta2 + 2*theta4) - l2^2*m2*m4*t1p^2*cos(2*theta2 + theta3 + 2*theta4) - 2*g*l2*m2*m3*sin(theta2 + theta3) - g*l2*m2*m4*sin(theta2 + theta3) - 2*g*l2*m3*m4*sin(theta2 + theta3) + 2*l2^2*m2*m3*t1p^2*cos(2*theta2 + theta3) + l2^2*m2*m4*t1p^2*cos(2*theta2 + theta3) + 2*l2^2*m3*m4*t1p^2*cos(2*theta2 + theta3) - 2*l3^2*m3*m4*t1p^2*cos(2*theta2 + theta3) + 4*g*l3*m2*m3*sin(theta2) + 2*g*l3*m2*m4*sin(theta2) + 2*g*l3*m3*m4*sin(theta2) + g*l2*m2*m4*sin(theta3 - theta2 + 2*theta4) - 4*l2*l3*m2*m3*t1p^2*cos(2*theta2) - 2*l2*l3*m2*m4*t1p^2*cos(2*theta2) - 4*l2*l3*m3*m4*t1p^2*cos(2*theta2) - 2*l2*l3*m2*m4*t1p^2*cos(2*theta2 + 2*theta3 + 2*theta4) - 2*l2*l4*m2*m4*t1p^2*cos(2*theta2 + 2*theta3 + 3*theta4) - l2*l4*m3*m4*t1p^2*cos(2*theta2 + 2*theta3 + 3*theta4) + l2*l4*m3*m4*t1p^2*cos(2*theta2 + 4*theta3 + 3*theta4) + l3*l4*m3*m4*t1p^2*cos(2*theta2 + 3*theta3 + 3*theta4) + 4*l2*l3*m2*m3*t1p^2*cos(2*theta2 + 2*theta3) + 2*l2*l3*m2*m4*t1p^2*cos(2*theta2 + 2*theta3) + l2*l3*m2*m4*t1p^2*cos(2*theta2 - 2*theta4) + l2*l3*m2*m4*t1p^2*cos(2*theta2 + 2*theta4) + 4*l2*l3*m3*m4*t1p^2*cos(2*theta2 + 2*theta3) - l3*l4*m3*m4*t1p^2*cos(2*theta2 + theta3 + theta4) + 2*l2*l4*m2*m4*t1p^2*cos(2*theta2 + 2*theta3 + theta4) + l2*l4*m3*m4*t1p^2*cos(2*theta2 + 2*theta3 + theta4) - l3*l4*m3*m4*t1p^2*cos(2*theta2 + theta3 + 3*theta4) + l3*l4*m3*m4*t1p^2*cos(2*theta2 + 3*theta3 + theta4) - l2*l4*m3*m4*t1p^2*cos(2*theta2 + theta4))/(2*l2*l3*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3)));
A_l37=
A_l38=

A_l41=-(4*l3^2*m2*m3*t1p*sin(theta4) - 4*l2*l4*m3^2*t1p*sin(theta3) + 4*l3^2*m2*m4*t1p*sin(theta4) + 4*l4^2*m2*m4*t1p*sin(theta4) + 2*l4^2*m3*m4*t1p*sin(theta4) + 2*l3^2*m2*m3*t1p*sin(2*theta2 + 2*theta3 + theta4) + 2*l3^2*m2*m4*t1p*sin(2*theta2 + 2*theta3 + theta4) - 2*l4^2*m2*m4*t1p*sin(2*theta2 + 2*theta3 + theta4) - l4^2*m3*m4*t1p*sin(2*theta2 + 2*theta3 + theta4) - 2*l2*l4*m3^2*t1p*sin(2*theta2 + theta3) + l4^2*m3*m4*t1p*sin(2*theta2 + theta4) - 2*l4^2*m3*m4*t1p*sin(2*theta3 + theta4) + 2*l3*l4*m3^2*t1p*sin(2*theta2) - 2*l3*l4*m3^2*t1p*sin(2*theta3) + 2*l3*l4*m3^2*t1p*sin(2*theta2 + 2*theta3 + 2*theta4) - l3*l4*m3^2*t1p*sin(2*theta2 + 4*theta3 + 2*theta4) - 2*l3^2*m2*m3*t1p*sin(2*theta2 + 2*theta3 - theta4) - 2*l3^2*m2*m4*t1p*sin(2*theta2 + 2*theta3 - theta4) + 2*l4^2*m2*m4*t1p*sin(2*theta2 + 2*theta3 + 3*theta4) + l4^2*m3*m4*t1p*sin(2*theta2 + 2*theta3 + 3*theta4) - l4^2*m3*m4*t1p*sin(2*theta2 + 4*theta3 + 3*theta4) + 2*l2*l4*m3^2*t1p*sin(2*theta2 - theta3) - 2*l3*l4*m3^2*t1p*sin(2*theta2 + 2*theta3) - l3*l4*m3^2*t1p*sin(2*theta2 + 2*theta4) + l2*l3*m2*m3*t1p*sin(theta3 - 2*theta2 + theta4) + l2*l3*m2*m3*t1p*sin(2*theta2 + theta3 + theta4) + l2*l3*m2*m4*t1p*sin(theta3 - 2*theta2 + theta4) + l2*l3*m2*m4*t1p*sin(2*theta2 + theta3 + theta4) + 2*l2*l3*m2*m3*t1p*sin(theta3 + theta4) + 2*l2*l3*m2*m4*t1p*sin(theta3 + theta4) - 4*l2*l4*m2*m3*t1p*sin(theta3) - 2*l2*l4*m2*m4*t1p*sin(theta3) - 4*l2*l4*m3*m4*t1p*sin(theta3) - l2*l3*m2*m3*t1p*sin(2*theta2 + theta3 - theta4) + l2*l3*m2*m3*t1p*sin(2*theta2 - theta3 + theta4) - l2*l3*m2*m4*t1p*sin(2*theta2 + theta3 - theta4) + l2*l3*m2*m4*t1p*sin(2*theta2 - theta3 + theta4) + l2*l4*m2*m4*t1p*sin(theta3 - 2*theta2 + 2*theta4) + l2*l4*m2*m4*t1p*sin(2*theta2 + theta3 + 2*theta4) - 2*l2*l3*m2*m3*t1p*sin(theta3 - theta4) - 2*l2*l4*m2*m3*t1p*sin(2*theta2 + theta3) - 2*l2*l3*m2*m4*t1p*sin(theta3 - theta4) - l2*l4*m2*m4*t1p*sin(2*theta2 + theta3) - 2*l2*l4*m3*m4*t1p*sin(2*theta2 + theta3) + 2*l2*l4*m2*m4*t1p*sin(theta3 + 2*theta4) + 2*l3*l4*m3*m4*t1p*sin(2*theta2) + 4*l3*l4*m2*m4*t1p*sin(2*theta4) - 2*l3*l4*m3*m4*t1p*sin(2*theta3) + 4*l3*l4*m2*m3*t1p*sin(2*theta2 + 2*theta3 + 2*theta4) + 4*l3*l4*m2*m4*t1p*sin(2*theta2 + 2*theta3 + 2*theta4) + 2*l3*l4*m3*m4*t1p*sin(2*theta2 + 2*theta3 + 2*theta4) - l3*l4*m3*m4*t1p*sin(2*theta2 + 4*theta3 + 2*theta4) + 2*l2*l4*m2*m3*t1p*sin(2*theta2 - theta3) + l2*l4*m2*m4*t1p*sin(2*theta2 - theta3) + 2*l2*l4*m3*m4*t1p*sin(2*theta2 - theta3) - 4*l3*l4*m2*m3*t1p*sin(2*theta2 + 2*theta3) - 4*l3*l4*m2*m4*t1p*sin(2*theta2 + 2*theta3) - 2*l3*l4*m3*m4*t1p*sin(2*theta2 + 2*theta3) - l3*l4*m3*m4*t1p*sin(2*theta2 + 2*theta4))/(2*l3*l4*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3)));
A_l42=(2*b2*l3^2*m3*cos(theta3 + theta4) - 2*b2*l3^2*m4*cos(theta3 - theta4) - 2*b2*l3^2*m3*cos(theta3 - theta4) + 2*b2*l3^2*m4*cos(theta3 + theta4) + 2*b2*l3*l4*m4*cos(theta3 + 2*theta4) + 2*l3^2*l4^2*m4^2*t3p*sin(theta3 - theta4) - 2*l3^2*l4^2*m4^2*t4p*sin(theta3 - theta4) + 2*l3^2*l4^2*m4^2*t3p*sin(theta3 + 3*theta4) - 2*l3^2*l4^2*m4^2*t4p*sin(theta3 + 3*theta4) + l2^2*l4^2*m4^2*t3p*sin(3*theta3 + 3*theta4) - l2^2*l4^2*m4^2*t4p*sin(3*theta3 + 3*theta4) - 4*l3^3*l4*m4^2*t3p*sin(theta3) + 4*l3^3*l4*m4^2*t4p*sin(theta3) - 4*b2*l3*l4*m3*cos(theta3) - 2*b2*l3*l4*m4*cos(theta3) + 2*l3^3*l4*m4^2*t3p*sin(theta3 - 2*theta4) + 2*l3^3*l4*m4^2*t3p*sin(theta3 + 2*theta4) - 2*l3^3*l4*m4^2*t4p*sin(theta3 - 2*theta4) - 2*l3^3*l4*m4^2*t4p*sin(theta3 + 2*theta4) - 3*l2^2*l4^2*m4^2*t3p*sin(theta3 + theta4) + 3*l2^2*l4^2*m4^2*t4p*sin(theta3 + theta4) - 4*l3^2*l4^2*m4^2*t3p*sin(theta3 + theta4) + 4*l3^2*l4^2*m4^2*t4p*sin(theta3 + theta4) + 8*l2^2*l3*l4*m3^2*t2p*sin(theta3) - 2*l2^2*l3*l4*m4^2*t3p*sin(theta3) - 6*l2*l3*l4^2*m4^2*t3p*sin(theta4) + 2*l2^2*l3*l4*m4^2*t4p*sin(theta3) + 6*l2*l3*l4^2*m4^2*t4p*sin(theta4) - 3*l2*l3*l4^2*m4^2*t3p*sin(2*theta3 + theta4) - l2^2*l3*l4*m4^2*t3p*sin(theta3 + 2*theta4) + 3*l2*l3*l4^2*m4^2*t4p*sin(2*theta3 + theta4) + l2^2*l3*l4*m4^2*t4p*sin(theta3 + 2*theta4) + 4*l2^2*l3^2*m2*m3*t2p*sin(theta3 - theta4) + 4*l2^2*l3^2*m2*m4*t2p*sin(theta3 - theta4) + 4*l3^2*l4^2*m3*m4*t3p*sin(theta3 - theta4) - 4*l3^2*l4^2*m3*m4*t4p*sin(theta3 - theta4) + 4*l2*l3^2*l4*m3^2*t2p*sin(2*theta3) + 4*l2*l3^2*l4*m3^2*t3p*sin(2*theta3) - 3*l2*l3^2*l4*m4^2*t3p*sin(2*theta3) - 3*l2*l3^2*l4*m4^2*t3p*sin(2*theta4) + 3*l2*l3^2*l4*m4^2*t4p*sin(2*theta3) + 3*l2*l3^2*l4*m4^2*t4p*sin(2*theta4) + 3*l2*l3^2*l4*m4^2*t3p*sin(2*theta3 + 2*theta4) + 3*l2*l3*l4^2*m4^2*t3p*sin(2*theta3 + 3*theta4) - 3*l2*l3^2*l4*m4^2*t4p*sin(2*theta3 + 2*theta4) + l2^2*l3*l4*m4^2*t3p*sin(3*theta3 + 2*theta4) - 3*l2*l3*l4^2*m4^2*t4p*sin(2*theta3 + 3*theta4) - l2^2*l3*l4*m4^2*t4p*sin(3*theta3 + 2*theta4) - 8*l2*l3^3*m2*m3*t2p*sin(theta4) - 8*l2*l3^3*m2*m3*t3p*sin(theta4) - 8*l2*l3^3*m2*m4*t2p*sin(theta4) - 8*l2*l3^3*m2*m4*t3p*sin(theta4) - 4*l3^3*l4*m3*m4*t3p*sin(theta3) + 4*l3^3*l4*m3*m4*t4p*sin(theta3) + 2*l3^3*l4*m3*m4*t3p*sin(theta3 - 2*theta4) + 2*l3^3*l4*m3*m4*t3p*sin(theta3 + 2*theta4) - 2*l3^3*l4*m3*m4*t4p*sin(theta3 - 2*theta4) - 2*l3^3*l4*m3*m4*t4p*sin(theta3 + 2*theta4) - 4*l2^2*l3^2*m2*m3*t2p*sin(theta3 + theta4) - 4*l2^2*l3^2*m2*m4*t2p*sin(theta3 + theta4) - 4*l2^2*l4^2*m2*m4*t3p*sin(theta3 + theta4) + 4*l2^2*l4^2*m2*m4*t4p*sin(theta3 + theta4) - 4*l2^2*l4^2*m3*m4*t3p*sin(theta3 + theta4) + 4*l2^2*l4^2*m3*m4*t4p*sin(theta3 + theta4) - 4*l3^2*l4^2*m3*m4*t3p*sin(theta3 + theta4) + 4*l3^2*l4^2*m3*m4*t4p*sin(theta3 + theta4) + 8*l2^2*l3*l4*m2*m3*t2p*sin(theta3) + 4*l2^2*l3*l4*m2*m4*t2p*sin(theta3) - 8*l2*l3*l4^2*m2*m4*t2p*sin(theta4) - 2*l2^2*l3*l4*m2*m4*t3p*sin(theta3) + 8*l2^2*l3*l4*m3*m4*t2p*sin(theta3) - 16*l2*l3*l4^2*m2*m4*t3p*sin(theta4) - 4*l2*l3*l4^2*m3*m4*t2p*sin(theta4) + 2*l2^2*l3*l4*m2*m4*t4p*sin(theta3) - 2*l2^2*l3*l4*m3*m4*t3p*sin(theta3) - 14*l2*l3*l4^2*m3*m4*t3p*sin(theta4) + 2*l2^2*l3*l4*m3*m4*t4p*sin(theta3) + 6*l2*l3*l4^2*m3*m4*t4p*sin(theta4) - 4*l2^2*l3*l4*m2*m4*t2p*sin(theta3 + 2*theta4) + 4*l2*l3*l4^2*m3*m4*t2p*sin(2*theta3 + theta4) - 2*l2^2*l3*l4*m2*m4*t3p*sin(theta3 + 2*theta4) + 2*l2*l3*l4^2*m3*m4*t3p*sin(2*theta3 + theta4) + 2*l2^2*l3*l4*m2*m4*t4p*sin(theta3 + 2*theta4) - l2^2*l3*l4*m3*m4*t3p*sin(theta3 + 2*theta4) + 6*l2*l3*l4^2*m3*m4*t4p*sin(2*theta3 + theta4) + l2^2*l3*l4*m3*m4*t4p*sin(theta3 + 2*theta4) - 8*l2*l3^2*l4*m2*m4*t2p*sin(2*theta4) + 4*l2*l3^2*l4*m3*m4*t2p*sin(2*theta3) - 12*l2*l3^2*l4*m2*m4*t3p*sin(2*theta4) + l2*l3^2*l4*m3*m4*t3p*sin(2*theta3) - 3*l2*l3^2*l4*m3*m4*t3p*sin(2*theta4) + 3*l2*l3^2*l4*m3*m4*t4p*sin(2*theta3) + 3*l2*l3^2*l4*m3*m4*t4p*sin(2*theta4) + 3*l2*l3^2*l4*m3*m4*t3p*sin(2*theta3 + 2*theta4) - 3*l2*l3^2*l4*m3*m4*t4p*sin(2*theta3 + 2*theta4) + l2^2*l3*l4*m3*m4*t3p*sin(3*theta3 + 2*theta4) - l2^2*l3*l4*m3*m4*t4p*sin(3*theta3 + 2*theta4))/(2*l2*l3^2*l4*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3)));
A_l43=-(2*b3*l3^2*m3*cos(theta3 + theta4) - 2*b3*l3^2*m4*cos(theta3 - theta4) - 4*b3*l2*l4*m2 - 4*b3*l2*l4*m3 - 2*b3*l2*l4*m4 - 2*b3*l3^2*m3*cos(theta3 - theta4) + 2*b3*l3^2*m4*cos(theta3 + theta4) + 2*b3*l2*l3*m3*cos(2*theta3 + theta4) + 2*b3*l2*l3*m4*cos(2*theta3 + theta4) + 2*b3*l3*l4*m4*cos(theta3 + 2*theta4) - 2*l3^2*l4^2*m4^2*t2p*sin(theta3 - theta4) - 4*l3^2*l4^2*m4^2*t3p*sin(theta3 - theta4) - 2*l3^2*l4^2*m4^2*t2p*sin(theta3 + 3*theta4) + l3^2*l4^2*m4^2*t4p*sin(theta3 - theta4) - 4*l3^2*l4^2*m4^2*t3p*sin(theta3 + 3*theta4) + l3^2*l4^2*m4^2*t4p*sin(theta3 + 3*theta4) + 2*b3*l2*l4*m4*cos(2*theta3 + 2*theta4) - l2^2*l4^2*m4^2*t2p*sin(3*theta3 + 3*theta4) + 4*l3^3*l4*m4^2*t2p*sin(theta3) + 8*l3^3*l4*m4^2*t3p*sin(theta3) - 2*l3^3*l4*m4^2*t4p*sin(theta3) - 4*b3*l2*l3*m2*cos(theta4) - 2*b3*l2*l3*m3*cos(theta4) - 2*b3*l2*l3*m4*cos(theta4) - 4*b3*l3*l4*m3*cos(theta3) - 2*b3*l3*l4*m4*cos(theta3) - 2*l3^3*l4*m4^2*t2p*sin(theta3 - 2*theta4) - 2*l3^3*l4*m4^2*t2p*sin(theta3 + 2*theta4) - 4*l3^3*l4*m4^2*t3p*sin(theta3 - 2*theta4) - 4*l3^3*l4*m4^2*t3p*sin(theta3 + 2*theta4) + l3^3*l4*m4^2*t4p*sin(theta3 - 2*theta4) + l3^3*l4*m4^2*t4p*sin(theta3 + 2*theta4) + 3*l2^2*l4^2*m4^2*t2p*sin(theta3 + theta4) + 4*l3^2*l4^2*m4^2*t2p*sin(theta3 + theta4) + 8*l3^2*l4^2*m4^2*t3p*sin(theta3 + theta4) - 2*l3^2*l4^2*m4^2*t4p*sin(theta3 + theta4) + 2*l2^2*l3*l4*m4^2*t2p*sin(theta3) + 6*l2*l3*l4^2*m4^2*t2p*sin(theta4) + 8*l2*l3*l4^2*m4^2*t3p*sin(theta4) - 2*l2*l3*l4^2*m4^2*t4p*sin(theta4) + 3*l2*l3*l4^2*m4^2*t2p*sin(2*theta3 + theta4) + l2^2*l3*l4*m4^2*t2p*sin(theta3 + 2*theta4) + 4*l2*l3*l4^2*m4^2*t3p*sin(2*theta3 + theta4) - l2*l3*l4^2*m4^2*t4p*sin(2*theta3 + theta4) - 4*l3^2*l4^2*m3*m4*t2p*sin(theta3 - theta4) - 8*l3^2*l4^2*m3*m4*t3p*sin(theta3 - theta4) + 2*l3^2*l4^2*m3*m4*t4p*sin(theta3 - theta4) - 4*l2*l3^2*l4*m3^2*t2p*sin(2*theta3) - 4*l2*l3^2*l4*m3^2*t3p*sin(2*theta3) + 3*l2*l3^2*l4*m4^2*t2p*sin(2*theta3) + 3*l2*l3^2*l4*m4^2*t2p*sin(2*theta4) + 4*l2*l3^2*l4*m4^2*t3p*sin(2*theta3) + 4*l2*l3^2*l4*m4^2*t3p*sin(2*theta4) - l2*l3^2*l4*m4^2*t4p*sin(2*theta3) - l2*l3^2*l4*m4^2*t4p*sin(2*theta4) - 3*l2*l3^2*l4*m4^2*t2p*sin(2*theta3 + 2*theta4) - 3*l2*l3*l4^2*m4^2*t2p*sin(2*theta3 + 3*theta4) - 4*l2*l3^2*l4*m4^2*t3p*sin(2*theta3 + 2*theta4) - l2^2*l3*l4*m4^2*t2p*sin(3*theta3 + 2*theta4) - 4*l2*l3*l4^2*m4^2*t3p*sin(2*theta3 + 3*theta4) + l2*l3^2*l4*m4^2*t4p*sin(2*theta3 + 2*theta4) + l2*l3*l4^2*m4^2*t4p*sin(2*theta3 + 3*theta4) + 8*l2*l3^3*m2*m3*t2p*sin(theta4) + 8*l2*l3^3*m2*m3*t3p*sin(theta4) + 8*l2*l3^3*m2*m4*t2p*sin(theta4) + 8*l2*l3^3*m2*m4*t3p*sin(theta4) + 4*l3^3*l4*m3*m4*t2p*sin(theta3) + 8*l3^3*l4*m3*m4*t3p*sin(theta3) - 2*l3^3*l4*m3*m4*t4p*sin(theta3) - 2*l3^3*l4*m3*m4*t2p*sin(theta3 - 2*theta4) - 2*l3^3*l4*m3*m4*t2p*sin(theta3 + 2*theta4) - 4*l3^3*l4*m3*m4*t3p*sin(theta3 - 2*theta4) - 4*l3^3*l4*m3*m4*t3p*sin(theta3 + 2*theta4) + l3^3*l4*m3*m4*t4p*sin(theta3 - 2*theta4) + l3^3*l4*m3*m4*t4p*sin(theta3 + 2*theta4) + 4*l2^2*l4^2*m2*m4*t2p*sin(theta3 + theta4) + 4*l2^2*l4^2*m3*m4*t2p*sin(theta3 + theta4) + 4*l3^2*l4^2*m3*m4*t2p*sin(theta3 + theta4) + 8*l3^2*l4^2*m3*m4*t3p*sin(theta3 + theta4) - 2*l3^2*l4^2*m3*m4*t4p*sin(theta3 + theta4) + 2*l2^2*l3*l4*m2*m4*t2p*sin(theta3) + 16*l2*l3*l4^2*m2*m4*t2p*sin(theta4) + 2*l2^2*l3*l4*m3*m4*t2p*sin(theta3) + 24*l2*l3*l4^2*m2*m4*t3p*sin(theta4) + 14*l2*l3*l4^2*m3*m4*t2p*sin(theta4) + 4*l2*l3*l4^2*m2*m4*t4p*sin(theta4) + 20*l2*l3*l4^2*m3*m4*t3p*sin(theta4) + 2*l2^2*l3*l4*m2*m4*t2p*sin(theta3 + 2*theta4) - 2*l2*l3*l4^2*m3*m4*t2p*sin(2*theta3 + theta4) + l2^2*l3*l4*m3*m4*t2p*sin(theta3 + 2*theta4) - 4*l2*l3*l4^2*m3*m4*t3p*sin(2*theta3 + theta4) - 4*l2*l3*l4^2*m3*m4*t4p*sin(2*theta3 + theta4) + 12*l2*l3^2*l4*m2*m4*t2p*sin(2*theta4) - l2*l3^2*l4*m3*m4*t2p*sin(2*theta3) + 16*l2*l3^2*l4*m2*m4*t3p*sin(2*theta4) + 3*l2*l3^2*l4*m3*m4*t2p*sin(2*theta4) + 2*l2*l3^2*l4*m2*m4*t4p*sin(2*theta4) + 4*l2*l3^2*l4*m3*m4*t3p*sin(2*theta4) - l2*l3^2*l4*m3*m4*t4p*sin(2*theta3) - l2*l3^2*l4*m3*m4*t4p*sin(2*theta4) - 3*l2*l3^2*l4*m3*m4*t2p*sin(2*theta3 + 2*theta4) - 4*l2*l3^2*l4*m3*m4*t3p*sin(2*theta3 + 2*theta4) - l2^2*l3*l4*m3*m4*t2p*sin(3*theta3 + 2*theta4) + l2*l3^2*l4*m3*m4*t4p*sin(2*theta3 + 2*theta4))/(2*l2*l3^2*l4*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3)));
A_l44=(4*l3^3*l4^2*m4^3*t2p*sin(theta3) - 2*b4*l2*l3^2*m4^2 - 2*b4*l2*l4^2*m4^2 - 2*b4*l2*l3^2*m3^2 + 2*l3^3*l4^2*m4^3*t3p*sin(theta3) + 4*l3^3*l4^2*m4^3*t4p*sin(theta3) + 2*b4*l2*l4^2*m4^2*cos(2*theta3 + 2*theta4) - 2*l3^2*l4^3*m4^3*t2p*sin(theta3 - theta4) - l3^2*l4^3*m4^3*t3p*sin(theta3 - theta4) - 2*l3^3*l4^2*m4^3*t2p*sin(theta3 - 2*theta4) - 2*l3^3*l4^2*m4^3*t2p*sin(theta3 + 2*theta4) - 2*l3^2*l4^3*m4^3*t2p*sin(theta3 + 3*theta4) - 2*l3^2*l4^3*m4^3*t4p*sin(theta3 - theta4) - l3^3*l4^2*m4^3*t3p*sin(theta3 - 2*theta4) - l3^3*l4^2*m4^3*t3p*sin(theta3 + 2*theta4) - l3^2*l4^3*m4^3*t3p*sin(theta3 + 3*theta4) - 2*l3^3*l4^2*m4^3*t4p*sin(theta3 - 2*theta4) - 2*l3^3*l4^2*m4^3*t4p*sin(theta3 + 2*theta4) - 2*l3^2*l4^3*m4^3*t4p*sin(theta3 + 3*theta4) - l2^2*l4^3*m4^3*t2p*sin(3*theta3 + 3*theta4) - 4*b4*l2*l3^2*m2*m3 - 4*b4*l2*l3^2*m2*m4 - 4*b4*l2*l3^2*m3*m4 - 4*b4*l2*l4^2*m2*m4 - 4*b4*l2*l4^2*m3*m4 + 3*l2^2*l4^3*m4^3*t2p*sin(theta3 + theta4) + 4*l3^2*l4^3*m4^3*t2p*sin(theta3 + theta4) + 2*l3^2*l4^3*m4^3*t3p*sin(theta3 + theta4) + 4*l3^2*l4^3*m4^3*t4p*sin(theta3 + theta4) + 2*b4*l2*l3^2*m3^2*cos(2*theta3) + 2*b4*l2*l3^2*m4^2*cos(2*theta3) + 4*b4*l2*l3^2*m3*m4*cos(2*theta3) - 3*l2*l3^2*l4^2*m4^3*t2p*sin(2*theta3 + 2*theta4) - l2*l3^2*l4^2*m4^3*t3p*sin(2*theta3 + 2*theta4) - l2^2*l3*l4^2*m4^3*t2p*sin(3*theta3 + 2*theta4) - 2*l2*l3^2*l4^2*m4^3*t4p*sin(2*theta3 + 2*theta4) + 6*l2*l3*l4^3*m4^3*t2p*sin(theta4) + 2*l2*l3*l4^3*m4^3*t3p*sin(theta4) + 4*l2*l3*l4^3*m4^3*t4p*sin(theta4) + 3*l2*l3*l4^3*m4^3*t2p*sin(2*theta3 + theta4) + l2*l3*l4^3*m4^3*t3p*sin(2*theta3 + theta4) + 2*l2*l3*l4^3*m4^3*t4p*sin(2*theta3 + theta4) + 4*l2^2*l4^3*m2*m4^2*t2p*sin(theta3 + theta4) + 4*l2^2*l4^3*m3*m4^2*t2p*sin(theta3 + theta4) + 4*l3^2*l4^3*m3*m4^2*t2p*sin(theta3 + theta4) + 2*l3^2*l4^3*m3*m4^2*t3p*sin(theta3 + theta4) + 4*l3^2*l4^3*m3*m4^2*t4p*sin(theta3 + theta4) + 2*l2^2*l3*l4^2*m4^3*t2p*sin(theta3) + 4*l3^3*l4^2*m3*m4^2*t2p*sin(theta3) + 2*l3^3*l4^2*m3*m4^2*t3p*sin(theta3) + 4*l3^3*l4^2*m3*m4^2*t4p*sin(theta3) - 4*b4*l2*l3*l4*m4^2*cos(theta4) - 3*l2*l3*l4^3*m4^3*t2p*sin(2*theta3 + 3*theta4) - l2*l3*l4^3*m4^3*t3p*sin(2*theta3 + 3*theta4) - 2*l2*l3*l4^3*m4^3*t4p*sin(2*theta3 + 3*theta4) + l2^2*l3*l4^2*m4^3*t2p*sin(theta3 + 2*theta4) - 4*l3^2*l4^3*m3*m4^2*t2p*sin(theta3 - theta4) - 2*l3^2*l4^3*m3*m4^2*t3p*sin(theta3 - theta4) - 2*l3^3*l4^2*m3*m4^2*t2p*sin(theta3 - 2*theta4) - 2*l3^3*l4^2*m3*m4^2*t2p*sin(theta3 + 2*theta4) - 4*l3^2*l4^3*m3*m4^2*t4p*sin(theta3 - theta4) - l3^3*l4^2*m3*m4^2*t3p*sin(theta3 - 2*theta4) - l3^3*l4^2*m3*m4^2*t3p*sin(theta3 + 2*theta4) - 2*l3^3*l4^2*m3*m4^2*t4p*sin(theta3 - 2*theta4) - 2*l3^3*l4^2*m3*m4^2*t4p*sin(theta3 + 2*theta4) + 4*b4*l2*l3*l4*m4^2*cos(2*theta3 + theta4) + 3*l2*l3^2*l4^2*m4^3*t2p*sin(2*theta3) + 3*l2*l3^2*l4^2*m4^3*t2p*sin(2*theta4) + l2*l3^2*l4^2*m4^3*t3p*sin(2*theta3) + l2*l3^2*l4^2*m4^3*t3p*sin(2*theta4) + 2*l2*l3^2*l4^2*m4^3*t4p*sin(2*theta3) + 2*l2*l3^2*l4^2*m4^3*t4p*sin(2*theta4) + 2*l2^2*l3*l4^2*m2*m4^2*t2p*sin(theta3 + 2*theta4) + l2^2*l3*l4^2*m3*m4^2*t2p*sin(theta3 + 2*theta4) + 3*l2*l3^2*l4^2*m3*m4^2*t2p*sin(2*theta3) - 2*l2*l3^2*l4^2*m2*m4^2*t3p*sin(2*theta4) + 3*l2*l3^2*l4^2*m3*m4^2*t2p*sin(2*theta4) + l2*l3^2*l4^2*m3*m4^2*t3p*sin(2*theta3) + l2*l3^2*l4^2*m3*m4^2*t3p*sin(2*theta4) + 2*l2*l3^2*l4^2*m3*m4^2*t4p*sin(2*theta3) + 2*l2*l3^2*l4^2*m3*m4^2*t4p*sin(2*theta4) - 3*l2*l3^2*l4^2*m3*m4^2*t2p*sin(2*theta3 + 2*theta4) - l2*l3^2*l4^2*m3*m4^2*t3p*sin(2*theta3 + 2*theta4) - l2^2*l3*l4^2*m3*m4^2*t2p*sin(3*theta3 + 2*theta4) - 2*l2*l3^2*l4^2*m3*m4^2*t4p*sin(2*theta3 + 2*theta4) - 4*l2*l3*l4^3*m2*m4^2*t3p*sin(theta4) + 6*l2*l3*l4^3*m3*m4^2*t2p*sin(theta4) + 4*l2*l3*l4^3*m3*m4^2*t4p*sin(theta4) - 8*b4*l2*l3*l4*m2*m4*cos(theta4) - 4*b4*l2*l3*l4*m3*m4*cos(theta4) + 6*l2*l3*l4^3*m3*m4^2*t2p*sin(2*theta3 + theta4) + 4*l2*l3*l4^3*m3*m4^2*t3p*sin(2*theta3 + theta4) + 4*l2*l3*l4^3*m3*m4^2*t4p*sin(2*theta3 + theta4) + 4*b4*l2*l3*l4*m3*m4*cos(2*theta3 + theta4) + 2*l2^2*l3*l4^2*m2*m4^2*t2p*sin(theta3) + 2*l2^2*l3*l4^2*m3*m4^2*t2p*sin(theta3))/(2*l2*l3^2*l4^2*m4*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3)));
A_l45=0;
A_l46=(2*g*l4*m3^2*sin(theta2 - theta3) - 2*g*l4*m3^2*sin(theta2 + theta3) - 2*l3*l4*m3^2*t1p^2*cos(2*theta2) - 2*l3*l4*m3^2*t1p^2*cos(2*theta2 + 2*theta3 + 2*theta4) + l3*l4*m3^2*t1p^2*cos(2*theta2 + 4*theta3 + 2*theta4) + 2*l3^2*m2*m3*t1p^2*cos(2*theta2 + 2*theta3 - theta4) + 2*l3^2*m2*m4*t1p^2*cos(2*theta2 + 2*theta3 - theta4) - 2*l4^2*m2*m4*t1p^2*cos(2*theta2 + 2*theta3 + 3*theta4) - l4^2*m3*m4*t1p^2*cos(2*theta2 + 2*theta3 + 3*theta4) + l4^2*m3*m4*t1p^2*cos(2*theta2 + 4*theta3 + 3*theta4) + 2*g*l4*m2*m3*sin(theta2 - theta3) + g*l4*m2*m4*sin(theta2 - theta3) + 2*g*l4*m3*m4*sin(theta2 - theta3) + g*l3*m2*m3*sin(theta2 + theta3 + theta4) + g*l3*m2*m4*sin(theta2 + theta3 + theta4) - 2*l2*l4*m3^2*t1p^2*cos(2*theta2 - theta3) + 2*l3*l4*m3^2*t1p^2*cos(2*theta2 + 2*theta3) + l3*l4*m3^2*t1p^2*cos(2*theta2 + 2*theta4) - g*l3*m2*m3*sin(theta2 + theta3 - theta4) + g*l3*m2*m3*sin(theta2 - theta3 + theta4) + g*l3*m2*m3*sin(theta3 - theta2 + theta4) - g*l3*m2*m4*sin(theta2 + theta3 - theta4) + g*l3*m2*m4*sin(theta2 - theta3 + theta4) + g*l3*m2*m4*sin(theta3 - theta2 + theta4) + g*l4*m2*m4*sin(theta2 + theta3 + 2*theta4) - 2*l3^2*m2*m3*t1p^2*cos(2*theta2 + 2*theta3 + theta4) - 2*l3^2*m2*m4*t1p^2*cos(2*theta2 + 2*theta3 + theta4) + 2*l4^2*m2*m4*t1p^2*cos(2*theta2 + 2*theta3 + theta4) + l4^2*m3*m4*t1p^2*cos(2*theta2 + 2*theta3 + theta4) - 2*g*l4*m2*m3*sin(theta2 + theta3) - g*l4*m2*m4*sin(theta2 + theta3) - 2*g*l4*m3*m4*sin(theta2 + theta3) + 2*l2*l4*m3^2*t1p^2*cos(2*theta2 + theta3) - l4^2*m3*m4*t1p^2*cos(2*theta2 + theta4) + g*l4*m2*m4*sin(theta3 - theta2 + 2*theta4) - 2*l3*l4*m3*m4*t1p^2*cos(2*theta2) - 4*l3*l4*m2*m3*t1p^2*cos(2*theta2 + 2*theta3 + 2*theta4) - 4*l3*l4*m2*m4*t1p^2*cos(2*theta2 + 2*theta3 + 2*theta4) - 2*l3*l4*m3*m4*t1p^2*cos(2*theta2 + 2*theta3 + 2*theta4) + l3*l4*m3*m4*t1p^2*cos(2*theta2 + 4*theta3 + 2*theta4) - 2*l2*l4*m2*m3*t1p^2*cos(2*theta2 - theta3) - l2*l4*m2*m4*t1p^2*cos(2*theta2 - theta3) - 2*l2*l4*m3*m4*t1p^2*cos(2*theta2 - theta3) + 4*l3*l4*m2*m3*t1p^2*cos(2*theta2 + 2*theta3) + 4*l3*l4*m2*m4*t1p^2*cos(2*theta2 + 2*theta3) + 2*l3*l4*m3*m4*t1p^2*cos(2*theta2 + 2*theta3) + l3*l4*m3*m4*t1p^2*cos(2*theta2 + 2*theta4) + l2*l3*m2*m3*t1p^2*cos(theta3 - 2*theta2 + theta4) - l2*l3*m2*m3*t1p^2*cos(2*theta2 + theta3 + theta4) + l2*l3*m2*m4*t1p^2*cos(theta3 - 2*theta2 + theta4) - l2*l3*m2*m4*t1p^2*cos(2*theta2 + theta3 + theta4) + l2*l3*m2*m3*t1p^2*cos(2*theta2 + theta3 - theta4) - l2*l3*m2*m3*t1p^2*cos(2*theta2 - theta3 + theta4) + l2*l3*m2*m4*t1p^2*cos(2*theta2 + theta3 - theta4) - l2*l3*m2*m4*t1p^2*cos(2*theta2 - theta3 + theta4) + l2*l4*m2*m4*t1p^2*cos(theta3 - 2*theta2 + 2*theta4) - l2*l4*m2*m4*t1p^2*cos(2*theta2 + theta3 + 2*theta4) + 2*l2*l4*m2*m3*t1p^2*cos(2*theta2 + theta3) + l2*l4*m2*m4*t1p^2*cos(2*theta2 + theta3) + 2*l2*l4*m3*m4*t1p^2*cos(2*theta2 + theta3))/(2*l3*l4*(2*m2*m3 + m2*m4 + m3*m4 - m3^2*cos(2*theta3) + m3^2 - m2*m4*cos(2*theta4) - m3*m4*cos(2*theta3)));
A_l47=
A_l48=

A_l51=1;
A_l52=0;
A_l53=0;
A_l54=0;
A_l55=0;
A_l56=0;
A_l57=0;
A_l58=0;

A_l61=0;
A_l62=1;
A_l63=0;
A_l64=0;
A_l65=0;
A_l66=0;
A_l67=0;
A_l68=0;

A_l71=0;
A_l72=0;
A_l73=1;
A_l74=0;
A_l75=0;
A_l76=0;
A_l77=0;
A_l78=0;

A_l81=0;
A_l82=0;
A_l83=0;
A_l84=1;
A_l85=0;
A_l86=0;
A_l87=0;
A_l88=0;


A_l=[A_l11,A_l12,A_l13,A_l14,A_l15,A_l16,A_l17,A_l18;...
     A_l21,A_l22,A_l23,A_l24,A_l25,A_l26,A_l27,A_l28;...
     A_l31,A_l32,A_l33,A_l34,A_l35,A_l36,A_l37,A_l38;...
     A_l41,A_l42,A_l43,A_l44,A_l45,A_l46,A_l47,A_l48;...
     A_l51,A_l52,A_l53,A_l54,A_l55,A_l56,A_l57,A_l58;...
     A_l61,A_l62,A_l63,A_l64,A_l65,A_l66,A_l67,A_l68;...
     A_l71,A_l72,A_l73,A_l74,A_l75,A_l76,A_l77,A_l78;...
     A_l81,A_l82,A_l83,A_l84,A_l85,A_l86,A_l87,A_l88];












